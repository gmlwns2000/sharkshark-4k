module __torch__.upscale.model.bsvd.model.___torch_mangle_23.BSVD {
  parameters {
  }
  attributes {
    temp1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_24.DenBlock object at 0x558b2bf1e970>
    temp2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_55.DenBlock object at 0x558b2bf94de0>
  }
  methods {
    method forward {
      graph(%self : __torch__.upscale.model.bsvd.model.___torch_mangle_23.BSVD,
            %input.1 : Tensor,
            %noise_map.1 : Tensor):
        %7657 : int[] = prim::Constant[value=[1, 1, 1, 1]]()
        %7565 : int[] = prim::Constant[value=[2, 2]]()
        %7564 : int[] = prim::Constant[value=[1, 1]]()
        %36 : str = prim::Constant[value="AssertionError: "]()
        %35 : bool = prim::Constant[value=1]() # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:539:24
        %34 : NoneType = prim::Constant()
        %33 : int = prim::Constant[value=1]() # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:539:39
        %32 : int = prim::Constant[value=0]() # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:541:28
        %31 : int = prim::Constant[value=9223372036854775807]() # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:543:24
        %30 : bool = prim::Constant[value=0]()
        %29 : int = prim::Constant[value=3]() # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:26
        %27 : float = prim::Constant[value=0.]() # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/activation.py:230:33
        %26 : float = prim::Constant[value=6.]() # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/activation.py:230:47
        %fold_div.6 : int = prim::Constant[value=8]() # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:95:19
        %24 : int = prim::Constant[value=-1]() # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:78
        %23 : Device = prim::Constant[value="cuda"]()
        %3 : int = prim::Constant[value=2]() # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:518:54
        %self.temp1.downc0.convblock.0.bias : Float(128, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.downc0.convblock.0.weight : Float(128, 64, 3, 3, strides=[576, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.inc.convblock.3.bias : Float(64, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.inc.convblock.3.weight : Float(64, 64, 3, 3, strides=[576, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.inc.convblock.0.bias : Float(64, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.inc.convblock.0.weight : Float(64, 4, 3, 3, strides=[36, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.downc0.memconv.c1.op.conv.bias : Float(128, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.downc0.memconv.c1.op.conv.weight : Float(128, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.downc0.memconv.c2.op.conv.bias : Float(128, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.downc0.memconv.c2.op.conv.weight : Float(128, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.downc1.convblock.0.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.downc1.convblock.0.weight : Float(256, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.downc1.memconv.c1.op.conv.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.downc1.memconv.c1.op.conv.weight : Float(256, 256, 3, 3, strides=[2304, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.downc1.memconv.c2.op.conv.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.downc1.memconv.c2.op.conv.weight : Float(256, 256, 3, 3, strides=[2304, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc2.memconv.c1.op.conv.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc2.memconv.c1.op.conv.weight : Float(256, 256, 3, 3, strides=[2304, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc2.memconv.c2.op.conv.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc2.memconv.c2.op.conv.weight : Float(256, 256, 3, 3, strides=[2304, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc2.convblock.0.bias : Float(512, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc2.convblock.0.weight : Float(512, 256, 3, 3, strides=[2304, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc1.memconv.c1.op.conv.bias : Float(128, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc1.memconv.c1.op.conv.weight : Float(128, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc1.memconv.c2.op.conv.bias : Float(128, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc1.memconv.c2.op.conv.weight : Float(128, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc1.convblock.0.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.upc1.convblock.0.weight : Float(256, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.outc.convblock.3.bias : Float(64, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.outc.convblock.3.weight : Float(64, 64, 3, 3, strides=[576, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.outc.convblock.0.bias : Float(64, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp1.outc.convblock.0.weight : Float(64, 64, 3, 3, strides=[576, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.inc.convblock.3.bias : Float(64, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.inc.convblock.3.weight : Float(64, 64, 3, 3, strides=[576, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.inc.convblock.0.bias : Float(64, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.inc.convblock.0.weight : Float(64, 64, 3, 3, strides=[576, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc0.convblock.0.bias : Float(128, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc0.convblock.0.weight : Float(128, 64, 3, 3, strides=[576, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc0.memconv.c1.op.conv.bias : Float(128, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc0.memconv.c1.op.conv.weight : Float(128, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc0.memconv.c2.op.conv.bias : Float(128, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc0.memconv.c2.op.conv.weight : Float(128, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc1.convblock.0.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc1.convblock.0.weight : Float(256, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc1.memconv.c1.op.conv.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc1.memconv.c1.op.conv.weight : Float(256, 256, 3, 3, strides=[2304, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc1.memconv.c2.op.conv.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.downc1.memconv.c2.op.conv.weight : Float(256, 256, 3, 3, strides=[2304, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc2.memconv.c1.op.conv.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc2.memconv.c1.op.conv.weight : Float(256, 256, 3, 3, strides=[2304, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc2.memconv.c2.op.conv.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc2.memconv.c2.op.conv.weight : Float(256, 256, 3, 3, strides=[2304, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc2.convblock.0.bias : Float(512, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc2.convblock.0.weight : Float(512, 256, 3, 3, strides=[2304, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc1.memconv.c1.op.conv.bias : Float(128, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc1.memconv.c1.op.conv.weight : Float(128, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc1.memconv.c2.op.conv.bias : Float(128, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc1.memconv.c2.op.conv.weight : Float(128, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc1.convblock.0.bias : Float(256, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.upc1.convblock.0.weight : Float(256, 128, 3, 3, strides=[1152, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.outc.convblock.3.bias : Float(3, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=0.01 * -6.7021 -3.2535 -4.3223 [ CUDAFloatType{3} ]]()
        %self.temp2.outc.convblock.3.weight : Float(3, 64, 3, 3, strides=[576, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.outc.convblock.0.bias : Float(64, strides=[1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.temp2.outc.convblock.0.weight : Float(64, 64, 3, 3, strides=[576, 9, 3, 1], requires_grad=0, device=cuda:0) = prim::Constant[value=<Tensor>]()
        %self.shift_num : int = prim::Constant[value=16]()
        %4 : Tensor[] = prim::ListConstruct(%input.1, %noise_map.1)
        %input.6 : Tensor = aten::cat(%4, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:518:20
        %6 : int[] = aten::size(%input.6) # <string>:13:9
        %N.1 : int, %F.1 : int, %C.1 : int, %H.1 : int, %W.1 : int = prim::ListUnpack(%6)
        %12 : int = aten::mul(%N.1, %F.1) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:520:30
        %13 : int[] = prim::ListConstruct(%12, %C.1, %H.1, %W.1)
        %input.11 : Tensor = aten::reshape(%input.6, %13) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:520:16
        %37 : Tensor = prim::Uninitialized()
        %out_seq.1 : Tensor?[] = prim::ListConstruct()
        %39 : int[] = aten::size(%input.11) # <string>:13:9
        %n.54 : int, %c.40 : int, %h.54 : int, %w.54 : int = prim::ListUnpack(%39)
        %input_seq.13 : Tensor[] = prim::ListConstruct()
        %45 : Tensor = aten::arange(%n.54, %34, %34, %34, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:539:56
        %46 : int = aten::len(%45) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:539:24
         = prim::Loop(%46, %35) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:539:24
          block0(%47 : int):
            %i.1 : Tensor = aten::select(%45, %32, %47) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:539:24
            %49 : Tensor = aten::add(%i.1, %33, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:539:37
            %50 : int = aten::IntImplicit(%i.1) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:539:25
            %51 : int = aten::IntImplicit(%49) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:539:25
            %52 : Tensor = aten::slice(%input.11, %32, %50, %51, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:539:25
            %53 : Tensor[] = aten::append(%input_seq.13, %52) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:539:24
            -> (%35)
        %54 : __torch__.torch.autograd.grad_mode.no_grad = prim::CreateObject() # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:542:13
         = prim::SetAttr[name="prev"](%54, %30)
        %55 : NoneType = prim::Enter(%54)
        %56 : int = aten::len(%input_seq.13) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:543:12
        %57 : int[] = prim::ListConstruct(%31, %56)
        %58 : int = prim::min(%57) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:543:12
         = prim::Loop(%58, %35) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:543:12
          block0(%i : int):
            %x.2 : Tensor = aten::__getitem__(%input_seq.13, %i) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:543:12
            %x_cuda.1 : Tensor = aten::cuda(%x.2) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:545:25
            %temp1.1 : __torch__.upscale.model.bsvd.model.___torch_mangle_24.DenBlock = prim::GetAttr[name="temp1"](%self)
            %skip1.3 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip1"](%temp1.1)
            %64 : Tensor = aten::slice(%x_cuda.1, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
            %65 : Tensor = aten::slice(%64, %33, %32, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
            %66 : Tensor = aten::slice(%65, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
            %67 : Tensor = aten::slice(%66, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
            %mem_list.11 : Tensor[] = prim::GetAttr[name="mem_list"](%skip1.3)
             = aten::insert(%mem_list.11, %32, %67) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
            %input.15 : Tensor = aten::conv2d(%x_cuda.1, %self.temp1.inc.convblock.0.weight, %self.temp1.inc.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %input.20 : Tensor = aten::hardtanh_(%input.15, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            %input.23 : Tensor = aten::conv2d(%input.20, %self.temp1.inc.convblock.3.weight, %self.temp1.inc.convblock.3.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %input.27 : Tensor = aten::hardtanh_(%input.23, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            %skip2.3 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip2"](%temp1.1)
            %mem_list.13 : Tensor[] = prim::GetAttr[name="mem_list"](%skip2.3)
             = aten::insert(%mem_list.13, %32, %input.27) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
            %downc0.2 : __torch__.upscale.model.bsvd.model.___torch_mangle_31.DownBlock = prim::GetAttr[name="downc0"](%temp1.1)
            %input.29 : Tensor = aten::conv2d(%input.27, %self.temp1.downc0.convblock.0.weight, %self.temp1.downc0.convblock.0.bias, %7565, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %x.52 : Tensor = aten::hardtanh_(%input.29, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            %memconv.7 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%downc0.2)
            %c1.7 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.7)
            %111 : int[] = aten::size(%x.52) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %112 : int, %113 : int, %114 : int, %115 : int = prim::ListUnpack(%111)
             = prim::SetAttr[name="n"](%c1.7, %112)
             = prim::SetAttr[name="c"](%c1.7, %113)
             = prim::SetAttr[name="h"](%c1.7, %114)
             = prim::SetAttr[name="w"](%c1.7, %115)
            %c.42 : int = prim::GetAttr[name="c"](%c1.7)
            %117 : int = aten::floordiv(%c.42, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c1.7, %117)
            %center.122 : Tensor? = prim::GetAttr[name="center"](%c1.7)
            %119 : bool = aten::__is__(%center.122, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.54 : Tensor? = prim::If(%119) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %left_fold_2fold.11 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.7)
                %124 : int[] = aten::size(%left_fold_2fold.11) # <string>:13:9
                %125 : int = aten::__getitem__(%124, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %126 : bool = aten::eq(%125, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%126) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.56 : int = prim::GetAttr[name="n"](%c1.7)
                    %fold.67 : int = prim::GetAttr[name="fold"](%c1.7)
                    %h.56 : int = prim::GetAttr[name="h"](%c1.7)
                    %w.56 : int = prim::GetAttr[name="w"](%c1.7)
                    %131 : int[] = prim::ListConstruct(%n.56, %fold.67, %h.56, %w.56)
                    %132 : Tensor = aten::zeros(%131, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c1.7, %132)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c1.7, %x.52)
                -> (%34)
              block1():
                %left_fold_2fold.92 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.7)
                %center.132 : Tensor? = prim::GetAttr[name="center"](%c1.7)
                %185 : bool = aten::__is__(%center.132, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %186 : bool = aten::__not__(%185) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.134 : Tensor, %left_fold_2fold.94 : Tensor = prim::If(%186) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.136 : Tensor = prim::unchecked_cast(%center.132)
                    -> (%center.136, %left_fold_2fold.92)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %190 : int[] = aten::size(%center.134) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.62 : int, %c.46 : int, %h.62 : int, %w.62 : int = prim::ListUnpack(%190)
                %fold.73 : int = aten::floordiv(%c.46, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %196 : int[] = aten::size(%left_fold_2fold.94) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %197 : int = aten::__getitem__(%196, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %198 : bool = aten::eq(%197, %fold.73) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%198) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %200 : Tensor = aten::slice(%x.52, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %201 : Tensor = aten::slice(%200, %33, %34, %fold.73, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %202 : Tensor = aten::slice(%201, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %203 : Tensor = aten::slice(%202, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %204 : Tensor = aten::slice(%center.134, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %205 : int = aten::mul(%fold.73, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %206 : Tensor = aten::slice(%204, %33, %205, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %207 : Tensor = aten::slice(%206, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %208 : Tensor = aten::slice(%207, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %209 : Tensor[] = prim::ListConstruct(%203, %left_fold_2fold.94, %208)
                %210 : Tensor = aten::cat(%209, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.59 : Tensor = aten::conv2d(%210, %self.temp1.downc0.memconv.c1.op.conv.weight, %self.temp1.downc0.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %center.138 : Tensor? = prim::GetAttr[name="center"](%c1.7)
                %fold.75 : int = prim::GetAttr[name="fold"](%c1.7)
                %220 : bool = aten::__isnot__(%center.138, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.56 : Tensor = prim::If(%220) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.58 : Tensor = prim::unchecked_cast(%center.138)
                    -> (%x.58)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %223 : Tensor = aten::slice(%x.56, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %224 : int = aten::mul(%fold.75, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %225 : Tensor = aten::slice(%223, %33, %fold.75, %224, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %226 : Tensor = aten::slice(%225, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %227 : Tensor = aten::slice(%226, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.7, %227)
                 = prim::SetAttr[name="center"](%c1.7, %x.52)
                -> (%output.59)
            %230 : bool = aten::__isnot__(%x.54, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.91 : Tensor? = prim::If(%230) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.93 : Tensor = prim::unchecked_cast(%x.54)
                %x.95 : Tensor = aten::hardtanh_(%x.93, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.95)
              block1():
                -> (%x.54)
            %c2.7 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.7)
            %235 : bool = aten::__isnot__(%x.91, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.173 : Tensor? = prim::If(%235) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.175 : Tensor = prim::unchecked_cast(%x.91)
                %238 : int[] = aten::size(%input_right.175) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %239 : int, %240 : int, %241 : int, %242 : int = prim::ListUnpack(%238)
                 = prim::SetAttr[name="n"](%c2.7, %239)
                 = prim::SetAttr[name="c"](%c2.7, %240)
                 = prim::SetAttr[name="h"](%c2.7, %241)
                 = prim::SetAttr[name="w"](%c2.7, %242)
                %c.48 : int = prim::GetAttr[name="c"](%c2.7)
                %244 : int = aten::floordiv(%c.48, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.7, %244)
                -> (%input_right.175)
              block1():
                -> (%x.91)
            %center.140 : Tensor? = prim::GetAttr[name="center"](%c2.7)
            %246 : bool = aten::__is__(%center.140, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.97 : Tensor? = prim::If(%246) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %248 : bool = aten::__isnot__(%input_right.173, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%248) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.177 : Tensor = prim::unchecked_cast(%input_right.173)
                    %left_fold_2fold.96 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.7)
                    %251 : int[] = aten::size(%left_fold_2fold.96) # <string>:13:9
                    %252 : int = aten::__getitem__(%251, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %253 : bool = aten::eq(%252, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%253) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.64 : int = prim::GetAttr[name="n"](%c2.7)
                        %fold.77 : int = prim::GetAttr[name="fold"](%c2.7)
                        %h.64 : int = prim::GetAttr[name="h"](%c2.7)
                        %w.64 : int = prim::GetAttr[name="w"](%c2.7)
                        %258 : int[] = prim::ListConstruct(%n.64, %fold.77, %h.64, %w.64)
                        %259 : Tensor = aten::zeros(%258, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.7, %259)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.7, %input_right.177)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.7, %34)
                    -> ()
                -> (%34)
              block1():
                %260 : bool = aten::__is__(%input_right.173, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.179 : Tensor?, %output.61 : Tensor = prim::If(%260) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.142 : Tensor? = prim::GetAttr[name="center"](%c2.7)
                    %264 : bool = aten::__isnot__(%center.142, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%264) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.98 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.7)
                    %center.144 : Tensor? = prim::GetAttr[name="center"](%c2.7)
                    %n.66 : int = prim::GetAttr[name="n"](%c2.7)
                    %fold.79 : int = prim::GetAttr[name="fold"](%c2.7)
                    %h.66 : int = prim::GetAttr[name="h"](%c2.7)
                    %w.66 : int = prim::GetAttr[name="w"](%c2.7)
                    %272 : int[] = prim::ListConstruct(%n.66, %fold.79, %h.66, %w.66)
                    %273 : Tensor = aten::zeros(%272, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %275 : bool = aten::__is__(%center.144, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %276 : bool = aten::__not__(%275) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.146 : Tensor, %left_fold_2fold.100 : Tensor = prim::If(%276) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.148 : Tensor = prim::unchecked_cast(%center.144)
                        -> (%center.148, %left_fold_2fold.98)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %280 : int[] = aten::size(%center.146) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.68 : int, %c.50 : int, %h.68 : int, %w.68 : int = prim::ListUnpack(%280)
                    %fold.81 : int = aten::floordiv(%c.50, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %286 : int[] = aten::size(%left_fold_2fold.100) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %287 : int = aten::__getitem__(%286, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %288 : bool = aten::eq(%287, %fold.81) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%288) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %290 : Tensor = aten::slice(%273, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %291 : Tensor = aten::slice(%290, %33, %34, %fold.81, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %292 : Tensor = aten::slice(%291, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %293 : Tensor = aten::slice(%292, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %294 : Tensor = aten::slice(%center.146, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %295 : int = aten::mul(%fold.81, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %296 : Tensor = aten::slice(%294, %33, %295, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %297 : Tensor = aten::slice(%296, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %298 : Tensor = aten::slice(%297, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %299 : Tensor[] = prim::ListConstruct(%293, %left_fold_2fold.100, %298)
                    %300 : Tensor = aten::cat(%299, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.63 : Tensor = aten::conv2d(%300, %self.temp1.downc0.memconv.c2.op.conv.weight, %self.temp1.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.173, %output.63)
                  block1():
                    %input_right.181 : Tensor = prim::unchecked_cast(%input_right.173)
                    %left_fold_2fold.102 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.7)
                    %center.150 : Tensor? = prim::GetAttr[name="center"](%c2.7)
                    %312 : bool = aten::__is__(%center.150, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %313 : bool = aten::__not__(%312) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.152 : Tensor, %left_fold_2fold.104 : Tensor = prim::If(%313) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.154 : Tensor = prim::unchecked_cast(%center.150)
                        -> (%center.154, %left_fold_2fold.102)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %317 : int[] = aten::size(%center.152) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.70 : int, %c.52 : int, %h.70 : int, %w.70 : int = prim::ListUnpack(%317)
                    %fold.83 : int = aten::floordiv(%c.52, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %323 : int[] = aten::size(%left_fold_2fold.104) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %324 : int = aten::__getitem__(%323, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %325 : bool = aten::eq(%324, %fold.83) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%325) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %327 : Tensor = aten::slice(%input_right.181, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %328 : Tensor = aten::slice(%327, %33, %34, %fold.83, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %329 : Tensor = aten::slice(%328, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %330 : Tensor = aten::slice(%329, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %331 : Tensor = aten::slice(%center.152, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %332 : int = aten::mul(%fold.83, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %333 : Tensor = aten::slice(%331, %33, %332, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %334 : Tensor = aten::slice(%333, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %335 : Tensor = aten::slice(%334, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %336 : Tensor[] = prim::ListConstruct(%330, %left_fold_2fold.104, %335)
                    %337 : Tensor = aten::cat(%336, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.65 : Tensor = aten::conv2d(%337, %self.temp1.downc0.memconv.c2.op.conv.weight, %self.temp1.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.181, %output.65)
                %center.156 : Tensor? = prim::GetAttr[name="center"](%c2.7)
                %fold.85 : int = prim::GetAttr[name="fold"](%c2.7)
                %347 : bool = aten::__isnot__(%center.156, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.99 : Tensor = prim::If(%347) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.101 : Tensor = prim::unchecked_cast(%center.156)
                    -> (%x.101)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %350 : Tensor = aten::slice(%x.99, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %351 : int = aten::mul(%fold.85, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %352 : Tensor = aten::slice(%350, %33, %fold.85, %351, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %353 : Tensor = aten::slice(%352, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %354 : Tensor = aten::slice(%353, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.7, %354)
                %355 : bool = aten::__isnot__(%input_right.179, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%355) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.183 : Tensor = prim::unchecked_cast(%input_right.179)
                     = prim::SetAttr[name="center"](%c2.7, %input_right.183)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.7, %34)
                    -> ()
                -> (%output.61)
            %357 : bool = aten::__isnot__(%x.97, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x1.3 : Tensor? = prim::If(%357) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.103 : Tensor = prim::unchecked_cast(%x.97)
                %x.105 : Tensor = aten::hardtanh_(%x.103, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.105)
              block1():
                -> (%x.97)
            %skip3.3 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip3"](%temp1.1)
            %362 : bool = aten::__isnot__(%x1.3, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
             = prim::If(%362) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
              block0():
                %x.107 : Tensor = prim::unchecked_cast(%x1.3)
                %mem_list.15 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.3)
                 = aten::insert(%mem_list.15, %32, %x.107) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
                -> ()
              block1():
                -> ()
            %downc1.2 : __torch__.upscale.model.bsvd.model.___torch_mangle_38.DownBlock = prim::GetAttr[name="downc1"](%temp1.1)
            %366 : bool = aten::__isnot__(%x1.3, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:11
            %x.140 : Tensor? = prim::If(%366) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:8
              block0():
                %x.142 : Tensor = prim::unchecked_cast(%x1.3)
                %input.31 : Tensor = aten::conv2d(%x.142, %self.temp1.downc1.convblock.0.weight, %self.temp1.downc1.convblock.0.bias, %7565, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.144 : Tensor = aten::hardtanh_(%input.31, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.144)
              block1():
                -> (%x1.3)
            %memconv.9 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%downc1.2)
            %c1.9 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.9)
            %380 : bool = aten::__isnot__(%x.140, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.185 : Tensor? = prim::If(%380) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.187 : Tensor = prim::unchecked_cast(%x.140)
                %383 : int[] = aten::size(%input_right.187) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %384 : int, %385 : int, %386 : int, %387 : int = prim::ListUnpack(%383)
                 = prim::SetAttr[name="n"](%c1.9, %384)
                 = prim::SetAttr[name="c"](%c1.9, %385)
                 = prim::SetAttr[name="h"](%c1.9, %386)
                 = prim::SetAttr[name="w"](%c1.9, %387)
                %c.54 : int = prim::GetAttr[name="c"](%c1.9)
                %389 : int = aten::floordiv(%c.54, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.9, %389)
                -> (%input_right.187)
              block1():
                -> (%x.140)
            %center.158 : Tensor? = prim::GetAttr[name="center"](%c1.9)
            %391 : bool = aten::__is__(%center.158, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.146 : Tensor? = prim::If(%391) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %393 : bool = aten::__isnot__(%input_right.185, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%393) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.189 : Tensor = prim::unchecked_cast(%input_right.185)
                    %left_fold_2fold.106 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.9)
                    %396 : int[] = aten::size(%left_fold_2fold.106) # <string>:13:9
                    %397 : int = aten::__getitem__(%396, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %398 : bool = aten::eq(%397, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%398) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.72 : int = prim::GetAttr[name="n"](%c1.9)
                        %fold.87 : int = prim::GetAttr[name="fold"](%c1.9)
                        %h.72 : int = prim::GetAttr[name="h"](%c1.9)
                        %w.72 : int = prim::GetAttr[name="w"](%c1.9)
                        %403 : int[] = prim::ListConstruct(%n.72, %fold.87, %h.72, %w.72)
                        %404 : Tensor = aten::zeros(%403, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.9, %404)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.9, %input_right.189)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.9, %34)
                    -> ()
                -> (%34)
              block1():
                %405 : bool = aten::__is__(%input_right.185, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.191 : Tensor?, %output.67 : Tensor = prim::If(%405) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.160 : Tensor? = prim::GetAttr[name="center"](%c1.9)
                    %409 : bool = aten::__isnot__(%center.160, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%409) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.108 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.9)
                    %center.162 : Tensor? = prim::GetAttr[name="center"](%c1.9)
                    %n.74 : int = prim::GetAttr[name="n"](%c1.9)
                    %fold.89 : int = prim::GetAttr[name="fold"](%c1.9)
                    %h.74 : int = prim::GetAttr[name="h"](%c1.9)
                    %w.74 : int = prim::GetAttr[name="w"](%c1.9)
                    %417 : int[] = prim::ListConstruct(%n.74, %fold.89, %h.74, %w.74)
                    %418 : Tensor = aten::zeros(%417, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %420 : bool = aten::__is__(%center.162, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %421 : bool = aten::__not__(%420) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.164 : Tensor, %left_fold_2fold.110 : Tensor = prim::If(%421) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.166 : Tensor = prim::unchecked_cast(%center.162)
                        -> (%center.166, %left_fold_2fold.108)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %425 : int[] = aten::size(%center.164) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.76 : int, %c.56 : int, %h.76 : int, %w.76 : int = prim::ListUnpack(%425)
                    %fold.91 : int = aten::floordiv(%c.56, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %431 : int[] = aten::size(%left_fold_2fold.110) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %432 : int = aten::__getitem__(%431, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %433 : bool = aten::eq(%432, %fold.91) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%433) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %435 : Tensor = aten::slice(%418, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %436 : Tensor = aten::slice(%435, %33, %34, %fold.91, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %437 : Tensor = aten::slice(%436, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %438 : Tensor = aten::slice(%437, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %439 : Tensor = aten::slice(%center.164, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %440 : int = aten::mul(%fold.91, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %441 : Tensor = aten::slice(%439, %33, %440, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %442 : Tensor = aten::slice(%441, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %443 : Tensor = aten::slice(%442, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %444 : Tensor[] = prim::ListConstruct(%438, %left_fold_2fold.110, %443)
                    %445 : Tensor = aten::cat(%444, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.69 : Tensor = aten::conv2d(%445, %self.temp1.downc1.memconv.c1.op.conv.weight, %self.temp1.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.185, %output.69)
                  block1():
                    %input_right.193 : Tensor = prim::unchecked_cast(%input_right.185)
                    %left_fold_2fold.112 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.9)
                    %center.168 : Tensor? = prim::GetAttr[name="center"](%c1.9)
                    %457 : bool = aten::__is__(%center.168, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %458 : bool = aten::__not__(%457) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.170 : Tensor, %left_fold_2fold.114 : Tensor = prim::If(%458) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.172 : Tensor = prim::unchecked_cast(%center.168)
                        -> (%center.172, %left_fold_2fold.112)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %462 : int[] = aten::size(%center.170) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.78 : int, %c.58 : int, %h.78 : int, %w.78 : int = prim::ListUnpack(%462)
                    %fold.93 : int = aten::floordiv(%c.58, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %468 : int[] = aten::size(%left_fold_2fold.114) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %469 : int = aten::__getitem__(%468, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %470 : bool = aten::eq(%469, %fold.93) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%470) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %472 : Tensor = aten::slice(%input_right.193, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %473 : Tensor = aten::slice(%472, %33, %34, %fold.93, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %474 : Tensor = aten::slice(%473, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %475 : Tensor = aten::slice(%474, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %476 : Tensor = aten::slice(%center.170, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %477 : int = aten::mul(%fold.93, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %478 : Tensor = aten::slice(%476, %33, %477, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %479 : Tensor = aten::slice(%478, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %480 : Tensor = aten::slice(%479, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %481 : Tensor[] = prim::ListConstruct(%475, %left_fold_2fold.114, %480)
                    %482 : Tensor = aten::cat(%481, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.71 : Tensor = aten::conv2d(%482, %self.temp1.downc1.memconv.c1.op.conv.weight, %self.temp1.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.193, %output.71)
                %center.174 : Tensor? = prim::GetAttr[name="center"](%c1.9)
                %fold.95 : int = prim::GetAttr[name="fold"](%c1.9)
                %492 : bool = aten::__isnot__(%center.174, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.148 : Tensor = prim::If(%492) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.150 : Tensor = prim::unchecked_cast(%center.174)
                    -> (%x.150)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %495 : Tensor = aten::slice(%x.148, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %496 : int = aten::mul(%fold.95, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %497 : Tensor = aten::slice(%495, %33, %fold.95, %496, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %498 : Tensor = aten::slice(%497, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %499 : Tensor = aten::slice(%498, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.9, %499)
                %500 : bool = aten::__isnot__(%input_right.191, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%500) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.195 : Tensor = prim::unchecked_cast(%input_right.191)
                     = prim::SetAttr[name="center"](%c1.9, %input_right.195)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.9, %34)
                    -> ()
                -> (%output.67)
            %502 : bool = aten::__isnot__(%x.146, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.152 : Tensor? = prim::If(%502) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.154 : Tensor = prim::unchecked_cast(%x.146)
                %x.156 : Tensor = aten::hardtanh_(%x.154, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.156)
              block1():
                -> (%x.146)
            %c2.9 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.9)
            %507 : bool = aten::__isnot__(%x.152, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.197 : Tensor? = prim::If(%507) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.199 : Tensor = prim::unchecked_cast(%x.152)
                %510 : int[] = aten::size(%input_right.199) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %511 : int, %512 : int, %513 : int, %514 : int = prim::ListUnpack(%510)
                 = prim::SetAttr[name="n"](%c2.9, %511)
                 = prim::SetAttr[name="c"](%c2.9, %512)
                 = prim::SetAttr[name="h"](%c2.9, %513)
                 = prim::SetAttr[name="w"](%c2.9, %514)
                %c.60 : int = prim::GetAttr[name="c"](%c2.9)
                %516 : int = aten::floordiv(%c.60, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.9, %516)
                -> (%input_right.199)
              block1():
                -> (%x.152)
            %center.176 : Tensor? = prim::GetAttr[name="center"](%c2.9)
            %518 : bool = aten::__is__(%center.176, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.158 : Tensor? = prim::If(%518) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %520 : bool = aten::__isnot__(%input_right.197, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%520) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.201 : Tensor = prim::unchecked_cast(%input_right.197)
                    %left_fold_2fold.116 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.9)
                    %523 : int[] = aten::size(%left_fold_2fold.116) # <string>:13:9
                    %524 : int = aten::__getitem__(%523, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %525 : bool = aten::eq(%524, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%525) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.80 : int = prim::GetAttr[name="n"](%c2.9)
                        %fold.97 : int = prim::GetAttr[name="fold"](%c2.9)
                        %h.80 : int = prim::GetAttr[name="h"](%c2.9)
                        %w.80 : int = prim::GetAttr[name="w"](%c2.9)
                        %530 : int[] = prim::ListConstruct(%n.80, %fold.97, %h.80, %w.80)
                        %531 : Tensor = aten::zeros(%530, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.9, %531)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.9, %input_right.201)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.9, %34)
                    -> ()
                -> (%34)
              block1():
                %532 : bool = aten::__is__(%input_right.197, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.203 : Tensor?, %output.73 : Tensor = prim::If(%532) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.178 : Tensor? = prim::GetAttr[name="center"](%c2.9)
                    %536 : bool = aten::__isnot__(%center.178, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%536) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.118 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.9)
                    %center.180 : Tensor? = prim::GetAttr[name="center"](%c2.9)
                    %n.82 : int = prim::GetAttr[name="n"](%c2.9)
                    %fold.99 : int = prim::GetAttr[name="fold"](%c2.9)
                    %h.82 : int = prim::GetAttr[name="h"](%c2.9)
                    %w.82 : int = prim::GetAttr[name="w"](%c2.9)
                    %544 : int[] = prim::ListConstruct(%n.82, %fold.99, %h.82, %w.82)
                    %545 : Tensor = aten::zeros(%544, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %547 : bool = aten::__is__(%center.180, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %548 : bool = aten::__not__(%547) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.182 : Tensor, %left_fold_2fold.120 : Tensor = prim::If(%548) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.184 : Tensor = prim::unchecked_cast(%center.180)
                        -> (%center.184, %left_fold_2fold.118)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %552 : int[] = aten::size(%center.182) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.84 : int, %c.62 : int, %h.84 : int, %w.84 : int = prim::ListUnpack(%552)
                    %fold.101 : int = aten::floordiv(%c.62, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %558 : int[] = aten::size(%left_fold_2fold.120) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %559 : int = aten::__getitem__(%558, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %560 : bool = aten::eq(%559, %fold.101) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%560) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %562 : Tensor = aten::slice(%545, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %563 : Tensor = aten::slice(%562, %33, %34, %fold.101, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %564 : Tensor = aten::slice(%563, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %565 : Tensor = aten::slice(%564, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %566 : Tensor = aten::slice(%center.182, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %567 : int = aten::mul(%fold.101, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %568 : Tensor = aten::slice(%566, %33, %567, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %569 : Tensor = aten::slice(%568, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %570 : Tensor = aten::slice(%569, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %571 : Tensor[] = prim::ListConstruct(%565, %left_fold_2fold.120, %570)
                    %572 : Tensor = aten::cat(%571, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.75 : Tensor = aten::conv2d(%572, %self.temp1.downc1.memconv.c2.op.conv.weight, %self.temp1.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.197, %output.75)
                  block1():
                    %input_right.205 : Tensor = prim::unchecked_cast(%input_right.197)
                    %left_fold_2fold.122 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.9)
                    %center.186 : Tensor? = prim::GetAttr[name="center"](%c2.9)
                    %584 : bool = aten::__is__(%center.186, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %585 : bool = aten::__not__(%584) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.188 : Tensor, %left_fold_2fold.124 : Tensor = prim::If(%585) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.190 : Tensor = prim::unchecked_cast(%center.186)
                        -> (%center.190, %left_fold_2fold.122)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %589 : int[] = aten::size(%center.188) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.86 : int, %c.64 : int, %h.86 : int, %w.86 : int = prim::ListUnpack(%589)
                    %fold.103 : int = aten::floordiv(%c.64, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %595 : int[] = aten::size(%left_fold_2fold.124) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %596 : int = aten::__getitem__(%595, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %597 : bool = aten::eq(%596, %fold.103) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%597) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %599 : Tensor = aten::slice(%input_right.205, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %600 : Tensor = aten::slice(%599, %33, %34, %fold.103, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %601 : Tensor = aten::slice(%600, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %602 : Tensor = aten::slice(%601, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %603 : Tensor = aten::slice(%center.188, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %604 : int = aten::mul(%fold.103, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %605 : Tensor = aten::slice(%603, %33, %604, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %606 : Tensor = aten::slice(%605, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %607 : Tensor = aten::slice(%606, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %608 : Tensor[] = prim::ListConstruct(%602, %left_fold_2fold.124, %607)
                    %609 : Tensor = aten::cat(%608, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.77 : Tensor = aten::conv2d(%609, %self.temp1.downc1.memconv.c2.op.conv.weight, %self.temp1.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.205, %output.77)
                %center.192 : Tensor? = prim::GetAttr[name="center"](%c2.9)
                %fold.105 : int = prim::GetAttr[name="fold"](%c2.9)
                %619 : bool = aten::__isnot__(%center.192, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.160 : Tensor = prim::If(%619) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.162 : Tensor = prim::unchecked_cast(%center.192)
                    -> (%x.162)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %622 : Tensor = aten::slice(%x.160, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %623 : int = aten::mul(%fold.105, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %624 : Tensor = aten::slice(%622, %33, %fold.105, %623, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %625 : Tensor = aten::slice(%624, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %626 : Tensor = aten::slice(%625, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.9, %626)
                %627 : bool = aten::__isnot__(%input_right.203, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%627) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.207 : Tensor = prim::unchecked_cast(%input_right.203)
                     = prim::SetAttr[name="center"](%c2.9, %input_right.207)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.9, %34)
                    -> ()
                -> (%output.73)
            %629 : bool = aten::__isnot__(%x.158, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x2.3 : Tensor? = prim::If(%629) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.164 : Tensor = prim::unchecked_cast(%x.158)
                %x.166 : Tensor = aten::hardtanh_(%x.164, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.166)
              block1():
                -> (%x.158)
            %upc2.2 : __torch__.upscale.model.bsvd.model.___torch_mangle_45.UpBlock = prim::GetAttr[name="upc2"](%temp1.1)
            %memconv.11 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%upc2.2)
            %c1.11 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.11)
            %636 : bool = aten::__isnot__(%x2.3, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.209 : Tensor? = prim::If(%636) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.211 : Tensor = prim::unchecked_cast(%x2.3)
                %639 : int[] = aten::size(%input_right.211) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %640 : int, %641 : int, %642 : int, %643 : int = prim::ListUnpack(%639)
                 = prim::SetAttr[name="n"](%c1.11, %640)
                 = prim::SetAttr[name="c"](%c1.11, %641)
                 = prim::SetAttr[name="h"](%c1.11, %642)
                 = prim::SetAttr[name="w"](%c1.11, %643)
                %c.66 : int = prim::GetAttr[name="c"](%c1.11)
                %645 : int = aten::floordiv(%c.66, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.11, %645)
                -> (%input_right.211)
              block1():
                -> (%x2.3)
            %center.194 : Tensor? = prim::GetAttr[name="center"](%c1.11)
            %647 : bool = aten::__is__(%center.194, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.168 : Tensor? = prim::If(%647) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %649 : bool = aten::__isnot__(%input_right.209, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%649) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.213 : Tensor = prim::unchecked_cast(%input_right.209)
                    %left_fold_2fold.126 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.11)
                    %652 : int[] = aten::size(%left_fold_2fold.126) # <string>:13:9
                    %653 : int = aten::__getitem__(%652, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %654 : bool = aten::eq(%653, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%654) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.88 : int = prim::GetAttr[name="n"](%c1.11)
                        %fold.107 : int = prim::GetAttr[name="fold"](%c1.11)
                        %h.88 : int = prim::GetAttr[name="h"](%c1.11)
                        %w.88 : int = prim::GetAttr[name="w"](%c1.11)
                        %659 : int[] = prim::ListConstruct(%n.88, %fold.107, %h.88, %w.88)
                        %660 : Tensor = aten::zeros(%659, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.11, %660)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.11, %input_right.213)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.11, %34)
                    -> ()
                -> (%34)
              block1():
                %661 : bool = aten::__is__(%input_right.209, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.215 : Tensor?, %output.79 : Tensor = prim::If(%661) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.196 : Tensor? = prim::GetAttr[name="center"](%c1.11)
                    %665 : bool = aten::__isnot__(%center.196, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%665) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.128 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.11)
                    %center.198 : Tensor? = prim::GetAttr[name="center"](%c1.11)
                    %n.90 : int = prim::GetAttr[name="n"](%c1.11)
                    %fold.109 : int = prim::GetAttr[name="fold"](%c1.11)
                    %h.90 : int = prim::GetAttr[name="h"](%c1.11)
                    %w.90 : int = prim::GetAttr[name="w"](%c1.11)
                    %673 : int[] = prim::ListConstruct(%n.90, %fold.109, %h.90, %w.90)
                    %674 : Tensor = aten::zeros(%673, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %676 : bool = aten::__is__(%center.198, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %677 : bool = aten::__not__(%676) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.200 : Tensor, %left_fold_2fold.130 : Tensor = prim::If(%677) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.202 : Tensor = prim::unchecked_cast(%center.198)
                        -> (%center.202, %left_fold_2fold.128)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %681 : int[] = aten::size(%center.200) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.92 : int, %c.68 : int, %h.92 : int, %w.92 : int = prim::ListUnpack(%681)
                    %fold.111 : int = aten::floordiv(%c.68, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %687 : int[] = aten::size(%left_fold_2fold.130) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %688 : int = aten::__getitem__(%687, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %689 : bool = aten::eq(%688, %fold.111) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%689) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %691 : Tensor = aten::slice(%674, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %692 : Tensor = aten::slice(%691, %33, %34, %fold.111, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %693 : Tensor = aten::slice(%692, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %694 : Tensor = aten::slice(%693, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %695 : Tensor = aten::slice(%center.200, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %696 : int = aten::mul(%fold.111, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %697 : Tensor = aten::slice(%695, %33, %696, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %698 : Tensor = aten::slice(%697, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %699 : Tensor = aten::slice(%698, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %700 : Tensor[] = prim::ListConstruct(%694, %left_fold_2fold.130, %699)
                    %701 : Tensor = aten::cat(%700, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.81 : Tensor = aten::conv2d(%701, %self.temp1.upc2.memconv.c1.op.conv.weight, %self.temp1.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.209, %output.81)
                  block1():
                    %input_right.217 : Tensor = prim::unchecked_cast(%input_right.209)
                    %left_fold_2fold.132 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.11)
                    %center.204 : Tensor? = prim::GetAttr[name="center"](%c1.11)
                    %713 : bool = aten::__is__(%center.204, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %714 : bool = aten::__not__(%713) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.206 : Tensor, %left_fold_2fold.134 : Tensor = prim::If(%714) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.208 : Tensor = prim::unchecked_cast(%center.204)
                        -> (%center.208, %left_fold_2fold.132)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %718 : int[] = aten::size(%center.206) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.94 : int, %c.70 : int, %h.94 : int, %w.94 : int = prim::ListUnpack(%718)
                    %fold.113 : int = aten::floordiv(%c.70, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %724 : int[] = aten::size(%left_fold_2fold.134) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %725 : int = aten::__getitem__(%724, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %726 : bool = aten::eq(%725, %fold.113) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%726) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %728 : Tensor = aten::slice(%input_right.217, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %729 : Tensor = aten::slice(%728, %33, %34, %fold.113, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %730 : Tensor = aten::slice(%729, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %731 : Tensor = aten::slice(%730, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %732 : Tensor = aten::slice(%center.206, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %733 : int = aten::mul(%fold.113, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %734 : Tensor = aten::slice(%732, %33, %733, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %735 : Tensor = aten::slice(%734, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %736 : Tensor = aten::slice(%735, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %737 : Tensor[] = prim::ListConstruct(%731, %left_fold_2fold.134, %736)
                    %738 : Tensor = aten::cat(%737, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.83 : Tensor = aten::conv2d(%738, %self.temp1.upc2.memconv.c1.op.conv.weight, %self.temp1.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.217, %output.83)
                %center.210 : Tensor? = prim::GetAttr[name="center"](%c1.11)
                %fold.115 : int = prim::GetAttr[name="fold"](%c1.11)
                %748 : bool = aten::__isnot__(%center.210, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.170 : Tensor = prim::If(%748) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.172 : Tensor = prim::unchecked_cast(%center.210)
                    -> (%x.172)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %751 : Tensor = aten::slice(%x.170, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %752 : int = aten::mul(%fold.115, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %753 : Tensor = aten::slice(%751, %33, %fold.115, %752, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %754 : Tensor = aten::slice(%753, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %755 : Tensor = aten::slice(%754, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.11, %755)
                %756 : bool = aten::__isnot__(%input_right.215, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%756) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.219 : Tensor = prim::unchecked_cast(%input_right.215)
                     = prim::SetAttr[name="center"](%c1.11, %input_right.219)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.11, %34)
                    -> ()
                -> (%output.79)
            %758 : bool = aten::__isnot__(%x.168, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.174 : Tensor? = prim::If(%758) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.176 : Tensor = prim::unchecked_cast(%x.168)
                %x.178 : Tensor = aten::hardtanh_(%x.176, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.178)
              block1():
                -> (%x.168)
            %c2.11 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.11)
            %763 : bool = aten::__isnot__(%x.174, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.221 : Tensor? = prim::If(%763) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.223 : Tensor = prim::unchecked_cast(%x.174)
                %766 : int[] = aten::size(%input_right.223) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %767 : int, %768 : int, %769 : int, %770 : int = prim::ListUnpack(%766)
                 = prim::SetAttr[name="n"](%c2.11, %767)
                 = prim::SetAttr[name="c"](%c2.11, %768)
                 = prim::SetAttr[name="h"](%c2.11, %769)
                 = prim::SetAttr[name="w"](%c2.11, %770)
                %c.72 : int = prim::GetAttr[name="c"](%c2.11)
                %772 : int = aten::floordiv(%c.72, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.11, %772)
                -> (%input_right.223)
              block1():
                -> (%x.174)
            %center.212 : Tensor? = prim::GetAttr[name="center"](%c2.11)
            %774 : bool = aten::__is__(%center.212, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.180 : Tensor? = prim::If(%774) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %776 : bool = aten::__isnot__(%input_right.221, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%776) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.225 : Tensor = prim::unchecked_cast(%input_right.221)
                    %left_fold_2fold.136 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.11)
                    %779 : int[] = aten::size(%left_fold_2fold.136) # <string>:13:9
                    %780 : int = aten::__getitem__(%779, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %781 : bool = aten::eq(%780, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%781) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.96 : int = prim::GetAttr[name="n"](%c2.11)
                        %fold.117 : int = prim::GetAttr[name="fold"](%c2.11)
                        %h.96 : int = prim::GetAttr[name="h"](%c2.11)
                        %w.96 : int = prim::GetAttr[name="w"](%c2.11)
                        %786 : int[] = prim::ListConstruct(%n.96, %fold.117, %h.96, %w.96)
                        %787 : Tensor = aten::zeros(%786, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.11, %787)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.11, %input_right.225)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.11, %34)
                    -> ()
                -> (%34)
              block1():
                %788 : bool = aten::__is__(%input_right.221, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.227 : Tensor?, %output.85 : Tensor = prim::If(%788) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.214 : Tensor? = prim::GetAttr[name="center"](%c2.11)
                    %792 : bool = aten::__isnot__(%center.214, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%792) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.138 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.11)
                    %center.216 : Tensor? = prim::GetAttr[name="center"](%c2.11)
                    %n.98 : int = prim::GetAttr[name="n"](%c2.11)
                    %fold.119 : int = prim::GetAttr[name="fold"](%c2.11)
                    %h.98 : int = prim::GetAttr[name="h"](%c2.11)
                    %w.98 : int = prim::GetAttr[name="w"](%c2.11)
                    %800 : int[] = prim::ListConstruct(%n.98, %fold.119, %h.98, %w.98)
                    %801 : Tensor = aten::zeros(%800, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %803 : bool = aten::__is__(%center.216, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %804 : bool = aten::__not__(%803) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.218 : Tensor, %left_fold_2fold.140 : Tensor = prim::If(%804) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.220 : Tensor = prim::unchecked_cast(%center.216)
                        -> (%center.220, %left_fold_2fold.138)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %808 : int[] = aten::size(%center.218) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.100 : int, %c.74 : int, %h.100 : int, %w.100 : int = prim::ListUnpack(%808)
                    %fold.121 : int = aten::floordiv(%c.74, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %814 : int[] = aten::size(%left_fold_2fold.140) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %815 : int = aten::__getitem__(%814, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %816 : bool = aten::eq(%815, %fold.121) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%816) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %818 : Tensor = aten::slice(%801, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %819 : Tensor = aten::slice(%818, %33, %34, %fold.121, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %820 : Tensor = aten::slice(%819, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %821 : Tensor = aten::slice(%820, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %822 : Tensor = aten::slice(%center.218, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %823 : int = aten::mul(%fold.121, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %824 : Tensor = aten::slice(%822, %33, %823, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %825 : Tensor = aten::slice(%824, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %826 : Tensor = aten::slice(%825, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %827 : Tensor[] = prim::ListConstruct(%821, %left_fold_2fold.140, %826)
                    %828 : Tensor = aten::cat(%827, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.87 : Tensor = aten::conv2d(%828, %self.temp1.upc2.memconv.c2.op.conv.weight, %self.temp1.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.221, %output.87)
                  block1():
                    %input_right.229 : Tensor = prim::unchecked_cast(%input_right.221)
                    %left_fold_2fold.142 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.11)
                    %center.222 : Tensor? = prim::GetAttr[name="center"](%c2.11)
                    %840 : bool = aten::__is__(%center.222, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %841 : bool = aten::__not__(%840) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.224 : Tensor, %left_fold_2fold.144 : Tensor = prim::If(%841) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.226 : Tensor = prim::unchecked_cast(%center.222)
                        -> (%center.226, %left_fold_2fold.142)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %845 : int[] = aten::size(%center.224) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.102 : int, %c.76 : int, %h.102 : int, %w.102 : int = prim::ListUnpack(%845)
                    %fold.123 : int = aten::floordiv(%c.76, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %851 : int[] = aten::size(%left_fold_2fold.144) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %852 : int = aten::__getitem__(%851, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %853 : bool = aten::eq(%852, %fold.123) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%853) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %855 : Tensor = aten::slice(%input_right.229, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %856 : Tensor = aten::slice(%855, %33, %34, %fold.123, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %857 : Tensor = aten::slice(%856, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %858 : Tensor = aten::slice(%857, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %859 : Tensor = aten::slice(%center.224, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %860 : int = aten::mul(%fold.123, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %861 : Tensor = aten::slice(%859, %33, %860, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %862 : Tensor = aten::slice(%861, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %863 : Tensor = aten::slice(%862, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %864 : Tensor[] = prim::ListConstruct(%858, %left_fold_2fold.144, %863)
                    %865 : Tensor = aten::cat(%864, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.89 : Tensor = aten::conv2d(%865, %self.temp1.upc2.memconv.c2.op.conv.weight, %self.temp1.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.229, %output.89)
                %center.228 : Tensor? = prim::GetAttr[name="center"](%c2.11)
                %fold.125 : int = prim::GetAttr[name="fold"](%c2.11)
                %875 : bool = aten::__isnot__(%center.228, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.182 : Tensor = prim::If(%875) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.184 : Tensor = prim::unchecked_cast(%center.228)
                    -> (%x.184)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %878 : Tensor = aten::slice(%x.182, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %879 : int = aten::mul(%fold.125, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %880 : Tensor = aten::slice(%878, %33, %fold.125, %879, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %881 : Tensor = aten::slice(%880, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %882 : Tensor = aten::slice(%881, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.11, %882)
                %883 : bool = aten::__isnot__(%input_right.227, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%883) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.231 : Tensor = prim::unchecked_cast(%input_right.227)
                     = prim::SetAttr[name="center"](%c2.11, %input_right.231)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.11, %34)
                    -> ()
                -> (%output.85)
            %885 : bool = aten::__isnot__(%x.180, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x.186 : Tensor? = prim::If(%885) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.188 : Tensor = prim::unchecked_cast(%x.180)
                %x.190 : Tensor = aten::hardtanh_(%x.188, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.190)
              block1():
                -> (%x.180)
            %889 : bool = aten::__isnot__(%x.186, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
            %x2.12 : Tensor? = prim::If(%889) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
              block0():
                %x.192 : Tensor = prim::unchecked_cast(%x.186)
                %input.33 : Tensor = aten::conv2d(%x.192, %self.temp1.upc2.convblock.0.weight, %self.temp1.upc2.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.194 : Tensor = aten::pixel_shuffle(%input.33, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
                -> (%x.194)
              block1():
                -> (%x.186)
            %upc1.2 : __torch__.upscale.model.bsvd.model.___torch_mangle_49.UpBlock = prim::GetAttr[name="upc1"](%temp1.1)
            %903 : bool = aten::__isnot__(%x2.12, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %904 : Tensor? = prim::If(%903) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list.17 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.3)
                %906 : Tensor = aten::pop(%mem_list.17, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%906)
              block1():
                -> (%34)
            %907 : bool = aten::__is__(%x2.12, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
            %908 : bool, %x1.34 : Tensor? = prim::If(%907) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
              block0():
                -> (%35, %x2.12)
              block1():
                %x1.36 : Tensor = prim::unchecked_cast(%x2.12)
                %911 : bool = aten::__is__(%904, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
                -> (%911, %x1.36)
            %912 : Tensor? = prim::If(%908) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
              block0():
                -> (%34)
              block1():
                %x1.38 : Tensor = prim::unchecked_cast(%x1.34)
                %x2.14 : Tensor = prim::unchecked_cast(%904)
                %915 : Tensor = aten::add(%x1.38, %x2.14, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
                -> (%915)
            %memconv.13 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%upc1.2)
            %c1.13 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.13)
            %918 : bool = aten::__isnot__(%912, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.233 : Tensor? = prim::If(%918) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.235 : Tensor = prim::unchecked_cast(%912)
                %921 : int[] = aten::size(%input_right.235) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %922 : int, %923 : int, %924 : int, %925 : int = prim::ListUnpack(%921)
                 = prim::SetAttr[name="n"](%c1.13, %922)
                 = prim::SetAttr[name="c"](%c1.13, %923)
                 = prim::SetAttr[name="h"](%c1.13, %924)
                 = prim::SetAttr[name="w"](%c1.13, %925)
                %c.78 : int = prim::GetAttr[name="c"](%c1.13)
                %927 : int = aten::floordiv(%c.78, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.13, %927)
                -> (%input_right.235)
              block1():
                -> (%912)
            %center.230 : Tensor? = prim::GetAttr[name="center"](%c1.13)
            %929 : bool = aten::__is__(%center.230, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.196 : Tensor? = prim::If(%929) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %931 : bool = aten::__isnot__(%input_right.233, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%931) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.237 : Tensor = prim::unchecked_cast(%input_right.233)
                    %left_fold_2fold.146 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.13)
                    %934 : int[] = aten::size(%left_fold_2fold.146) # <string>:13:9
                    %935 : int = aten::__getitem__(%934, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %936 : bool = aten::eq(%935, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%936) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.104 : int = prim::GetAttr[name="n"](%c1.13)
                        %fold.127 : int = prim::GetAttr[name="fold"](%c1.13)
                        %h.104 : int = prim::GetAttr[name="h"](%c1.13)
                        %w.104 : int = prim::GetAttr[name="w"](%c1.13)
                        %941 : int[] = prim::ListConstruct(%n.104, %fold.127, %h.104, %w.104)
                        %942 : Tensor = aten::zeros(%941, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.13, %942)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.13, %input_right.237)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.13, %34)
                    -> ()
                -> (%34)
              block1():
                %943 : bool = aten::__is__(%input_right.233, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.239 : Tensor?, %output.91 : Tensor = prim::If(%943) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.232 : Tensor? = prim::GetAttr[name="center"](%c1.13)
                    %947 : bool = aten::__isnot__(%center.232, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%947) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.148 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.13)
                    %center.234 : Tensor? = prim::GetAttr[name="center"](%c1.13)
                    %n.106 : int = prim::GetAttr[name="n"](%c1.13)
                    %fold.129 : int = prim::GetAttr[name="fold"](%c1.13)
                    %h.106 : int = prim::GetAttr[name="h"](%c1.13)
                    %w.106 : int = prim::GetAttr[name="w"](%c1.13)
                    %955 : int[] = prim::ListConstruct(%n.106, %fold.129, %h.106, %w.106)
                    %956 : Tensor = aten::zeros(%955, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %958 : bool = aten::__is__(%center.234, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %959 : bool = aten::__not__(%958) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.236 : Tensor, %left_fold_2fold.150 : Tensor = prim::If(%959) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.238 : Tensor = prim::unchecked_cast(%center.234)
                        -> (%center.238, %left_fold_2fold.148)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %963 : int[] = aten::size(%center.236) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.108 : int, %c.80 : int, %h.108 : int, %w.108 : int = prim::ListUnpack(%963)
                    %fold.131 : int = aten::floordiv(%c.80, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %969 : int[] = aten::size(%left_fold_2fold.150) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %970 : int = aten::__getitem__(%969, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %971 : bool = aten::eq(%970, %fold.131) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%971) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %973 : Tensor = aten::slice(%956, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %974 : Tensor = aten::slice(%973, %33, %34, %fold.131, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %975 : Tensor = aten::slice(%974, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %976 : Tensor = aten::slice(%975, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %977 : Tensor = aten::slice(%center.236, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %978 : int = aten::mul(%fold.131, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %979 : Tensor = aten::slice(%977, %33, %978, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %980 : Tensor = aten::slice(%979, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %981 : Tensor = aten::slice(%980, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %982 : Tensor[] = prim::ListConstruct(%976, %left_fold_2fold.150, %981)
                    %983 : Tensor = aten::cat(%982, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.93 : Tensor = aten::conv2d(%983, %self.temp1.upc1.memconv.c1.op.conv.weight, %self.temp1.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.233, %output.93)
                  block1():
                    %input_right.241 : Tensor = prim::unchecked_cast(%input_right.233)
                    %left_fold_2fold.152 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.13)
                    %center.240 : Tensor? = prim::GetAttr[name="center"](%c1.13)
                    %995 : bool = aten::__is__(%center.240, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %996 : bool = aten::__not__(%995) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.242 : Tensor, %left_fold_2fold.154 : Tensor = prim::If(%996) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.244 : Tensor = prim::unchecked_cast(%center.240)
                        -> (%center.244, %left_fold_2fold.152)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1000 : int[] = aten::size(%center.242) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.110 : int, %c.82 : int, %h.110 : int, %w.110 : int = prim::ListUnpack(%1000)
                    %fold.133 : int = aten::floordiv(%c.82, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1006 : int[] = aten::size(%left_fold_2fold.154) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1007 : int = aten::__getitem__(%1006, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1008 : bool = aten::eq(%1007, %fold.133) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1008) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1010 : Tensor = aten::slice(%input_right.241, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1011 : Tensor = aten::slice(%1010, %33, %34, %fold.133, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1012 : Tensor = aten::slice(%1011, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1013 : Tensor = aten::slice(%1012, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1014 : Tensor = aten::slice(%center.242, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1015 : int = aten::mul(%fold.133, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1016 : Tensor = aten::slice(%1014, %33, %1015, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1017 : Tensor = aten::slice(%1016, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1018 : Tensor = aten::slice(%1017, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1019 : Tensor[] = prim::ListConstruct(%1013, %left_fold_2fold.154, %1018)
                    %1020 : Tensor = aten::cat(%1019, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.95 : Tensor = aten::conv2d(%1020, %self.temp1.upc1.memconv.c1.op.conv.weight, %self.temp1.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.241, %output.95)
                %center.246 : Tensor? = prim::GetAttr[name="center"](%c1.13)
                %fold.135 : int = prim::GetAttr[name="fold"](%c1.13)
                %1030 : bool = aten::__isnot__(%center.246, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.198 : Tensor = prim::If(%1030) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.200 : Tensor = prim::unchecked_cast(%center.246)
                    -> (%x.200)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %1033 : Tensor = aten::slice(%x.198, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1034 : int = aten::mul(%fold.135, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %1035 : Tensor = aten::slice(%1033, %33, %fold.135, %1034, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1036 : Tensor = aten::slice(%1035, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1037 : Tensor = aten::slice(%1036, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.13, %1037)
                %1038 : bool = aten::__isnot__(%input_right.239, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%1038) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.243 : Tensor = prim::unchecked_cast(%input_right.239)
                     = prim::SetAttr[name="center"](%c1.13, %input_right.243)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.13, %34)
                    -> ()
                -> (%output.91)
            %1040 : bool = aten::__isnot__(%x.196, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.202 : Tensor? = prim::If(%1040) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.204 : Tensor = prim::unchecked_cast(%x.196)
                %x.206 : Tensor = aten::hardtanh_(%x.204, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.206)
              block1():
                -> (%x.196)
            %c2.13 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.13)
            %1045 : bool = aten::__isnot__(%x.202, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.245 : Tensor? = prim::If(%1045) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.247 : Tensor = prim::unchecked_cast(%x.202)
                %1048 : int[] = aten::size(%input_right.247) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %1049 : int, %1050 : int, %1051 : int, %1052 : int = prim::ListUnpack(%1048)
                 = prim::SetAttr[name="n"](%c2.13, %1049)
                 = prim::SetAttr[name="c"](%c2.13, %1050)
                 = prim::SetAttr[name="h"](%c2.13, %1051)
                 = prim::SetAttr[name="w"](%c2.13, %1052)
                %c.84 : int = prim::GetAttr[name="c"](%c2.13)
                %1054 : int = aten::floordiv(%c.84, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.13, %1054)
                -> (%input_right.247)
              block1():
                -> (%x.202)
            %center.248 : Tensor? = prim::GetAttr[name="center"](%c2.13)
            %1056 : bool = aten::__is__(%center.248, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.208 : Tensor? = prim::If(%1056) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %1058 : bool = aten::__isnot__(%input_right.245, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%1058) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.249 : Tensor = prim::unchecked_cast(%input_right.245)
                    %left_fold_2fold.156 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.13)
                    %1061 : int[] = aten::size(%left_fold_2fold.156) # <string>:13:9
                    %1062 : int = aten::__getitem__(%1061, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %1063 : bool = aten::eq(%1062, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%1063) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.112 : int = prim::GetAttr[name="n"](%c2.13)
                        %fold.137 : int = prim::GetAttr[name="fold"](%c2.13)
                        %h.112 : int = prim::GetAttr[name="h"](%c2.13)
                        %w.112 : int = prim::GetAttr[name="w"](%c2.13)
                        %1068 : int[] = prim::ListConstruct(%n.112, %fold.137, %h.112, %w.112)
                        %1069 : Tensor = aten::zeros(%1068, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.13, %1069)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.13, %input_right.249)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.13, %34)
                    -> ()
                -> (%34)
              block1():
                %1070 : bool = aten::__is__(%input_right.245, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.251 : Tensor?, %output.97 : Tensor = prim::If(%1070) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.250 : Tensor? = prim::GetAttr[name="center"](%c2.13)
                    %1074 : bool = aten::__isnot__(%center.250, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%1074) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.158 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.13)
                    %center.252 : Tensor? = prim::GetAttr[name="center"](%c2.13)
                    %n.114 : int = prim::GetAttr[name="n"](%c2.13)
                    %fold.139 : int = prim::GetAttr[name="fold"](%c2.13)
                    %h.114 : int = prim::GetAttr[name="h"](%c2.13)
                    %w.114 : int = prim::GetAttr[name="w"](%c2.13)
                    %1082 : int[] = prim::ListConstruct(%n.114, %fold.139, %h.114, %w.114)
                    %1083 : Tensor = aten::zeros(%1082, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %1085 : bool = aten::__is__(%center.252, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1086 : bool = aten::__not__(%1085) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.254 : Tensor, %left_fold_2fold.160 : Tensor = prim::If(%1086) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.256 : Tensor = prim::unchecked_cast(%center.252)
                        -> (%center.256, %left_fold_2fold.158)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1090 : int[] = aten::size(%center.254) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.116 : int, %c.86 : int, %h.116 : int, %w.116 : int = prim::ListUnpack(%1090)
                    %fold.141 : int = aten::floordiv(%c.86, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1096 : int[] = aten::size(%left_fold_2fold.160) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1097 : int = aten::__getitem__(%1096, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1098 : bool = aten::eq(%1097, %fold.141) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1098) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1100 : Tensor = aten::slice(%1083, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1101 : Tensor = aten::slice(%1100, %33, %34, %fold.141, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1102 : Tensor = aten::slice(%1101, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1103 : Tensor = aten::slice(%1102, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1104 : Tensor = aten::slice(%center.254, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1105 : int = aten::mul(%fold.141, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1106 : Tensor = aten::slice(%1104, %33, %1105, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1107 : Tensor = aten::slice(%1106, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1108 : Tensor = aten::slice(%1107, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1109 : Tensor[] = prim::ListConstruct(%1103, %left_fold_2fold.160, %1108)
                    %1110 : Tensor = aten::cat(%1109, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.99 : Tensor = aten::conv2d(%1110, %self.temp1.upc1.memconv.c2.op.conv.weight, %self.temp1.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.245, %output.99)
                  block1():
                    %input_right.253 : Tensor = prim::unchecked_cast(%input_right.245)
                    %left_fold_2fold.162 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.13)
                    %center.258 : Tensor? = prim::GetAttr[name="center"](%c2.13)
                    %1122 : bool = aten::__is__(%center.258, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1123 : bool = aten::__not__(%1122) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.260 : Tensor, %left_fold_2fold.164 : Tensor = prim::If(%1123) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.262 : Tensor = prim::unchecked_cast(%center.258)
                        -> (%center.262, %left_fold_2fold.162)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1127 : int[] = aten::size(%center.260) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.118 : int, %c.88 : int, %h.118 : int, %w.118 : int = prim::ListUnpack(%1127)
                    %fold.143 : int = aten::floordiv(%c.88, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1133 : int[] = aten::size(%left_fold_2fold.164) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1134 : int = aten::__getitem__(%1133, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1135 : bool = aten::eq(%1134, %fold.143) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1135) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1137 : Tensor = aten::slice(%input_right.253, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1138 : Tensor = aten::slice(%1137, %33, %34, %fold.143, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1139 : Tensor = aten::slice(%1138, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1140 : Tensor = aten::slice(%1139, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1141 : Tensor = aten::slice(%center.260, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1142 : int = aten::mul(%fold.143, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1143 : Tensor = aten::slice(%1141, %33, %1142, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1144 : Tensor = aten::slice(%1143, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1145 : Tensor = aten::slice(%1144, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1146 : Tensor[] = prim::ListConstruct(%1140, %left_fold_2fold.164, %1145)
                    %1147 : Tensor = aten::cat(%1146, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.101 : Tensor = aten::conv2d(%1147, %self.temp1.upc1.memconv.c2.op.conv.weight, %self.temp1.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.253, %output.101)
                %center.264 : Tensor? = prim::GetAttr[name="center"](%c2.13)
                %fold.145 : int = prim::GetAttr[name="fold"](%c2.13)
                %1157 : bool = aten::__isnot__(%center.264, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.210 : Tensor = prim::If(%1157) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.212 : Tensor = prim::unchecked_cast(%center.264)
                    -> (%x.212)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %1160 : Tensor = aten::slice(%x.210, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1161 : int = aten::mul(%fold.145, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %1162 : Tensor = aten::slice(%1160, %33, %fold.145, %1161, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1163 : Tensor = aten::slice(%1162, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1164 : Tensor = aten::slice(%1163, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.13, %1164)
                %1165 : bool = aten::__isnot__(%input_right.251, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%1165) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.255 : Tensor = prim::unchecked_cast(%input_right.251)
                     = prim::SetAttr[name="center"](%c2.13, %input_right.255)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.13, %34)
                    -> ()
                -> (%output.97)
            %1167 : bool = aten::__isnot__(%x.208, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x.214 : Tensor? = prim::If(%1167) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.216 : Tensor = prim::unchecked_cast(%x.208)
                %x.218 : Tensor = aten::hardtanh_(%x.216, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.218)
              block1():
                -> (%x.208)
            %1171 : bool = aten::__isnot__(%x.214, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
            %x1.40 : Tensor? = prim::If(%1171) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
              block0():
                %x.220 : Tensor = prim::unchecked_cast(%x.214)
                %input.35 : Tensor = aten::conv2d(%x.220, %self.temp1.upc1.convblock.0.weight, %self.temp1.upc1.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.222 : Tensor = aten::pixel_shuffle(%input.35, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
                -> (%x.222)
              block1():
                -> (%x.214)
            %1185 : bool = aten::__isnot__(%x1.40, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %1186 : Tensor? = prim::If(%1185) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list.19 : Tensor[] = prim::GetAttr[name="mem_list"](%skip2.3)
                %1188 : Tensor = aten::pop(%mem_list.19, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%1188)
              block1():
                -> (%34)
            %1189 : bool = aten::__is__(%x1.40, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
            %1190 : bool, %x1.42 : Tensor? = prim::If(%1189) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
              block0():
                -> (%35, %x1.40)
              block1():
                %x1.44 : Tensor = prim::unchecked_cast(%x1.40)
                %1193 : bool = aten::__is__(%1186, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
                -> (%1193, %x1.44)
            %1194 : Tensor? = prim::If(%1190) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
              block0():
                -> (%34)
              block1():
                %x1.46 : Tensor = prim::unchecked_cast(%x1.42)
                %x2.16 : Tensor = prim::unchecked_cast(%1186)
                %1197 : Tensor = aten::add(%x1.46, %x2.16, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
                -> (%1197)
            %1198 : bool = aten::__is__(%1194, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:11
            %x.224 : Tensor? = prim::If(%1198) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:8
              block0():
                -> (%34)
              block1():
                %x.226 : Tensor = prim::unchecked_cast(%1194)
                %input.37 : Tensor = aten::conv2d(%x.226, %self.temp1.outc.convblock.0.weight, %self.temp1.outc.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %input.39 : Tensor = aten::hardtanh_(%input.37, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                %input.41 : Tensor = aten::conv2d(%input.39, %self.temp1.outc.convblock.3.weight, %self.temp1.outc.convblock.3.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input.41)
            %1218 : bool = aten::__isnot__(%x.224, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %1219 : Tensor? = prim::If(%1218) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list.21 : Tensor[] = prim::GetAttr[name="mem_list"](%skip1.3)
                %1221 : Tensor = aten::pop(%mem_list.21, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%1221)
              block1():
                -> (%34)
            %1222 : bool = aten::__is__(%1219, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
            %1223 : bool, %x1.48 : Tensor? = prim::If(%1222) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
              block0():
                -> (%35, %1219)
              block1():
                %x1.50 : Tensor = prim::unchecked_cast(%1219)
                %1226 : bool = aten::__is__(%x.224, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:25
                -> (%1226, %x1.50)
            %x.228 : Tensor? = prim::If(%1223) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:8
              block0():
                -> (%34)
              block1():
                %x1.52 : Tensor = prim::unchecked_cast(%x1.48)
                %x2.18 : Tensor = prim::unchecked_cast(%x.224)
                %1230 : Tensor = aten::slice(%x1.52, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %1231 : Tensor = aten::slice(%1230, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %1232 : Tensor = aten::slice(%1231, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %1233 : Tensor = aten::slice(%1232, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %1234 : Tensor = aten::slice(%x2.18, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %1235 : Tensor = aten::slice(%1234, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %1236 : Tensor = aten::slice(%1235, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %1237 : Tensor = aten::slice(%1236, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %1238 : Tensor = aten::sub(%1233, %1237, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %1239 : Tensor = aten::slice(%x2.18, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %1240 : Tensor = aten::slice(%1239, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %1241 : Tensor = aten::slice(%1240, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %1242 : Tensor = aten::slice(%1241, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %1243 : Tensor = aten::copy_(%1242, %1238, %30) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                -> (%x2.18)
            %temp2.1 : __torch__.upscale.model.bsvd.model.___torch_mangle_55.DenBlock = prim::GetAttr[name="temp2"](%self)
            %skip1.7 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip1"](%temp2.1)
            %1246 : bool = aten::__is__(%x.228, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:426:11
            %1247 : Tensor? = prim::If(%1246) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:426:8
              block0():
                -> (%34)
              block1():
                %x.230 : Tensor = prim::unchecked_cast(%x.228)
                %1249 : Tensor = aten::slice(%x.230, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
                %1250 : Tensor = aten::slice(%1249, %33, %32, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
                %1251 : Tensor = aten::slice(%1250, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
                %1252 : Tensor = aten::slice(%1251, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
                -> (%1252)
            %1253 : bool = aten::__isnot__(%1247, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
             = prim::If(%1253) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
              block0():
                %x.232 : Tensor = prim::unchecked_cast(%1247)
                %mem_list.23 : Tensor[] = prim::GetAttr[name="mem_list"](%skip1.7)
                 = aten::insert(%mem_list.23, %32, %x.232) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
                -> ()
              block1():
                -> ()
            %1257 : bool = aten::__is__(%x.228, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:245:11
            %x0.5 : Tensor? = prim::If(%1257) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:245:8
              block0():
                -> (%34)
              block1():
                %x.234 : Tensor = prim::unchecked_cast(%x.228)
                %input.43 : Tensor = aten::conv2d(%x.234, %self.temp2.inc.convblock.0.weight, %self.temp2.inc.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %input.45 : Tensor = aten::hardtanh_(%input.43, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                %input.47 : Tensor = aten::conv2d(%input.45, %self.temp2.inc.convblock.3.weight, %self.temp2.inc.convblock.3.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %input.49 : Tensor = aten::hardtanh_(%input.47, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%input.49)
            %skip2.7 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip2"](%temp2.1)
            %1278 : bool = aten::__isnot__(%x0.5, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
             = prim::If(%1278) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
              block0():
                %x.236 : Tensor = prim::unchecked_cast(%x0.5)
                %mem_list.25 : Tensor[] = prim::GetAttr[name="mem_list"](%skip2.7)
                 = aten::insert(%mem_list.25, %32, %x.236) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
                -> ()
              block1():
                -> ()
            %downc0.4 : __torch__.upscale.model.bsvd.model.___torch_mangle_31.DownBlock = prim::GetAttr[name="downc0"](%temp2.1)
            %1282 : bool = aten::__isnot__(%x0.5, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:11
            %x.238 : Tensor? = prim::If(%1282) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:8
              block0():
                %x.240 : Tensor = prim::unchecked_cast(%x0.5)
                %input.51 : Tensor = aten::conv2d(%x.240, %self.temp2.downc0.convblock.0.weight, %self.temp2.downc0.convblock.0.bias, %7565, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.242 : Tensor = aten::hardtanh_(%input.51, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.242)
              block1():
                -> (%x0.5)
            %memconv.15 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%downc0.4)
            %c1.15 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.15)
            %1296 : bool = aten::__isnot__(%x.238, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.257 : Tensor? = prim::If(%1296) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.259 : Tensor = prim::unchecked_cast(%x.238)
                %1299 : int[] = aten::size(%input_right.259) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %1300 : int, %1301 : int, %1302 : int, %1303 : int = prim::ListUnpack(%1299)
                 = prim::SetAttr[name="n"](%c1.15, %1300)
                 = prim::SetAttr[name="c"](%c1.15, %1301)
                 = prim::SetAttr[name="h"](%c1.15, %1302)
                 = prim::SetAttr[name="w"](%c1.15, %1303)
                %c.90 : int = prim::GetAttr[name="c"](%c1.15)
                %1305 : int = aten::floordiv(%c.90, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.15, %1305)
                -> (%input_right.259)
              block1():
                -> (%x.238)
            %center.266 : Tensor? = prim::GetAttr[name="center"](%c1.15)
            %1307 : bool = aten::__is__(%center.266, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.244 : Tensor? = prim::If(%1307) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %1309 : bool = aten::__isnot__(%input_right.257, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%1309) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.261 : Tensor = prim::unchecked_cast(%input_right.257)
                    %left_fold_2fold.166 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.15)
                    %1312 : int[] = aten::size(%left_fold_2fold.166) # <string>:13:9
                    %1313 : int = aten::__getitem__(%1312, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %1314 : bool = aten::eq(%1313, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%1314) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.120 : int = prim::GetAttr[name="n"](%c1.15)
                        %fold.147 : int = prim::GetAttr[name="fold"](%c1.15)
                        %h.120 : int = prim::GetAttr[name="h"](%c1.15)
                        %w.120 : int = prim::GetAttr[name="w"](%c1.15)
                        %1319 : int[] = prim::ListConstruct(%n.120, %fold.147, %h.120, %w.120)
                        %1320 : Tensor = aten::zeros(%1319, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.15, %1320)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.15, %input_right.261)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.15, %34)
                    -> ()
                -> (%34)
              block1():
                %1321 : bool = aten::__is__(%input_right.257, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.263 : Tensor?, %output.103 : Tensor = prim::If(%1321) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.268 : Tensor? = prim::GetAttr[name="center"](%c1.15)
                    %1325 : bool = aten::__isnot__(%center.268, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%1325) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.168 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.15)
                    %center.270 : Tensor? = prim::GetAttr[name="center"](%c1.15)
                    %n.122 : int = prim::GetAttr[name="n"](%c1.15)
                    %fold.149 : int = prim::GetAttr[name="fold"](%c1.15)
                    %h.122 : int = prim::GetAttr[name="h"](%c1.15)
                    %w.122 : int = prim::GetAttr[name="w"](%c1.15)
                    %1333 : int[] = prim::ListConstruct(%n.122, %fold.149, %h.122, %w.122)
                    %1334 : Tensor = aten::zeros(%1333, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %1336 : bool = aten::__is__(%center.270, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1337 : bool = aten::__not__(%1336) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.272 : Tensor, %left_fold_2fold.170 : Tensor = prim::If(%1337) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.274 : Tensor = prim::unchecked_cast(%center.270)
                        -> (%center.274, %left_fold_2fold.168)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1341 : int[] = aten::size(%center.272) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.124 : int, %c.92 : int, %h.124 : int, %w.124 : int = prim::ListUnpack(%1341)
                    %fold.151 : int = aten::floordiv(%c.92, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1347 : int[] = aten::size(%left_fold_2fold.170) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1348 : int = aten::__getitem__(%1347, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1349 : bool = aten::eq(%1348, %fold.151) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1349) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1351 : Tensor = aten::slice(%1334, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1352 : Tensor = aten::slice(%1351, %33, %34, %fold.151, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1353 : Tensor = aten::slice(%1352, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1354 : Tensor = aten::slice(%1353, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1355 : Tensor = aten::slice(%center.272, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1356 : int = aten::mul(%fold.151, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1357 : Tensor = aten::slice(%1355, %33, %1356, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1358 : Tensor = aten::slice(%1357, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1359 : Tensor = aten::slice(%1358, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1360 : Tensor[] = prim::ListConstruct(%1354, %left_fold_2fold.170, %1359)
                    %1361 : Tensor = aten::cat(%1360, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.105 : Tensor = aten::conv2d(%1361, %self.temp2.downc0.memconv.c1.op.conv.weight, %self.temp2.downc0.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.257, %output.105)
                  block1():
                    %input_right.265 : Tensor = prim::unchecked_cast(%input_right.257)
                    %left_fold_2fold.172 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.15)
                    %center.276 : Tensor? = prim::GetAttr[name="center"](%c1.15)
                    %1373 : bool = aten::__is__(%center.276, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1374 : bool = aten::__not__(%1373) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.278 : Tensor, %left_fold_2fold.174 : Tensor = prim::If(%1374) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.280 : Tensor = prim::unchecked_cast(%center.276)
                        -> (%center.280, %left_fold_2fold.172)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1378 : int[] = aten::size(%center.278) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.126 : int, %c.94 : int, %h.126 : int, %w.126 : int = prim::ListUnpack(%1378)
                    %fold.153 : int = aten::floordiv(%c.94, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1384 : int[] = aten::size(%left_fold_2fold.174) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1385 : int = aten::__getitem__(%1384, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1386 : bool = aten::eq(%1385, %fold.153) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1386) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1388 : Tensor = aten::slice(%input_right.265, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1389 : Tensor = aten::slice(%1388, %33, %34, %fold.153, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1390 : Tensor = aten::slice(%1389, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1391 : Tensor = aten::slice(%1390, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1392 : Tensor = aten::slice(%center.278, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1393 : int = aten::mul(%fold.153, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1394 : Tensor = aten::slice(%1392, %33, %1393, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1395 : Tensor = aten::slice(%1394, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1396 : Tensor = aten::slice(%1395, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1397 : Tensor[] = prim::ListConstruct(%1391, %left_fold_2fold.174, %1396)
                    %1398 : Tensor = aten::cat(%1397, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.107 : Tensor = aten::conv2d(%1398, %self.temp2.downc0.memconv.c1.op.conv.weight, %self.temp2.downc0.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.265, %output.107)
                %center.282 : Tensor? = prim::GetAttr[name="center"](%c1.15)
                %fold.155 : int = prim::GetAttr[name="fold"](%c1.15)
                %1408 : bool = aten::__isnot__(%center.282, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.246 : Tensor = prim::If(%1408) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.248 : Tensor = prim::unchecked_cast(%center.282)
                    -> (%x.248)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %1411 : Tensor = aten::slice(%x.246, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1412 : int = aten::mul(%fold.155, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %1413 : Tensor = aten::slice(%1411, %33, %fold.155, %1412, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1414 : Tensor = aten::slice(%1413, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1415 : Tensor = aten::slice(%1414, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.15, %1415)
                %1416 : bool = aten::__isnot__(%input_right.263, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%1416) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.267 : Tensor = prim::unchecked_cast(%input_right.263)
                     = prim::SetAttr[name="center"](%c1.15, %input_right.267)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.15, %34)
                    -> ()
                -> (%output.103)
            %1418 : bool = aten::__isnot__(%x.244, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.250 : Tensor? = prim::If(%1418) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.252 : Tensor = prim::unchecked_cast(%x.244)
                %x.254 : Tensor = aten::hardtanh_(%x.252, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.254)
              block1():
                -> (%x.244)
            %c2.15 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.15)
            %1423 : bool = aten::__isnot__(%x.250, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.269 : Tensor? = prim::If(%1423) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.271 : Tensor = prim::unchecked_cast(%x.250)
                %1426 : int[] = aten::size(%input_right.271) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %1427 : int, %1428 : int, %1429 : int, %1430 : int = prim::ListUnpack(%1426)
                 = prim::SetAttr[name="n"](%c2.15, %1427)
                 = prim::SetAttr[name="c"](%c2.15, %1428)
                 = prim::SetAttr[name="h"](%c2.15, %1429)
                 = prim::SetAttr[name="w"](%c2.15, %1430)
                %c.96 : int = prim::GetAttr[name="c"](%c2.15)
                %1432 : int = aten::floordiv(%c.96, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.15, %1432)
                -> (%input_right.271)
              block1():
                -> (%x.250)
            %center.284 : Tensor? = prim::GetAttr[name="center"](%c2.15)
            %1434 : bool = aten::__is__(%center.284, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.256 : Tensor? = prim::If(%1434) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %1436 : bool = aten::__isnot__(%input_right.269, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%1436) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.273 : Tensor = prim::unchecked_cast(%input_right.269)
                    %left_fold_2fold.176 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.15)
                    %1439 : int[] = aten::size(%left_fold_2fold.176) # <string>:13:9
                    %1440 : int = aten::__getitem__(%1439, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %1441 : bool = aten::eq(%1440, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%1441) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.128 : int = prim::GetAttr[name="n"](%c2.15)
                        %fold.157 : int = prim::GetAttr[name="fold"](%c2.15)
                        %h.128 : int = prim::GetAttr[name="h"](%c2.15)
                        %w.128 : int = prim::GetAttr[name="w"](%c2.15)
                        %1446 : int[] = prim::ListConstruct(%n.128, %fold.157, %h.128, %w.128)
                        %1447 : Tensor = aten::zeros(%1446, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.15, %1447)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.15, %input_right.273)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.15, %34)
                    -> ()
                -> (%34)
              block1():
                %1448 : bool = aten::__is__(%input_right.269, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.275 : Tensor?, %output.109 : Tensor = prim::If(%1448) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.286 : Tensor? = prim::GetAttr[name="center"](%c2.15)
                    %1452 : bool = aten::__isnot__(%center.286, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%1452) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.178 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.15)
                    %center.288 : Tensor? = prim::GetAttr[name="center"](%c2.15)
                    %n.130 : int = prim::GetAttr[name="n"](%c2.15)
                    %fold.159 : int = prim::GetAttr[name="fold"](%c2.15)
                    %h.130 : int = prim::GetAttr[name="h"](%c2.15)
                    %w.130 : int = prim::GetAttr[name="w"](%c2.15)
                    %1460 : int[] = prim::ListConstruct(%n.130, %fold.159, %h.130, %w.130)
                    %1461 : Tensor = aten::zeros(%1460, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %1463 : bool = aten::__is__(%center.288, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1464 : bool = aten::__not__(%1463) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.290 : Tensor, %left_fold_2fold.180 : Tensor = prim::If(%1464) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.292 : Tensor = prim::unchecked_cast(%center.288)
                        -> (%center.292, %left_fold_2fold.178)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1468 : int[] = aten::size(%center.290) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.132 : int, %c.98 : int, %h.132 : int, %w.132 : int = prim::ListUnpack(%1468)
                    %fold.161 : int = aten::floordiv(%c.98, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1474 : int[] = aten::size(%left_fold_2fold.180) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1475 : int = aten::__getitem__(%1474, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1476 : bool = aten::eq(%1475, %fold.161) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1476) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1478 : Tensor = aten::slice(%1461, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1479 : Tensor = aten::slice(%1478, %33, %34, %fold.161, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1480 : Tensor = aten::slice(%1479, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1481 : Tensor = aten::slice(%1480, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1482 : Tensor = aten::slice(%center.290, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1483 : int = aten::mul(%fold.161, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1484 : Tensor = aten::slice(%1482, %33, %1483, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1485 : Tensor = aten::slice(%1484, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1486 : Tensor = aten::slice(%1485, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1487 : Tensor[] = prim::ListConstruct(%1481, %left_fold_2fold.180, %1486)
                    %1488 : Tensor = aten::cat(%1487, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.111 : Tensor = aten::conv2d(%1488, %self.temp2.downc0.memconv.c2.op.conv.weight, %self.temp2.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.269, %output.111)
                  block1():
                    %input_right.277 : Tensor = prim::unchecked_cast(%input_right.269)
                    %left_fold_2fold.182 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.15)
                    %center.294 : Tensor? = prim::GetAttr[name="center"](%c2.15)
                    %1500 : bool = aten::__is__(%center.294, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1501 : bool = aten::__not__(%1500) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.296 : Tensor, %left_fold_2fold.184 : Tensor = prim::If(%1501) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.298 : Tensor = prim::unchecked_cast(%center.294)
                        -> (%center.298, %left_fold_2fold.182)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1505 : int[] = aten::size(%center.296) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.134 : int, %c.100 : int, %h.134 : int, %w.134 : int = prim::ListUnpack(%1505)
                    %fold.163 : int = aten::floordiv(%c.100, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1511 : int[] = aten::size(%left_fold_2fold.184) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1512 : int = aten::__getitem__(%1511, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1513 : bool = aten::eq(%1512, %fold.163) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1513) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1515 : Tensor = aten::slice(%input_right.277, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1516 : Tensor = aten::slice(%1515, %33, %34, %fold.163, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1517 : Tensor = aten::slice(%1516, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1518 : Tensor = aten::slice(%1517, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1519 : Tensor = aten::slice(%center.296, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1520 : int = aten::mul(%fold.163, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1521 : Tensor = aten::slice(%1519, %33, %1520, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1522 : Tensor = aten::slice(%1521, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1523 : Tensor = aten::slice(%1522, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1524 : Tensor[] = prim::ListConstruct(%1518, %left_fold_2fold.184, %1523)
                    %1525 : Tensor = aten::cat(%1524, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.113 : Tensor = aten::conv2d(%1525, %self.temp2.downc0.memconv.c2.op.conv.weight, %self.temp2.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.277, %output.113)
                %center.300 : Tensor? = prim::GetAttr[name="center"](%c2.15)
                %fold.165 : int = prim::GetAttr[name="fold"](%c2.15)
                %1535 : bool = aten::__isnot__(%center.300, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.258 : Tensor = prim::If(%1535) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.260 : Tensor = prim::unchecked_cast(%center.300)
                    -> (%x.260)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %1538 : Tensor = aten::slice(%x.258, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1539 : int = aten::mul(%fold.165, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %1540 : Tensor = aten::slice(%1538, %33, %fold.165, %1539, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1541 : Tensor = aten::slice(%1540, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1542 : Tensor = aten::slice(%1541, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.15, %1542)
                %1543 : bool = aten::__isnot__(%input_right.275, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%1543) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.279 : Tensor = prim::unchecked_cast(%input_right.275)
                     = prim::SetAttr[name="center"](%c2.15, %input_right.279)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.15, %34)
                    -> ()
                -> (%output.109)
            %1545 : bool = aten::__isnot__(%x.256, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x1.54 : Tensor? = prim::If(%1545) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.262 : Tensor = prim::unchecked_cast(%x.256)
                %x.264 : Tensor = aten::hardtanh_(%x.262, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.264)
              block1():
                -> (%x.256)
            %skip3.7 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip3"](%temp2.1)
            %1550 : bool = aten::__isnot__(%x1.54, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
             = prim::If(%1550) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
              block0():
                %x.266 : Tensor = prim::unchecked_cast(%x1.54)
                %mem_list.27 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.7)
                 = aten::insert(%mem_list.27, %32, %x.266) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
                -> ()
              block1():
                -> ()
            %downc1.4 : __torch__.upscale.model.bsvd.model.___torch_mangle_38.DownBlock = prim::GetAttr[name="downc1"](%temp2.1)
            %1554 : bool = aten::__isnot__(%x1.54, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:11
            %x.268 : Tensor? = prim::If(%1554) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:8
              block0():
                %x.270 : Tensor = prim::unchecked_cast(%x1.54)
                %input.53 : Tensor = aten::conv2d(%x.270, %self.temp2.downc1.convblock.0.weight, %self.temp2.downc1.convblock.0.bias, %7565, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.272 : Tensor = aten::hardtanh_(%input.53, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.272)
              block1():
                -> (%x1.54)
            %memconv.17 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%downc1.4)
            %c1.17 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.17)
            %1568 : bool = aten::__isnot__(%x.268, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.281 : Tensor? = prim::If(%1568) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.283 : Tensor = prim::unchecked_cast(%x.268)
                %1571 : int[] = aten::size(%input_right.283) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %1572 : int, %1573 : int, %1574 : int, %1575 : int = prim::ListUnpack(%1571)
                 = prim::SetAttr[name="n"](%c1.17, %1572)
                 = prim::SetAttr[name="c"](%c1.17, %1573)
                 = prim::SetAttr[name="h"](%c1.17, %1574)
                 = prim::SetAttr[name="w"](%c1.17, %1575)
                %c.102 : int = prim::GetAttr[name="c"](%c1.17)
                %1577 : int = aten::floordiv(%c.102, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.17, %1577)
                -> (%input_right.283)
              block1():
                -> (%x.268)
            %center.302 : Tensor? = prim::GetAttr[name="center"](%c1.17)
            %1579 : bool = aten::__is__(%center.302, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.274 : Tensor? = prim::If(%1579) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %1581 : bool = aten::__isnot__(%input_right.281, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%1581) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.285 : Tensor = prim::unchecked_cast(%input_right.281)
                    %left_fold_2fold.186 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.17)
                    %1584 : int[] = aten::size(%left_fold_2fold.186) # <string>:13:9
                    %1585 : int = aten::__getitem__(%1584, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %1586 : bool = aten::eq(%1585, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%1586) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.136 : int = prim::GetAttr[name="n"](%c1.17)
                        %fold.167 : int = prim::GetAttr[name="fold"](%c1.17)
                        %h.136 : int = prim::GetAttr[name="h"](%c1.17)
                        %w.136 : int = prim::GetAttr[name="w"](%c1.17)
                        %1591 : int[] = prim::ListConstruct(%n.136, %fold.167, %h.136, %w.136)
                        %1592 : Tensor = aten::zeros(%1591, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.17, %1592)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.17, %input_right.285)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.17, %34)
                    -> ()
                -> (%34)
              block1():
                %1593 : bool = aten::__is__(%input_right.281, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.287 : Tensor?, %output.115 : Tensor = prim::If(%1593) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.304 : Tensor? = prim::GetAttr[name="center"](%c1.17)
                    %1597 : bool = aten::__isnot__(%center.304, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%1597) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.188 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.17)
                    %center.306 : Tensor? = prim::GetAttr[name="center"](%c1.17)
                    %n.138 : int = prim::GetAttr[name="n"](%c1.17)
                    %fold.169 : int = prim::GetAttr[name="fold"](%c1.17)
                    %h.138 : int = prim::GetAttr[name="h"](%c1.17)
                    %w.138 : int = prim::GetAttr[name="w"](%c1.17)
                    %1605 : int[] = prim::ListConstruct(%n.138, %fold.169, %h.138, %w.138)
                    %1606 : Tensor = aten::zeros(%1605, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %1608 : bool = aten::__is__(%center.306, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1609 : bool = aten::__not__(%1608) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.308 : Tensor, %left_fold_2fold.190 : Tensor = prim::If(%1609) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.310 : Tensor = prim::unchecked_cast(%center.306)
                        -> (%center.310, %left_fold_2fold.188)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1613 : int[] = aten::size(%center.308) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.140 : int, %c.104 : int, %h.140 : int, %w.140 : int = prim::ListUnpack(%1613)
                    %fold.171 : int = aten::floordiv(%c.104, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1619 : int[] = aten::size(%left_fold_2fold.190) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1620 : int = aten::__getitem__(%1619, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1621 : bool = aten::eq(%1620, %fold.171) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1621) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1623 : Tensor = aten::slice(%1606, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1624 : Tensor = aten::slice(%1623, %33, %34, %fold.171, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1625 : Tensor = aten::slice(%1624, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1626 : Tensor = aten::slice(%1625, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1627 : Tensor = aten::slice(%center.308, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1628 : int = aten::mul(%fold.171, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1629 : Tensor = aten::slice(%1627, %33, %1628, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1630 : Tensor = aten::slice(%1629, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1631 : Tensor = aten::slice(%1630, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1632 : Tensor[] = prim::ListConstruct(%1626, %left_fold_2fold.190, %1631)
                    %1633 : Tensor = aten::cat(%1632, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.117 : Tensor = aten::conv2d(%1633, %self.temp2.downc1.memconv.c1.op.conv.weight, %self.temp2.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.281, %output.117)
                  block1():
                    %input_right.289 : Tensor = prim::unchecked_cast(%input_right.281)
                    %left_fold_2fold.192 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.17)
                    %center.312 : Tensor? = prim::GetAttr[name="center"](%c1.17)
                    %1645 : bool = aten::__is__(%center.312, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1646 : bool = aten::__not__(%1645) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.314 : Tensor, %left_fold_2fold.194 : Tensor = prim::If(%1646) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.316 : Tensor = prim::unchecked_cast(%center.312)
                        -> (%center.316, %left_fold_2fold.192)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1650 : int[] = aten::size(%center.314) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.142 : int, %c.106 : int, %h.142 : int, %w.142 : int = prim::ListUnpack(%1650)
                    %fold.173 : int = aten::floordiv(%c.106, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1656 : int[] = aten::size(%left_fold_2fold.194) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1657 : int = aten::__getitem__(%1656, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1658 : bool = aten::eq(%1657, %fold.173) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1658) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1660 : Tensor = aten::slice(%input_right.289, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1661 : Tensor = aten::slice(%1660, %33, %34, %fold.173, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1662 : Tensor = aten::slice(%1661, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1663 : Tensor = aten::slice(%1662, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1664 : Tensor = aten::slice(%center.314, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1665 : int = aten::mul(%fold.173, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1666 : Tensor = aten::slice(%1664, %33, %1665, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1667 : Tensor = aten::slice(%1666, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1668 : Tensor = aten::slice(%1667, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1669 : Tensor[] = prim::ListConstruct(%1663, %left_fold_2fold.194, %1668)
                    %1670 : Tensor = aten::cat(%1669, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.119 : Tensor = aten::conv2d(%1670, %self.temp2.downc1.memconv.c1.op.conv.weight, %self.temp2.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.289, %output.119)
                %center.318 : Tensor? = prim::GetAttr[name="center"](%c1.17)
                %fold.175 : int = prim::GetAttr[name="fold"](%c1.17)
                %1680 : bool = aten::__isnot__(%center.318, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.276 : Tensor = prim::If(%1680) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.278 : Tensor = prim::unchecked_cast(%center.318)
                    -> (%x.278)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %1683 : Tensor = aten::slice(%x.276, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1684 : int = aten::mul(%fold.175, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %1685 : Tensor = aten::slice(%1683, %33, %fold.175, %1684, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1686 : Tensor = aten::slice(%1685, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1687 : Tensor = aten::slice(%1686, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.17, %1687)
                %1688 : bool = aten::__isnot__(%input_right.287, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%1688) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.291 : Tensor = prim::unchecked_cast(%input_right.287)
                     = prim::SetAttr[name="center"](%c1.17, %input_right.291)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.17, %34)
                    -> ()
                -> (%output.115)
            %1690 : bool = aten::__isnot__(%x.274, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.280 : Tensor? = prim::If(%1690) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.282 : Tensor = prim::unchecked_cast(%x.274)
                %x.284 : Tensor = aten::hardtanh_(%x.282, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.284)
              block1():
                -> (%x.274)
            %c2.17 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.17)
            %1695 : bool = aten::__isnot__(%x.280, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.293 : Tensor? = prim::If(%1695) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.295 : Tensor = prim::unchecked_cast(%x.280)
                %1698 : int[] = aten::size(%input_right.295) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %1699 : int, %1700 : int, %1701 : int, %1702 : int = prim::ListUnpack(%1698)
                 = prim::SetAttr[name="n"](%c2.17, %1699)
                 = prim::SetAttr[name="c"](%c2.17, %1700)
                 = prim::SetAttr[name="h"](%c2.17, %1701)
                 = prim::SetAttr[name="w"](%c2.17, %1702)
                %c.108 : int = prim::GetAttr[name="c"](%c2.17)
                %1704 : int = aten::floordiv(%c.108, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.17, %1704)
                -> (%input_right.295)
              block1():
                -> (%x.280)
            %center.320 : Tensor? = prim::GetAttr[name="center"](%c2.17)
            %1706 : bool = aten::__is__(%center.320, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.286 : Tensor? = prim::If(%1706) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %1708 : bool = aten::__isnot__(%input_right.293, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%1708) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.297 : Tensor = prim::unchecked_cast(%input_right.293)
                    %left_fold_2fold.196 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.17)
                    %1711 : int[] = aten::size(%left_fold_2fold.196) # <string>:13:9
                    %1712 : int = aten::__getitem__(%1711, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %1713 : bool = aten::eq(%1712, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%1713) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.144 : int = prim::GetAttr[name="n"](%c2.17)
                        %fold.177 : int = prim::GetAttr[name="fold"](%c2.17)
                        %h.144 : int = prim::GetAttr[name="h"](%c2.17)
                        %w.144 : int = prim::GetAttr[name="w"](%c2.17)
                        %1718 : int[] = prim::ListConstruct(%n.144, %fold.177, %h.144, %w.144)
                        %1719 : Tensor = aten::zeros(%1718, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.17, %1719)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.17, %input_right.297)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.17, %34)
                    -> ()
                -> (%34)
              block1():
                %1720 : bool = aten::__is__(%input_right.293, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.299 : Tensor?, %output.121 : Tensor = prim::If(%1720) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.322 : Tensor? = prim::GetAttr[name="center"](%c2.17)
                    %1724 : bool = aten::__isnot__(%center.322, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%1724) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.198 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.17)
                    %center.324 : Tensor? = prim::GetAttr[name="center"](%c2.17)
                    %n.146 : int = prim::GetAttr[name="n"](%c2.17)
                    %fold.179 : int = prim::GetAttr[name="fold"](%c2.17)
                    %h.146 : int = prim::GetAttr[name="h"](%c2.17)
                    %w.146 : int = prim::GetAttr[name="w"](%c2.17)
                    %1732 : int[] = prim::ListConstruct(%n.146, %fold.179, %h.146, %w.146)
                    %1733 : Tensor = aten::zeros(%1732, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %1735 : bool = aten::__is__(%center.324, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1736 : bool = aten::__not__(%1735) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.326 : Tensor, %left_fold_2fold.200 : Tensor = prim::If(%1736) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.328 : Tensor = prim::unchecked_cast(%center.324)
                        -> (%center.328, %left_fold_2fold.198)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1740 : int[] = aten::size(%center.326) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.148 : int, %c.110 : int, %h.148 : int, %w.148 : int = prim::ListUnpack(%1740)
                    %fold.181 : int = aten::floordiv(%c.110, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1746 : int[] = aten::size(%left_fold_2fold.200) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1747 : int = aten::__getitem__(%1746, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1748 : bool = aten::eq(%1747, %fold.181) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1748) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1750 : Tensor = aten::slice(%1733, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1751 : Tensor = aten::slice(%1750, %33, %34, %fold.181, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1752 : Tensor = aten::slice(%1751, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1753 : Tensor = aten::slice(%1752, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1754 : Tensor = aten::slice(%center.326, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1755 : int = aten::mul(%fold.181, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1756 : Tensor = aten::slice(%1754, %33, %1755, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1757 : Tensor = aten::slice(%1756, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1758 : Tensor = aten::slice(%1757, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1759 : Tensor[] = prim::ListConstruct(%1753, %left_fold_2fold.200, %1758)
                    %1760 : Tensor = aten::cat(%1759, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.123 : Tensor = aten::conv2d(%1760, %self.temp2.downc1.memconv.c2.op.conv.weight, %self.temp2.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.293, %output.123)
                  block1():
                    %input_right.301 : Tensor = prim::unchecked_cast(%input_right.293)
                    %left_fold_2fold.202 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.17)
                    %center.330 : Tensor? = prim::GetAttr[name="center"](%c2.17)
                    %1772 : bool = aten::__is__(%center.330, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1773 : bool = aten::__not__(%1772) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.332 : Tensor, %left_fold_2fold.204 : Tensor = prim::If(%1773) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.334 : Tensor = prim::unchecked_cast(%center.330)
                        -> (%center.334, %left_fold_2fold.202)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1777 : int[] = aten::size(%center.332) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.150 : int, %c.112 : int, %h.150 : int, %w.150 : int = prim::ListUnpack(%1777)
                    %fold.183 : int = aten::floordiv(%c.112, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1783 : int[] = aten::size(%left_fold_2fold.204) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1784 : int = aten::__getitem__(%1783, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1785 : bool = aten::eq(%1784, %fold.183) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1785) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1787 : Tensor = aten::slice(%input_right.301, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1788 : Tensor = aten::slice(%1787, %33, %34, %fold.183, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1789 : Tensor = aten::slice(%1788, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1790 : Tensor = aten::slice(%1789, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1791 : Tensor = aten::slice(%center.332, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1792 : int = aten::mul(%fold.183, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1793 : Tensor = aten::slice(%1791, %33, %1792, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1794 : Tensor = aten::slice(%1793, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1795 : Tensor = aten::slice(%1794, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1796 : Tensor[] = prim::ListConstruct(%1790, %left_fold_2fold.204, %1795)
                    %1797 : Tensor = aten::cat(%1796, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.125 : Tensor = aten::conv2d(%1797, %self.temp2.downc1.memconv.c2.op.conv.weight, %self.temp2.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.301, %output.125)
                %center.336 : Tensor? = prim::GetAttr[name="center"](%c2.17)
                %fold.185 : int = prim::GetAttr[name="fold"](%c2.17)
                %1807 : bool = aten::__isnot__(%center.336, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.288 : Tensor = prim::If(%1807) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.290 : Tensor = prim::unchecked_cast(%center.336)
                    -> (%x.290)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %1810 : Tensor = aten::slice(%x.288, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1811 : int = aten::mul(%fold.185, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %1812 : Tensor = aten::slice(%1810, %33, %fold.185, %1811, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1813 : Tensor = aten::slice(%1812, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1814 : Tensor = aten::slice(%1813, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.17, %1814)
                %1815 : bool = aten::__isnot__(%input_right.299, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%1815) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.303 : Tensor = prim::unchecked_cast(%input_right.299)
                     = prim::SetAttr[name="center"](%c2.17, %input_right.303)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.17, %34)
                    -> ()
                -> (%output.121)
            %1817 : bool = aten::__isnot__(%x.286, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x2.20 : Tensor? = prim::If(%1817) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.292 : Tensor = prim::unchecked_cast(%x.286)
                %x.294 : Tensor = aten::hardtanh_(%x.292, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.294)
              block1():
                -> (%x.286)
            %upc2.4 : __torch__.upscale.model.bsvd.model.___torch_mangle_45.UpBlock = prim::GetAttr[name="upc2"](%temp2.1)
            %memconv.19 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%upc2.4)
            %c1.19 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.19)
            %1824 : bool = aten::__isnot__(%x2.20, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.305 : Tensor? = prim::If(%1824) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.307 : Tensor = prim::unchecked_cast(%x2.20)
                %1827 : int[] = aten::size(%input_right.307) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %1828 : int, %1829 : int, %1830 : int, %1831 : int = prim::ListUnpack(%1827)
                 = prim::SetAttr[name="n"](%c1.19, %1828)
                 = prim::SetAttr[name="c"](%c1.19, %1829)
                 = prim::SetAttr[name="h"](%c1.19, %1830)
                 = prim::SetAttr[name="w"](%c1.19, %1831)
                %c.114 : int = prim::GetAttr[name="c"](%c1.19)
                %1833 : int = aten::floordiv(%c.114, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.19, %1833)
                -> (%input_right.307)
              block1():
                -> (%x2.20)
            %center.338 : Tensor? = prim::GetAttr[name="center"](%c1.19)
            %1835 : bool = aten::__is__(%center.338, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.296 : Tensor? = prim::If(%1835) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %1837 : bool = aten::__isnot__(%input_right.305, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%1837) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.309 : Tensor = prim::unchecked_cast(%input_right.305)
                    %left_fold_2fold.206 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.19)
                    %1840 : int[] = aten::size(%left_fold_2fold.206) # <string>:13:9
                    %1841 : int = aten::__getitem__(%1840, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %1842 : bool = aten::eq(%1841, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%1842) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.152 : int = prim::GetAttr[name="n"](%c1.19)
                        %fold.187 : int = prim::GetAttr[name="fold"](%c1.19)
                        %h.152 : int = prim::GetAttr[name="h"](%c1.19)
                        %w.152 : int = prim::GetAttr[name="w"](%c1.19)
                        %1847 : int[] = prim::ListConstruct(%n.152, %fold.187, %h.152, %w.152)
                        %1848 : Tensor = aten::zeros(%1847, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.19, %1848)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.19, %input_right.309)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.19, %34)
                    -> ()
                -> (%34)
              block1():
                %1849 : bool = aten::__is__(%input_right.305, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.311 : Tensor?, %output.127 : Tensor = prim::If(%1849) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.340 : Tensor? = prim::GetAttr[name="center"](%c1.19)
                    %1853 : bool = aten::__isnot__(%center.340, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%1853) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.208 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.19)
                    %center.342 : Tensor? = prim::GetAttr[name="center"](%c1.19)
                    %n.154 : int = prim::GetAttr[name="n"](%c1.19)
                    %fold.189 : int = prim::GetAttr[name="fold"](%c1.19)
                    %h.154 : int = prim::GetAttr[name="h"](%c1.19)
                    %w.154 : int = prim::GetAttr[name="w"](%c1.19)
                    %1861 : int[] = prim::ListConstruct(%n.154, %fold.189, %h.154, %w.154)
                    %1862 : Tensor = aten::zeros(%1861, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %1864 : bool = aten::__is__(%center.342, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1865 : bool = aten::__not__(%1864) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.344 : Tensor, %left_fold_2fold.210 : Tensor = prim::If(%1865) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.346 : Tensor = prim::unchecked_cast(%center.342)
                        -> (%center.346, %left_fold_2fold.208)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1869 : int[] = aten::size(%center.344) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.156 : int, %c.116 : int, %h.156 : int, %w.156 : int = prim::ListUnpack(%1869)
                    %fold.191 : int = aten::floordiv(%c.116, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1875 : int[] = aten::size(%left_fold_2fold.210) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1876 : int = aten::__getitem__(%1875, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1877 : bool = aten::eq(%1876, %fold.191) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1877) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1879 : Tensor = aten::slice(%1862, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1880 : Tensor = aten::slice(%1879, %33, %34, %fold.191, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1881 : Tensor = aten::slice(%1880, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1882 : Tensor = aten::slice(%1881, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1883 : Tensor = aten::slice(%center.344, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1884 : int = aten::mul(%fold.191, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1885 : Tensor = aten::slice(%1883, %33, %1884, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1886 : Tensor = aten::slice(%1885, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1887 : Tensor = aten::slice(%1886, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1888 : Tensor[] = prim::ListConstruct(%1882, %left_fold_2fold.210, %1887)
                    %1889 : Tensor = aten::cat(%1888, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.129 : Tensor = aten::conv2d(%1889, %self.temp2.upc2.memconv.c1.op.conv.weight, %self.temp2.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.305, %output.129)
                  block1():
                    %input_right.313 : Tensor = prim::unchecked_cast(%input_right.305)
                    %left_fold_2fold.212 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.19)
                    %center.348 : Tensor? = prim::GetAttr[name="center"](%c1.19)
                    %1901 : bool = aten::__is__(%center.348, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1902 : bool = aten::__not__(%1901) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.350 : Tensor, %left_fold_2fold.214 : Tensor = prim::If(%1902) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.352 : Tensor = prim::unchecked_cast(%center.348)
                        -> (%center.352, %left_fold_2fold.212)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1906 : int[] = aten::size(%center.350) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.158 : int, %c.118 : int, %h.158 : int, %w.158 : int = prim::ListUnpack(%1906)
                    %fold.193 : int = aten::floordiv(%c.118, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %1912 : int[] = aten::size(%left_fold_2fold.214) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1913 : int = aten::__getitem__(%1912, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %1914 : bool = aten::eq(%1913, %fold.193) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%1914) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %1916 : Tensor = aten::slice(%input_right.313, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1917 : Tensor = aten::slice(%1916, %33, %34, %fold.193, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1918 : Tensor = aten::slice(%1917, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1919 : Tensor = aten::slice(%1918, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %1920 : Tensor = aten::slice(%center.350, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1921 : int = aten::mul(%fold.193, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %1922 : Tensor = aten::slice(%1920, %33, %1921, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1923 : Tensor = aten::slice(%1922, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1924 : Tensor = aten::slice(%1923, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %1925 : Tensor[] = prim::ListConstruct(%1919, %left_fold_2fold.214, %1924)
                    %1926 : Tensor = aten::cat(%1925, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.131 : Tensor = aten::conv2d(%1926, %self.temp2.upc2.memconv.c1.op.conv.weight, %self.temp2.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.313, %output.131)
                %center.354 : Tensor? = prim::GetAttr[name="center"](%c1.19)
                %fold.195 : int = prim::GetAttr[name="fold"](%c1.19)
                %1936 : bool = aten::__isnot__(%center.354, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.298 : Tensor = prim::If(%1936) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.300 : Tensor = prim::unchecked_cast(%center.354)
                    -> (%x.300)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %1939 : Tensor = aten::slice(%x.298, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1940 : int = aten::mul(%fold.195, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %1941 : Tensor = aten::slice(%1939, %33, %fold.195, %1940, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1942 : Tensor = aten::slice(%1941, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %1943 : Tensor = aten::slice(%1942, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.19, %1943)
                %1944 : bool = aten::__isnot__(%input_right.311, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%1944) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.315 : Tensor = prim::unchecked_cast(%input_right.311)
                     = prim::SetAttr[name="center"](%c1.19, %input_right.315)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.19, %34)
                    -> ()
                -> (%output.127)
            %1946 : bool = aten::__isnot__(%x.296, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.302 : Tensor? = prim::If(%1946) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.304 : Tensor = prim::unchecked_cast(%x.296)
                %x.306 : Tensor = aten::hardtanh_(%x.304, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.306)
              block1():
                -> (%x.296)
            %c2.19 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.19)
            %1951 : bool = aten::__isnot__(%x.302, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.317 : Tensor? = prim::If(%1951) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.319 : Tensor = prim::unchecked_cast(%x.302)
                %1954 : int[] = aten::size(%input_right.319) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %1955 : int, %1956 : int, %1957 : int, %1958 : int = prim::ListUnpack(%1954)
                 = prim::SetAttr[name="n"](%c2.19, %1955)
                 = prim::SetAttr[name="c"](%c2.19, %1956)
                 = prim::SetAttr[name="h"](%c2.19, %1957)
                 = prim::SetAttr[name="w"](%c2.19, %1958)
                %c.120 : int = prim::GetAttr[name="c"](%c2.19)
                %1960 : int = aten::floordiv(%c.120, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.19, %1960)
                -> (%input_right.319)
              block1():
                -> (%x.302)
            %center.356 : Tensor? = prim::GetAttr[name="center"](%c2.19)
            %1962 : bool = aten::__is__(%center.356, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.308 : Tensor? = prim::If(%1962) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %1964 : bool = aten::__isnot__(%input_right.317, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%1964) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.321 : Tensor = prim::unchecked_cast(%input_right.317)
                    %left_fold_2fold.216 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.19)
                    %1967 : int[] = aten::size(%left_fold_2fold.216) # <string>:13:9
                    %1968 : int = aten::__getitem__(%1967, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %1969 : bool = aten::eq(%1968, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%1969) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.160 : int = prim::GetAttr[name="n"](%c2.19)
                        %fold.197 : int = prim::GetAttr[name="fold"](%c2.19)
                        %h.160 : int = prim::GetAttr[name="h"](%c2.19)
                        %w.160 : int = prim::GetAttr[name="w"](%c2.19)
                        %1974 : int[] = prim::ListConstruct(%n.160, %fold.197, %h.160, %w.160)
                        %1975 : Tensor = aten::zeros(%1974, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.19, %1975)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.19, %input_right.321)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.19, %34)
                    -> ()
                -> (%34)
              block1():
                %1976 : bool = aten::__is__(%input_right.317, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.323 : Tensor?, %output.133 : Tensor = prim::If(%1976) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.358 : Tensor? = prim::GetAttr[name="center"](%c2.19)
                    %1980 : bool = aten::__isnot__(%center.358, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%1980) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.218 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.19)
                    %center.360 : Tensor? = prim::GetAttr[name="center"](%c2.19)
                    %n.162 : int = prim::GetAttr[name="n"](%c2.19)
                    %fold.199 : int = prim::GetAttr[name="fold"](%c2.19)
                    %h.162 : int = prim::GetAttr[name="h"](%c2.19)
                    %w.162 : int = prim::GetAttr[name="w"](%c2.19)
                    %1988 : int[] = prim::ListConstruct(%n.162, %fold.199, %h.162, %w.162)
                    %1989 : Tensor = aten::zeros(%1988, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %1991 : bool = aten::__is__(%center.360, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %1992 : bool = aten::__not__(%1991) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.362 : Tensor, %left_fold_2fold.220 : Tensor = prim::If(%1992) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.364 : Tensor = prim::unchecked_cast(%center.360)
                        -> (%center.364, %left_fold_2fold.218)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %1996 : int[] = aten::size(%center.362) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.164 : int, %c.122 : int, %h.164 : int, %w.164 : int = prim::ListUnpack(%1996)
                    %fold.201 : int = aten::floordiv(%c.122, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %2002 : int[] = aten::size(%left_fold_2fold.220) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2003 : int = aten::__getitem__(%2002, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2004 : bool = aten::eq(%2003, %fold.201) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%2004) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %2006 : Tensor = aten::slice(%1989, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2007 : Tensor = aten::slice(%2006, %33, %34, %fold.201, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2008 : Tensor = aten::slice(%2007, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2009 : Tensor = aten::slice(%2008, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2010 : Tensor = aten::slice(%center.362, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2011 : int = aten::mul(%fold.201, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %2012 : Tensor = aten::slice(%2010, %33, %2011, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2013 : Tensor = aten::slice(%2012, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2014 : Tensor = aten::slice(%2013, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2015 : Tensor[] = prim::ListConstruct(%2009, %left_fold_2fold.220, %2014)
                    %2016 : Tensor = aten::cat(%2015, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.135 : Tensor = aten::conv2d(%2016, %self.temp2.upc2.memconv.c2.op.conv.weight, %self.temp2.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.317, %output.135)
                  block1():
                    %input_right.325 : Tensor = prim::unchecked_cast(%input_right.317)
                    %left_fold_2fold.222 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.19)
                    %center.366 : Tensor? = prim::GetAttr[name="center"](%c2.19)
                    %2028 : bool = aten::__is__(%center.366, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %2029 : bool = aten::__not__(%2028) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.368 : Tensor, %left_fold_2fold.224 : Tensor = prim::If(%2029) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.370 : Tensor = prim::unchecked_cast(%center.366)
                        -> (%center.370, %left_fold_2fold.222)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %2033 : int[] = aten::size(%center.368) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.166 : int, %c.124 : int, %h.166 : int, %w.166 : int = prim::ListUnpack(%2033)
                    %fold.203 : int = aten::floordiv(%c.124, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %2039 : int[] = aten::size(%left_fold_2fold.224) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2040 : int = aten::__getitem__(%2039, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2041 : bool = aten::eq(%2040, %fold.203) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%2041) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %2043 : Tensor = aten::slice(%input_right.325, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2044 : Tensor = aten::slice(%2043, %33, %34, %fold.203, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2045 : Tensor = aten::slice(%2044, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2046 : Tensor = aten::slice(%2045, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2047 : Tensor = aten::slice(%center.368, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2048 : int = aten::mul(%fold.203, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %2049 : Tensor = aten::slice(%2047, %33, %2048, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2050 : Tensor = aten::slice(%2049, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2051 : Tensor = aten::slice(%2050, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2052 : Tensor[] = prim::ListConstruct(%2046, %left_fold_2fold.224, %2051)
                    %2053 : Tensor = aten::cat(%2052, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.137 : Tensor = aten::conv2d(%2053, %self.temp2.upc2.memconv.c2.op.conv.weight, %self.temp2.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.325, %output.137)
                %center.372 : Tensor? = prim::GetAttr[name="center"](%c2.19)
                %fold.205 : int = prim::GetAttr[name="fold"](%c2.19)
                %2063 : bool = aten::__isnot__(%center.372, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.310 : Tensor = prim::If(%2063) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.312 : Tensor = prim::unchecked_cast(%center.372)
                    -> (%x.312)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %2066 : Tensor = aten::slice(%x.310, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %2067 : int = aten::mul(%fold.205, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %2068 : Tensor = aten::slice(%2066, %33, %fold.205, %2067, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %2069 : Tensor = aten::slice(%2068, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %2070 : Tensor = aten::slice(%2069, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.19, %2070)
                %2071 : bool = aten::__isnot__(%input_right.323, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%2071) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.327 : Tensor = prim::unchecked_cast(%input_right.323)
                     = prim::SetAttr[name="center"](%c2.19, %input_right.327)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.19, %34)
                    -> ()
                -> (%output.133)
            %2073 : bool = aten::__isnot__(%x.308, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x.314 : Tensor? = prim::If(%2073) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.316 : Tensor = prim::unchecked_cast(%x.308)
                %x.318 : Tensor = aten::hardtanh_(%x.316, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.318)
              block1():
                -> (%x.308)
            %2077 : bool = aten::__isnot__(%x.314, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
            %x2.22 : Tensor? = prim::If(%2077) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
              block0():
                %x.320 : Tensor = prim::unchecked_cast(%x.314)
                %input.55 : Tensor = aten::conv2d(%x.320, %self.temp2.upc2.convblock.0.weight, %self.temp2.upc2.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.322 : Tensor = aten::pixel_shuffle(%input.55, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
                -> (%x.322)
              block1():
                -> (%x.314)
            %upc1.4 : __torch__.upscale.model.bsvd.model.___torch_mangle_49.UpBlock = prim::GetAttr[name="upc1"](%temp2.1)
            %2091 : bool = aten::__isnot__(%x2.22, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %2092 : Tensor? = prim::If(%2091) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list.29 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.7)
                %2094 : Tensor = aten::pop(%mem_list.29, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%2094)
              block1():
                -> (%34)
            %2095 : bool = aten::__is__(%x2.22, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
            %2096 : bool, %x1.56 : Tensor? = prim::If(%2095) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
              block0():
                -> (%35, %x2.22)
              block1():
                %x1.58 : Tensor = prim::unchecked_cast(%x2.22)
                %2099 : bool = aten::__is__(%2092, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
                -> (%2099, %x1.58)
            %2100 : Tensor? = prim::If(%2096) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
              block0():
                -> (%34)
              block1():
                %x1.60 : Tensor = prim::unchecked_cast(%x1.56)
                %x2.24 : Tensor = prim::unchecked_cast(%2092)
                %2103 : Tensor = aten::add(%x1.60, %x2.24, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
                -> (%2103)
            %memconv.21 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%upc1.4)
            %c1.21 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.21)
            %2106 : bool = aten::__isnot__(%2100, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.329 : Tensor? = prim::If(%2106) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.331 : Tensor = prim::unchecked_cast(%2100)
                %2109 : int[] = aten::size(%input_right.331) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %2110 : int, %2111 : int, %2112 : int, %2113 : int = prim::ListUnpack(%2109)
                 = prim::SetAttr[name="n"](%c1.21, %2110)
                 = prim::SetAttr[name="c"](%c1.21, %2111)
                 = prim::SetAttr[name="h"](%c1.21, %2112)
                 = prim::SetAttr[name="w"](%c1.21, %2113)
                %c.126 : int = prim::GetAttr[name="c"](%c1.21)
                %2115 : int = aten::floordiv(%c.126, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.21, %2115)
                -> (%input_right.331)
              block1():
                -> (%2100)
            %center.374 : Tensor? = prim::GetAttr[name="center"](%c1.21)
            %2117 : bool = aten::__is__(%center.374, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.324 : Tensor? = prim::If(%2117) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %2119 : bool = aten::__isnot__(%input_right.329, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%2119) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.333 : Tensor = prim::unchecked_cast(%input_right.329)
                    %left_fold_2fold.226 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.21)
                    %2122 : int[] = aten::size(%left_fold_2fold.226) # <string>:13:9
                    %2123 : int = aten::__getitem__(%2122, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %2124 : bool = aten::eq(%2123, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%2124) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.168 : int = prim::GetAttr[name="n"](%c1.21)
                        %fold.207 : int = prim::GetAttr[name="fold"](%c1.21)
                        %h.168 : int = prim::GetAttr[name="h"](%c1.21)
                        %w.168 : int = prim::GetAttr[name="w"](%c1.21)
                        %2129 : int[] = prim::ListConstruct(%n.168, %fold.207, %h.168, %w.168)
                        %2130 : Tensor = aten::zeros(%2129, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.21, %2130)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.21, %input_right.333)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.21, %34)
                    -> ()
                -> (%34)
              block1():
                %2131 : bool = aten::__is__(%input_right.329, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.335 : Tensor?, %output.139 : Tensor = prim::If(%2131) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.376 : Tensor? = prim::GetAttr[name="center"](%c1.21)
                    %2135 : bool = aten::__isnot__(%center.376, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%2135) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.228 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.21)
                    %center.378 : Tensor? = prim::GetAttr[name="center"](%c1.21)
                    %n.170 : int = prim::GetAttr[name="n"](%c1.21)
                    %fold.209 : int = prim::GetAttr[name="fold"](%c1.21)
                    %h.170 : int = prim::GetAttr[name="h"](%c1.21)
                    %w.170 : int = prim::GetAttr[name="w"](%c1.21)
                    %2143 : int[] = prim::ListConstruct(%n.170, %fold.209, %h.170, %w.170)
                    %2144 : Tensor = aten::zeros(%2143, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %2146 : bool = aten::__is__(%center.378, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %2147 : bool = aten::__not__(%2146) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.380 : Tensor, %left_fold_2fold.230 : Tensor = prim::If(%2147) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.382 : Tensor = prim::unchecked_cast(%center.378)
                        -> (%center.382, %left_fold_2fold.228)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %2151 : int[] = aten::size(%center.380) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.172 : int, %c.128 : int, %h.172 : int, %w.172 : int = prim::ListUnpack(%2151)
                    %fold.211 : int = aten::floordiv(%c.128, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %2157 : int[] = aten::size(%left_fold_2fold.230) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2158 : int = aten::__getitem__(%2157, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2159 : bool = aten::eq(%2158, %fold.211) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%2159) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %2161 : Tensor = aten::slice(%2144, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2162 : Tensor = aten::slice(%2161, %33, %34, %fold.211, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2163 : Tensor = aten::slice(%2162, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2164 : Tensor = aten::slice(%2163, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2165 : Tensor = aten::slice(%center.380, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2166 : int = aten::mul(%fold.211, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %2167 : Tensor = aten::slice(%2165, %33, %2166, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2168 : Tensor = aten::slice(%2167, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2169 : Tensor = aten::slice(%2168, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2170 : Tensor[] = prim::ListConstruct(%2164, %left_fold_2fold.230, %2169)
                    %2171 : Tensor = aten::cat(%2170, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.141 : Tensor = aten::conv2d(%2171, %self.temp2.upc1.memconv.c1.op.conv.weight, %self.temp2.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.329, %output.141)
                  block1():
                    %input_right.337 : Tensor = prim::unchecked_cast(%input_right.329)
                    %left_fold_2fold.232 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.21)
                    %center.384 : Tensor? = prim::GetAttr[name="center"](%c1.21)
                    %2183 : bool = aten::__is__(%center.384, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %2184 : bool = aten::__not__(%2183) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.386 : Tensor, %left_fold_2fold.234 : Tensor = prim::If(%2184) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.388 : Tensor = prim::unchecked_cast(%center.384)
                        -> (%center.388, %left_fold_2fold.232)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %2188 : int[] = aten::size(%center.386) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.174 : int, %c.130 : int, %h.174 : int, %w.174 : int = prim::ListUnpack(%2188)
                    %fold.213 : int = aten::floordiv(%c.130, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %2194 : int[] = aten::size(%left_fold_2fold.234) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2195 : int = aten::__getitem__(%2194, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2196 : bool = aten::eq(%2195, %fold.213) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%2196) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %2198 : Tensor = aten::slice(%input_right.337, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2199 : Tensor = aten::slice(%2198, %33, %34, %fold.213, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2200 : Tensor = aten::slice(%2199, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2201 : Tensor = aten::slice(%2200, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2202 : Tensor = aten::slice(%center.386, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2203 : int = aten::mul(%fold.213, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %2204 : Tensor = aten::slice(%2202, %33, %2203, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2205 : Tensor = aten::slice(%2204, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2206 : Tensor = aten::slice(%2205, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2207 : Tensor[] = prim::ListConstruct(%2201, %left_fold_2fold.234, %2206)
                    %2208 : Tensor = aten::cat(%2207, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.143 : Tensor = aten::conv2d(%2208, %self.temp2.upc1.memconv.c1.op.conv.weight, %self.temp2.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.337, %output.143)
                %center.390 : Tensor? = prim::GetAttr[name="center"](%c1.21)
                %fold.215 : int = prim::GetAttr[name="fold"](%c1.21)
                %2218 : bool = aten::__isnot__(%center.390, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.326 : Tensor = prim::If(%2218) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.328 : Tensor = prim::unchecked_cast(%center.390)
                    -> (%x.328)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %2221 : Tensor = aten::slice(%x.326, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %2222 : int = aten::mul(%fold.215, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %2223 : Tensor = aten::slice(%2221, %33, %fold.215, %2222, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %2224 : Tensor = aten::slice(%2223, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %2225 : Tensor = aten::slice(%2224, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.21, %2225)
                %2226 : bool = aten::__isnot__(%input_right.335, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%2226) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.339 : Tensor = prim::unchecked_cast(%input_right.335)
                     = prim::SetAttr[name="center"](%c1.21, %input_right.339)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.21, %34)
                    -> ()
                -> (%output.139)
            %2228 : bool = aten::__isnot__(%x.324, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.330 : Tensor? = prim::If(%2228) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.332 : Tensor = prim::unchecked_cast(%x.324)
                %x.334 : Tensor = aten::hardtanh_(%x.332, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.334)
              block1():
                -> (%x.324)
            %c2.21 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.21)
            %2233 : bool = aten::__isnot__(%x.330, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.341 : Tensor? = prim::If(%2233) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.343 : Tensor = prim::unchecked_cast(%x.330)
                %2236 : int[] = aten::size(%input_right.343) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %2237 : int, %2238 : int, %2239 : int, %2240 : int = prim::ListUnpack(%2236)
                 = prim::SetAttr[name="n"](%c2.21, %2237)
                 = prim::SetAttr[name="c"](%c2.21, %2238)
                 = prim::SetAttr[name="h"](%c2.21, %2239)
                 = prim::SetAttr[name="w"](%c2.21, %2240)
                %c.132 : int = prim::GetAttr[name="c"](%c2.21)
                %2242 : int = aten::floordiv(%c.132, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.21, %2242)
                -> (%input_right.343)
              block1():
                -> (%x.330)
            %center.392 : Tensor? = prim::GetAttr[name="center"](%c2.21)
            %2244 : bool = aten::__is__(%center.392, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.336 : Tensor? = prim::If(%2244) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %2246 : bool = aten::__isnot__(%input_right.341, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%2246) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.345 : Tensor = prim::unchecked_cast(%input_right.341)
                    %left_fold_2fold.236 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.21)
                    %2249 : int[] = aten::size(%left_fold_2fold.236) # <string>:13:9
                    %2250 : int = aten::__getitem__(%2249, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %2251 : bool = aten::eq(%2250, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%2251) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.176 : int = prim::GetAttr[name="n"](%c2.21)
                        %fold.217 : int = prim::GetAttr[name="fold"](%c2.21)
                        %h.176 : int = prim::GetAttr[name="h"](%c2.21)
                        %w.176 : int = prim::GetAttr[name="w"](%c2.21)
                        %2256 : int[] = prim::ListConstruct(%n.176, %fold.217, %h.176, %w.176)
                        %2257 : Tensor = aten::zeros(%2256, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.21, %2257)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.21, %input_right.345)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.21, %34)
                    -> ()
                -> (%34)
              block1():
                %2258 : bool = aten::__is__(%input_right.341, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.347 : Tensor?, %output.145 : Tensor = prim::If(%2258) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.394 : Tensor? = prim::GetAttr[name="center"](%c2.21)
                    %2262 : bool = aten::__isnot__(%center.394, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%2262) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.238 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.21)
                    %center.396 : Tensor? = prim::GetAttr[name="center"](%c2.21)
                    %n.178 : int = prim::GetAttr[name="n"](%c2.21)
                    %fold.219 : int = prim::GetAttr[name="fold"](%c2.21)
                    %h.178 : int = prim::GetAttr[name="h"](%c2.21)
                    %w.178 : int = prim::GetAttr[name="w"](%c2.21)
                    %2270 : int[] = prim::ListConstruct(%n.178, %fold.219, %h.178, %w.178)
                    %2271 : Tensor = aten::zeros(%2270, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %2273 : bool = aten::__is__(%center.396, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %2274 : bool = aten::__not__(%2273) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.398 : Tensor, %left_fold_2fold.240 : Tensor = prim::If(%2274) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.400 : Tensor = prim::unchecked_cast(%center.396)
                        -> (%center.400, %left_fold_2fold.238)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %2278 : int[] = aten::size(%center.398) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.180 : int, %c.134 : int, %h.180 : int, %w.180 : int = prim::ListUnpack(%2278)
                    %fold.221 : int = aten::floordiv(%c.134, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %2284 : int[] = aten::size(%left_fold_2fold.240) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2285 : int = aten::__getitem__(%2284, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2286 : bool = aten::eq(%2285, %fold.221) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%2286) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %2288 : Tensor = aten::slice(%2271, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2289 : Tensor = aten::slice(%2288, %33, %34, %fold.221, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2290 : Tensor = aten::slice(%2289, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2291 : Tensor = aten::slice(%2290, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2292 : Tensor = aten::slice(%center.398, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2293 : int = aten::mul(%fold.221, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %2294 : Tensor = aten::slice(%2292, %33, %2293, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2295 : Tensor = aten::slice(%2294, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2296 : Tensor = aten::slice(%2295, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2297 : Tensor[] = prim::ListConstruct(%2291, %left_fold_2fold.240, %2296)
                    %2298 : Tensor = aten::cat(%2297, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.147 : Tensor = aten::conv2d(%2298, %self.temp2.upc1.memconv.c2.op.conv.weight, %self.temp2.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.341, %output.147)
                  block1():
                    %input_right.349 : Tensor = prim::unchecked_cast(%input_right.341)
                    %left_fold_2fold.242 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.21)
                    %center.402 : Tensor? = prim::GetAttr[name="center"](%c2.21)
                    %2310 : bool = aten::__is__(%center.402, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %2311 : bool = aten::__not__(%2310) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.404 : Tensor, %left_fold_2fold.244 : Tensor = prim::If(%2311) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.406 : Tensor = prim::unchecked_cast(%center.402)
                        -> (%center.406, %left_fold_2fold.242)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %2315 : int[] = aten::size(%center.404) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.182 : int, %c.136 : int, %h.182 : int, %w.182 : int = prim::ListUnpack(%2315)
                    %fold.223 : int = aten::floordiv(%c.136, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %2321 : int[] = aten::size(%left_fold_2fold.244) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2322 : int = aten::__getitem__(%2321, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %2323 : bool = aten::eq(%2322, %fold.223) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%2323) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %2325 : Tensor = aten::slice(%input_right.349, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2326 : Tensor = aten::slice(%2325, %33, %34, %fold.223, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2327 : Tensor = aten::slice(%2326, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2328 : Tensor = aten::slice(%2327, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %2329 : Tensor = aten::slice(%center.404, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2330 : int = aten::mul(%fold.223, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %2331 : Tensor = aten::slice(%2329, %33, %2330, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2332 : Tensor = aten::slice(%2331, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2333 : Tensor = aten::slice(%2332, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %2334 : Tensor[] = prim::ListConstruct(%2328, %left_fold_2fold.244, %2333)
                    %2335 : Tensor = aten::cat(%2334, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.149 : Tensor = aten::conv2d(%2335, %self.temp2.upc1.memconv.c2.op.conv.weight, %self.temp2.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.349, %output.149)
                %center.408 : Tensor? = prim::GetAttr[name="center"](%c2.21)
                %fold.225 : int = prim::GetAttr[name="fold"](%c2.21)
                %2345 : bool = aten::__isnot__(%center.408, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.338 : Tensor = prim::If(%2345) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.340 : Tensor = prim::unchecked_cast(%center.408)
                    -> (%x.340)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %2348 : Tensor = aten::slice(%x.338, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %2349 : int = aten::mul(%fold.225, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %2350 : Tensor = aten::slice(%2348, %33, %fold.225, %2349, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %2351 : Tensor = aten::slice(%2350, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %2352 : Tensor = aten::slice(%2351, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.21, %2352)
                %2353 : bool = aten::__isnot__(%input_right.347, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%2353) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.351 : Tensor = prim::unchecked_cast(%input_right.347)
                     = prim::SetAttr[name="center"](%c2.21, %input_right.351)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.21, %34)
                    -> ()
                -> (%output.145)
            %2355 : bool = aten::__isnot__(%x.336, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x.342 : Tensor? = prim::If(%2355) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.344 : Tensor = prim::unchecked_cast(%x.336)
                %x.346 : Tensor = aten::hardtanh_(%x.344, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.346)
              block1():
                -> (%x.336)
            %2359 : bool = aten::__isnot__(%x.342, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
            %x1.62 : Tensor? = prim::If(%2359) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
              block0():
                %x.348 : Tensor = prim::unchecked_cast(%x.342)
                %input.57 : Tensor = aten::conv2d(%x.348, %self.temp2.upc1.convblock.0.weight, %self.temp2.upc1.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.350 : Tensor = aten::pixel_shuffle(%input.57, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
                -> (%x.350)
              block1():
                -> (%x.342)
            %2373 : bool = aten::__isnot__(%x1.62, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %2374 : Tensor? = prim::If(%2373) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list.31 : Tensor[] = prim::GetAttr[name="mem_list"](%skip2.7)
                %2376 : Tensor = aten::pop(%mem_list.31, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%2376)
              block1():
                -> (%34)
            %2377 : bool = aten::__is__(%x1.62, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
            %2378 : bool, %x1.64 : Tensor? = prim::If(%2377) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
              block0():
                -> (%35, %x1.62)
              block1():
                %x1.66 : Tensor = prim::unchecked_cast(%x1.62)
                %2381 : bool = aten::__is__(%2374, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
                -> (%2381, %x1.66)
            %2382 : Tensor? = prim::If(%2378) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
              block0():
                -> (%34)
              block1():
                %x1.68 : Tensor = prim::unchecked_cast(%x1.64)
                %x2.26 : Tensor = prim::unchecked_cast(%2374)
                %2385 : Tensor = aten::add(%x1.68, %x2.26, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
                -> (%2385)
            %2386 : bool = aten::__is__(%2382, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:11
            %x.352 : Tensor? = prim::If(%2386) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:8
              block0():
                -> (%34)
              block1():
                %x.354 : Tensor = prim::unchecked_cast(%2382)
                %input.59 : Tensor = aten::conv2d(%x.354, %self.temp2.outc.convblock.0.weight, %self.temp2.outc.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %input.61 : Tensor = aten::hardtanh_(%input.59, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                %input.63 : Tensor = aten::conv2d(%input.61, %self.temp2.outc.convblock.3.weight, %self.temp2.outc.convblock.3.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input.63)
            %2406 : bool = aten::__isnot__(%x.352, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %2407 : Tensor? = prim::If(%2406) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list.33 : Tensor[] = prim::GetAttr[name="mem_list"](%skip1.7)
                %2409 : Tensor = aten::pop(%mem_list.33, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%2409)
              block1():
                -> (%34)
            %2410 : bool = aten::__is__(%2407, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
            %2411 : bool, %x1.70 : Tensor? = prim::If(%2410) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
              block0():
                -> (%35, %2407)
              block1():
                %x1.72 : Tensor = prim::unchecked_cast(%2407)
                %2414 : bool = aten::__is__(%x.352, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:25
                -> (%2414, %x1.72)
            %x_cuda.5 : Tensor? = prim::If(%2411) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:8
              block0():
                -> (%34)
              block1():
                %x1.74 : Tensor = prim::unchecked_cast(%x1.70)
                %x2.28 : Tensor = prim::unchecked_cast(%x.352)
                %2418 : Tensor = aten::slice(%x1.74, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %2419 : Tensor = aten::slice(%2418, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %2420 : Tensor = aten::slice(%2419, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %2421 : Tensor = aten::slice(%2420, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %2422 : Tensor = aten::slice(%x2.28, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %2423 : Tensor = aten::slice(%2422, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %2424 : Tensor = aten::slice(%2423, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %2425 : Tensor = aten::slice(%2424, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %2426 : Tensor = aten::sub(%2421, %2425, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %2427 : Tensor = aten::slice(%x2.28, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %2428 : Tensor = aten::slice(%2427, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %2429 : Tensor = aten::slice(%2428, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %2430 : Tensor = aten::slice(%2429, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %2431 : Tensor = aten::copy_(%2430, %2426, %30) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                -> (%x2.28)
            %2432 : bool = prim::isinstance[types=[Tensor]](%x_cuda.5)
             = prim::If(%2432) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:548:16
              block0():
                %x_cuda.11 : Tensor = prim::unchecked_cast(%x_cuda.5)
                %2434 : Tensor?[] = aten::append(%out_seq.1, %x_cuda.11) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:549:20
                -> ()
              block1():
                %2435 : Tensor?[] = aten::append(%out_seq.1, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:551:20
                -> ()
            -> (%35)
        %temp1.3 : __torch__.upscale.model.bsvd.model.___torch_mangle_24.DenBlock = prim::GetAttr[name="temp1"](%self)
        %downc0.6 : __torch__.upscale.model.bsvd.model.___torch_mangle_31.DownBlock = prim::GetAttr[name="downc0"](%temp1.3)
        %memconv.23 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%downc0.6)
        %c1.23 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.23)
        %center.410 : Tensor? = prim::GetAttr[name="center"](%c1.23)
        %2441 : bool = aten::__is__(%center.410, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.370 : Tensor? = prim::If(%2441) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
             = prim::SetAttr[name="center"](%c1.23, %34)
            -> (%34)
          block1():
            %center.412 : Tensor? = prim::GetAttr[name="center"](%c1.23)
            %2444 : bool = aten::__isnot__(%center.412, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
             = prim::If(%2444) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
              block0():
                -> ()
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                -> ()
            %left_fold_2fold.248 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.23)
            %center.414 : Tensor? = prim::GetAttr[name="center"](%c1.23)
            %n.186 : int = prim::GetAttr[name="n"](%c1.23)
            %fold.229 : int = prim::GetAttr[name="fold"](%c1.23)
            %h.186 : int = prim::GetAttr[name="h"](%c1.23)
            %w.186 : int = prim::GetAttr[name="w"](%c1.23)
            %2452 : int[] = prim::ListConstruct(%n.186, %fold.229, %h.186, %w.186)
            %2453 : Tensor = aten::zeros(%2452, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
            %2455 : bool = aten::__is__(%center.414, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
            %2456 : bool = aten::__not__(%2455) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
            %center.416 : Tensor, %left_fold_2fold.250 : Tensor = prim::If(%2456) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
              block0():
                %center.418 : Tensor = prim::unchecked_cast(%center.414)
                -> (%center.418, %left_fold_2fold.248)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                -> (%37, %37)
            %2460 : int[] = aten::size(%center.416) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
            %n.188 : int, %c.140 : int, %h.188 : int, %w.188 : int = prim::ListUnpack(%2460)
            %fold.231 : int = aten::floordiv(%c.140, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
            %2466 : int[] = aten::size(%left_fold_2fold.250) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
            %2467 : int = aten::__getitem__(%2466, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
            %2468 : bool = aten::eq(%2467, %fold.231) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
             = prim::If(%2468) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
              block0():
                -> ()
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                -> ()
            %2470 : Tensor = aten::slice(%2453, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
            %2471 : Tensor = aten::slice(%2470, %33, %34, %fold.231, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
            %2472 : Tensor = aten::slice(%2471, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
            %2473 : Tensor = aten::slice(%2472, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
            %2474 : Tensor = aten::slice(%center.416, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
            %2475 : int = aten::mul(%fold.231, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
            %2476 : Tensor = aten::slice(%2474, %33, %2475, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
            %2477 : Tensor = aten::slice(%2476, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
            %2478 : Tensor = aten::slice(%2477, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
            %2479 : Tensor[] = prim::ListConstruct(%2473, %left_fold_2fold.250, %2478)
            %2480 : Tensor = aten::cat(%2479, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
            %output.153 : Tensor = aten::conv2d(%2480, %self.temp1.downc0.memconv.c1.op.conv.weight, %self.temp1.downc0.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %center.426 : Tensor? = prim::GetAttr[name="center"](%c1.23)
            %fold.235 : int = prim::GetAttr[name="fold"](%c1.23)
            %2490 : bool = aten::__isnot__(%center.426, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.372 : Tensor = prim::If(%2490) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.374 : Tensor = prim::unchecked_cast(%center.426)
                -> (%x.374)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %2493 : Tensor = aten::slice(%x.372, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2494 : int = aten::mul(%fold.235, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %2495 : Tensor = aten::slice(%2493, %33, %fold.235, %2494, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2496 : Tensor = aten::slice(%2495, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2497 : Tensor = aten::slice(%2496, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c1.23, %2497)
             = prim::SetAttr[name="center"](%c1.23, %34)
            -> (%output.153)
        %2498 : bool = aten::__isnot__(%x.370, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
        %x.376 : Tensor? = prim::If(%2498) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
          block0():
            %x.378 : Tensor = prim::unchecked_cast(%x.370)
            %x.380 : Tensor = aten::hardtanh_(%x.378, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.380)
          block1():
            -> (%x.370)
        %c2.23 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.23)
        %2503 : bool = aten::__isnot__(%x.376, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.365 : Tensor? = prim::If(%2503) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.367 : Tensor = prim::unchecked_cast(%x.376)
            %2506 : int[] = aten::size(%input_right.367) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %2507 : int, %2508 : int, %2509 : int, %2510 : int = prim::ListUnpack(%2506)
             = prim::SetAttr[name="n"](%c2.23, %2507)
             = prim::SetAttr[name="c"](%c2.23, %2508)
             = prim::SetAttr[name="h"](%c2.23, %2509)
             = prim::SetAttr[name="w"](%c2.23, %2510)
            %c.144 : int = prim::GetAttr[name="c"](%c2.23)
            %2512 : int = aten::floordiv(%c.144, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c2.23, %2512)
            -> (%input_right.367)
          block1():
            -> (%x.376)
        %center.428 : Tensor? = prim::GetAttr[name="center"](%c2.23)
        %2514 : bool = aten::__is__(%center.428, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.382 : Tensor? = prim::If(%2514) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %2516 : bool = aten::__isnot__(%input_right.365, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%2516) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.369 : Tensor = prim::unchecked_cast(%input_right.365)
                %left_fold_2fold.256 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.23)
                %2519 : int[] = aten::size(%left_fold_2fold.256) # <string>:13:9
                %2520 : int = aten::__getitem__(%2519, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %2521 : bool = aten::eq(%2520, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%2521) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.192 : int = prim::GetAttr[name="n"](%c2.23)
                    %fold.237 : int = prim::GetAttr[name="fold"](%c2.23)
                    %h.192 : int = prim::GetAttr[name="h"](%c2.23)
                    %w.192 : int = prim::GetAttr[name="w"](%c2.23)
                    %2526 : int[] = prim::ListConstruct(%n.192, %fold.237, %h.192, %w.192)
                    %2527 : Tensor = aten::zeros(%2526, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c2.23, %2527)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c2.23, %input_right.369)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.23, %34)
                -> ()
            -> (%34)
          block1():
            %2528 : bool = aten::__is__(%input_right.365, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.371 : Tensor?, %output.157 : Tensor = prim::If(%2528) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.430 : Tensor? = prim::GetAttr[name="center"](%c2.23)
                %2532 : bool = aten::__isnot__(%center.430, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%2532) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.258 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.23)
                %center.432 : Tensor? = prim::GetAttr[name="center"](%c2.23)
                %n.194 : int = prim::GetAttr[name="n"](%c2.23)
                %fold.239 : int = prim::GetAttr[name="fold"](%c2.23)
                %h.194 : int = prim::GetAttr[name="h"](%c2.23)
                %w.194 : int = prim::GetAttr[name="w"](%c2.23)
                %2540 : int[] = prim::ListConstruct(%n.194, %fold.239, %h.194, %w.194)
                %2541 : Tensor = aten::zeros(%2540, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %2543 : bool = aten::__is__(%center.432, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %2544 : bool = aten::__not__(%2543) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.434 : Tensor, %left_fold_2fold.260 : Tensor = prim::If(%2544) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.436 : Tensor = prim::unchecked_cast(%center.432)
                    -> (%center.436, %left_fold_2fold.258)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %2548 : int[] = aten::size(%center.434) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.196 : int, %c.146 : int, %h.196 : int, %w.196 : int = prim::ListUnpack(%2548)
                %fold.241 : int = aten::floordiv(%c.146, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %2554 : int[] = aten::size(%left_fold_2fold.260) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2555 : int = aten::__getitem__(%2554, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2556 : bool = aten::eq(%2555, %fold.241) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%2556) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %2558 : Tensor = aten::slice(%2541, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2559 : Tensor = aten::slice(%2558, %33, %34, %fold.241, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2560 : Tensor = aten::slice(%2559, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2561 : Tensor = aten::slice(%2560, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2562 : Tensor = aten::slice(%center.434, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2563 : int = aten::mul(%fold.241, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %2564 : Tensor = aten::slice(%2562, %33, %2563, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2565 : Tensor = aten::slice(%2564, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2566 : Tensor = aten::slice(%2565, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2567 : Tensor[] = prim::ListConstruct(%2561, %left_fold_2fold.260, %2566)
                %2568 : Tensor = aten::cat(%2567, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.159 : Tensor = aten::conv2d(%2568, %self.temp1.downc0.memconv.c2.op.conv.weight, %self.temp1.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.365, %output.159)
              block1():
                %input_right.373 : Tensor = prim::unchecked_cast(%input_right.365)
                %left_fold_2fold.262 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.23)
                %center.438 : Tensor? = prim::GetAttr[name="center"](%c2.23)
                %2580 : bool = aten::__is__(%center.438, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %2581 : bool = aten::__not__(%2580) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.440 : Tensor, %left_fold_2fold.264 : Tensor = prim::If(%2581) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.442 : Tensor = prim::unchecked_cast(%center.438)
                    -> (%center.442, %left_fold_2fold.262)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %2585 : int[] = aten::size(%center.440) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.198 : int, %c.148 : int, %h.198 : int, %w.198 : int = prim::ListUnpack(%2585)
                %fold.243 : int = aten::floordiv(%c.148, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %2591 : int[] = aten::size(%left_fold_2fold.264) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2592 : int = aten::__getitem__(%2591, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2593 : bool = aten::eq(%2592, %fold.243) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%2593) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %2595 : Tensor = aten::slice(%input_right.373, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2596 : Tensor = aten::slice(%2595, %33, %34, %fold.243, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2597 : Tensor = aten::slice(%2596, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2598 : Tensor = aten::slice(%2597, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2599 : Tensor = aten::slice(%center.440, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2600 : int = aten::mul(%fold.243, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %2601 : Tensor = aten::slice(%2599, %33, %2600, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2602 : Tensor = aten::slice(%2601, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2603 : Tensor = aten::slice(%2602, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2604 : Tensor[] = prim::ListConstruct(%2598, %left_fold_2fold.264, %2603)
                %2605 : Tensor = aten::cat(%2604, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.161 : Tensor = aten::conv2d(%2605, %self.temp1.downc0.memconv.c2.op.conv.weight, %self.temp1.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.373, %output.161)
            %center.444 : Tensor? = prim::GetAttr[name="center"](%c2.23)
            %fold.245 : int = prim::GetAttr[name="fold"](%c2.23)
            %2615 : bool = aten::__isnot__(%center.444, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.384 : Tensor = prim::If(%2615) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.386 : Tensor = prim::unchecked_cast(%center.444)
                -> (%x.386)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %2618 : Tensor = aten::slice(%x.384, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2619 : int = aten::mul(%fold.245, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %2620 : Tensor = aten::slice(%2618, %33, %fold.245, %2619, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2621 : Tensor = aten::slice(%2620, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2622 : Tensor = aten::slice(%2621, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c2.23, %2622)
            %2623 : bool = aten::__isnot__(%input_right.371, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%2623) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.375 : Tensor = prim::unchecked_cast(%input_right.371)
                 = prim::SetAttr[name="center"](%c2.23, %input_right.375)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.23, %34)
                -> ()
            -> (%output.157)
        %2625 : bool = aten::__isnot__(%x.382, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
        %x1.76 : Tensor? = prim::If(%2625) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
          block0():
            %x.388 : Tensor = prim::unchecked_cast(%x.382)
            %x.390 : Tensor = aten::hardtanh_(%x.388, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.390)
          block1():
            -> (%x.382)
        %skip3.11 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip3"](%temp1.3)
        %2630 : bool = aten::__isnot__(%x1.76, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
         = prim::If(%2630) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
          block0():
            %x.392 : Tensor = prim::unchecked_cast(%x1.76)
            %mem_list.39 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.11)
             = aten::insert(%mem_list.39, %32, %x.392) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
            -> ()
          block1():
            -> ()
        %downc1.6 : __torch__.upscale.model.bsvd.model.___torch_mangle_38.DownBlock = prim::GetAttr[name="downc1"](%temp1.3)
        %2634 : bool = aten::__isnot__(%x1.76, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:11
        %x.394 : Tensor? = prim::If(%2634) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:8
          block0():
            %x.396 : Tensor = prim::unchecked_cast(%x1.76)
            %input.75 : Tensor = aten::conv2d(%x.396, %self.temp1.downc1.convblock.0.weight, %self.temp1.downc1.convblock.0.bias, %7565, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %x.398 : Tensor = aten::hardtanh_(%input.75, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.398)
          block1():
            -> (%x1.76)
        %memconv.25 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%downc1.6)
        %c1.25 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.25)
        %2648 : bool = aten::__isnot__(%x.394, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.377 : Tensor? = prim::If(%2648) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.379 : Tensor = prim::unchecked_cast(%x.394)
            %2651 : int[] = aten::size(%input_right.379) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %2652 : int, %2653 : int, %2654 : int, %2655 : int = prim::ListUnpack(%2651)
             = prim::SetAttr[name="n"](%c1.25, %2652)
             = prim::SetAttr[name="c"](%c1.25, %2653)
             = prim::SetAttr[name="h"](%c1.25, %2654)
             = prim::SetAttr[name="w"](%c1.25, %2655)
            %c.150 : int = prim::GetAttr[name="c"](%c1.25)
            %2657 : int = aten::floordiv(%c.150, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c1.25, %2657)
            -> (%input_right.379)
          block1():
            -> (%x.394)
        %center.446 : Tensor? = prim::GetAttr[name="center"](%c1.25)
        %2659 : bool = aten::__is__(%center.446, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.400 : Tensor? = prim::If(%2659) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %2661 : bool = aten::__isnot__(%input_right.377, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%2661) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.381 : Tensor = prim::unchecked_cast(%input_right.377)
                %left_fold_2fold.266 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.25)
                %2664 : int[] = aten::size(%left_fold_2fold.266) # <string>:13:9
                %2665 : int = aten::__getitem__(%2664, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %2666 : bool = aten::eq(%2665, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%2666) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.200 : int = prim::GetAttr[name="n"](%c1.25)
                    %fold.247 : int = prim::GetAttr[name="fold"](%c1.25)
                    %h.200 : int = prim::GetAttr[name="h"](%c1.25)
                    %w.200 : int = prim::GetAttr[name="w"](%c1.25)
                    %2671 : int[] = prim::ListConstruct(%n.200, %fold.247, %h.200, %w.200)
                    %2672 : Tensor = aten::zeros(%2671, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c1.25, %2672)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c1.25, %input_right.381)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.25, %34)
                -> ()
            -> (%34)
          block1():
            %2673 : bool = aten::__is__(%input_right.377, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.383 : Tensor?, %output.163 : Tensor = prim::If(%2673) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.448 : Tensor? = prim::GetAttr[name="center"](%c1.25)
                %2677 : bool = aten::__isnot__(%center.448, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%2677) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.268 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.25)
                %center.450 : Tensor? = prim::GetAttr[name="center"](%c1.25)
                %n.202 : int = prim::GetAttr[name="n"](%c1.25)
                %fold.249 : int = prim::GetAttr[name="fold"](%c1.25)
                %h.202 : int = prim::GetAttr[name="h"](%c1.25)
                %w.202 : int = prim::GetAttr[name="w"](%c1.25)
                %2685 : int[] = prim::ListConstruct(%n.202, %fold.249, %h.202, %w.202)
                %2686 : Tensor = aten::zeros(%2685, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %2688 : bool = aten::__is__(%center.450, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %2689 : bool = aten::__not__(%2688) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.452 : Tensor, %left_fold_2fold.270 : Tensor = prim::If(%2689) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.454 : Tensor = prim::unchecked_cast(%center.450)
                    -> (%center.454, %left_fold_2fold.268)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %2693 : int[] = aten::size(%center.452) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.204 : int, %c.152 : int, %h.204 : int, %w.204 : int = prim::ListUnpack(%2693)
                %fold.251 : int = aten::floordiv(%c.152, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %2699 : int[] = aten::size(%left_fold_2fold.270) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2700 : int = aten::__getitem__(%2699, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2701 : bool = aten::eq(%2700, %fold.251) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%2701) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %2703 : Tensor = aten::slice(%2686, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2704 : Tensor = aten::slice(%2703, %33, %34, %fold.251, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2705 : Tensor = aten::slice(%2704, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2706 : Tensor = aten::slice(%2705, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2707 : Tensor = aten::slice(%center.452, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2708 : int = aten::mul(%fold.251, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %2709 : Tensor = aten::slice(%2707, %33, %2708, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2710 : Tensor = aten::slice(%2709, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2711 : Tensor = aten::slice(%2710, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2712 : Tensor[] = prim::ListConstruct(%2706, %left_fold_2fold.270, %2711)
                %2713 : Tensor = aten::cat(%2712, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.165 : Tensor = aten::conv2d(%2713, %self.temp1.downc1.memconv.c1.op.conv.weight, %self.temp1.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.377, %output.165)
              block1():
                %input_right.385 : Tensor = prim::unchecked_cast(%input_right.377)
                %left_fold_2fold.272 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.25)
                %center.456 : Tensor? = prim::GetAttr[name="center"](%c1.25)
                %2725 : bool = aten::__is__(%center.456, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %2726 : bool = aten::__not__(%2725) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.458 : Tensor, %left_fold_2fold.274 : Tensor = prim::If(%2726) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.460 : Tensor = prim::unchecked_cast(%center.456)
                    -> (%center.460, %left_fold_2fold.272)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %2730 : int[] = aten::size(%center.458) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.206 : int, %c.154 : int, %h.206 : int, %w.206 : int = prim::ListUnpack(%2730)
                %fold.253 : int = aten::floordiv(%c.154, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %2736 : int[] = aten::size(%left_fold_2fold.274) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2737 : int = aten::__getitem__(%2736, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2738 : bool = aten::eq(%2737, %fold.253) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%2738) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %2740 : Tensor = aten::slice(%input_right.385, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2741 : Tensor = aten::slice(%2740, %33, %34, %fold.253, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2742 : Tensor = aten::slice(%2741, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2743 : Tensor = aten::slice(%2742, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2744 : Tensor = aten::slice(%center.458, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2745 : int = aten::mul(%fold.253, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %2746 : Tensor = aten::slice(%2744, %33, %2745, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2747 : Tensor = aten::slice(%2746, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2748 : Tensor = aten::slice(%2747, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2749 : Tensor[] = prim::ListConstruct(%2743, %left_fold_2fold.274, %2748)
                %2750 : Tensor = aten::cat(%2749, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.167 : Tensor = aten::conv2d(%2750, %self.temp1.downc1.memconv.c1.op.conv.weight, %self.temp1.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.385, %output.167)
            %center.462 : Tensor? = prim::GetAttr[name="center"](%c1.25)
            %fold.255 : int = prim::GetAttr[name="fold"](%c1.25)
            %2760 : bool = aten::__isnot__(%center.462, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.402 : Tensor = prim::If(%2760) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.404 : Tensor = prim::unchecked_cast(%center.462)
                -> (%x.404)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %2763 : Tensor = aten::slice(%x.402, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2764 : int = aten::mul(%fold.255, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %2765 : Tensor = aten::slice(%2763, %33, %fold.255, %2764, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2766 : Tensor = aten::slice(%2765, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2767 : Tensor = aten::slice(%2766, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c1.25, %2767)
            %2768 : bool = aten::__isnot__(%input_right.383, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%2768) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.387 : Tensor = prim::unchecked_cast(%input_right.383)
                 = prim::SetAttr[name="center"](%c1.25, %input_right.387)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.25, %34)
                -> ()
            -> (%output.163)
        %2770 : bool = aten::__isnot__(%x.400, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
        %x.406 : Tensor? = prim::If(%2770) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
          block0():
            %x.408 : Tensor = prim::unchecked_cast(%x.400)
            %x.410 : Tensor = aten::hardtanh_(%x.408, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.410)
          block1():
            -> (%x.400)
        %c2.25 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.25)
        %2775 : bool = aten::__isnot__(%x.406, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.389 : Tensor? = prim::If(%2775) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.391 : Tensor = prim::unchecked_cast(%x.406)
            %2778 : int[] = aten::size(%input_right.391) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %2779 : int, %2780 : int, %2781 : int, %2782 : int = prim::ListUnpack(%2778)
             = prim::SetAttr[name="n"](%c2.25, %2779)
             = prim::SetAttr[name="c"](%c2.25, %2780)
             = prim::SetAttr[name="h"](%c2.25, %2781)
             = prim::SetAttr[name="w"](%c2.25, %2782)
            %c.156 : int = prim::GetAttr[name="c"](%c2.25)
            %2784 : int = aten::floordiv(%c.156, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c2.25, %2784)
            -> (%input_right.391)
          block1():
            -> (%x.406)
        %center.464 : Tensor? = prim::GetAttr[name="center"](%c2.25)
        %2786 : bool = aten::__is__(%center.464, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.412 : Tensor? = prim::If(%2786) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %2788 : bool = aten::__isnot__(%input_right.389, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%2788) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.393 : Tensor = prim::unchecked_cast(%input_right.389)
                %left_fold_2fold.276 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.25)
                %2791 : int[] = aten::size(%left_fold_2fold.276) # <string>:13:9
                %2792 : int = aten::__getitem__(%2791, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %2793 : bool = aten::eq(%2792, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%2793) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.208 : int = prim::GetAttr[name="n"](%c2.25)
                    %fold.257 : int = prim::GetAttr[name="fold"](%c2.25)
                    %h.208 : int = prim::GetAttr[name="h"](%c2.25)
                    %w.208 : int = prim::GetAttr[name="w"](%c2.25)
                    %2798 : int[] = prim::ListConstruct(%n.208, %fold.257, %h.208, %w.208)
                    %2799 : Tensor = aten::zeros(%2798, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c2.25, %2799)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c2.25, %input_right.393)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.25, %34)
                -> ()
            -> (%34)
          block1():
            %2800 : bool = aten::__is__(%input_right.389, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.395 : Tensor?, %output.169 : Tensor = prim::If(%2800) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.466 : Tensor? = prim::GetAttr[name="center"](%c2.25)
                %2804 : bool = aten::__isnot__(%center.466, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%2804) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.278 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.25)
                %center.468 : Tensor? = prim::GetAttr[name="center"](%c2.25)
                %n.210 : int = prim::GetAttr[name="n"](%c2.25)
                %fold.259 : int = prim::GetAttr[name="fold"](%c2.25)
                %h.210 : int = prim::GetAttr[name="h"](%c2.25)
                %w.210 : int = prim::GetAttr[name="w"](%c2.25)
                %2812 : int[] = prim::ListConstruct(%n.210, %fold.259, %h.210, %w.210)
                %2813 : Tensor = aten::zeros(%2812, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %2815 : bool = aten::__is__(%center.468, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %2816 : bool = aten::__not__(%2815) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.470 : Tensor, %left_fold_2fold.280 : Tensor = prim::If(%2816) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.472 : Tensor = prim::unchecked_cast(%center.468)
                    -> (%center.472, %left_fold_2fold.278)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %2820 : int[] = aten::size(%center.470) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.212 : int, %c.158 : int, %h.212 : int, %w.212 : int = prim::ListUnpack(%2820)
                %fold.261 : int = aten::floordiv(%c.158, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %2826 : int[] = aten::size(%left_fold_2fold.280) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2827 : int = aten::__getitem__(%2826, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2828 : bool = aten::eq(%2827, %fold.261) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%2828) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %2830 : Tensor = aten::slice(%2813, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2831 : Tensor = aten::slice(%2830, %33, %34, %fold.261, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2832 : Tensor = aten::slice(%2831, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2833 : Tensor = aten::slice(%2832, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2834 : Tensor = aten::slice(%center.470, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2835 : int = aten::mul(%fold.261, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %2836 : Tensor = aten::slice(%2834, %33, %2835, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2837 : Tensor = aten::slice(%2836, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2838 : Tensor = aten::slice(%2837, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2839 : Tensor[] = prim::ListConstruct(%2833, %left_fold_2fold.280, %2838)
                %2840 : Tensor = aten::cat(%2839, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.171 : Tensor = aten::conv2d(%2840, %self.temp1.downc1.memconv.c2.op.conv.weight, %self.temp1.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.389, %output.171)
              block1():
                %input_right.397 : Tensor = prim::unchecked_cast(%input_right.389)
                %left_fold_2fold.282 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.25)
                %center.474 : Tensor? = prim::GetAttr[name="center"](%c2.25)
                %2852 : bool = aten::__is__(%center.474, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %2853 : bool = aten::__not__(%2852) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.476 : Tensor, %left_fold_2fold.284 : Tensor = prim::If(%2853) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.478 : Tensor = prim::unchecked_cast(%center.474)
                    -> (%center.478, %left_fold_2fold.282)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %2857 : int[] = aten::size(%center.476) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.214 : int, %c.160 : int, %h.214 : int, %w.214 : int = prim::ListUnpack(%2857)
                %fold.263 : int = aten::floordiv(%c.160, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %2863 : int[] = aten::size(%left_fold_2fold.284) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2864 : int = aten::__getitem__(%2863, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2865 : bool = aten::eq(%2864, %fold.263) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%2865) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %2867 : Tensor = aten::slice(%input_right.397, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2868 : Tensor = aten::slice(%2867, %33, %34, %fold.263, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2869 : Tensor = aten::slice(%2868, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2870 : Tensor = aten::slice(%2869, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2871 : Tensor = aten::slice(%center.476, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2872 : int = aten::mul(%fold.263, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %2873 : Tensor = aten::slice(%2871, %33, %2872, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2874 : Tensor = aten::slice(%2873, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2875 : Tensor = aten::slice(%2874, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2876 : Tensor[] = prim::ListConstruct(%2870, %left_fold_2fold.284, %2875)
                %2877 : Tensor = aten::cat(%2876, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.173 : Tensor = aten::conv2d(%2877, %self.temp1.downc1.memconv.c2.op.conv.weight, %self.temp1.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.397, %output.173)
            %center.480 : Tensor? = prim::GetAttr[name="center"](%c2.25)
            %fold.265 : int = prim::GetAttr[name="fold"](%c2.25)
            %2887 : bool = aten::__isnot__(%center.480, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.414 : Tensor = prim::If(%2887) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.416 : Tensor = prim::unchecked_cast(%center.480)
                -> (%x.416)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %2890 : Tensor = aten::slice(%x.414, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2891 : int = aten::mul(%fold.265, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %2892 : Tensor = aten::slice(%2890, %33, %fold.265, %2891, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2893 : Tensor = aten::slice(%2892, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %2894 : Tensor = aten::slice(%2893, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c2.25, %2894)
            %2895 : bool = aten::__isnot__(%input_right.395, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%2895) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.399 : Tensor = prim::unchecked_cast(%input_right.395)
                 = prim::SetAttr[name="center"](%c2.25, %input_right.399)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.25, %34)
                -> ()
            -> (%output.169)
        %2897 : bool = aten::__isnot__(%x.412, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
        %x2.30 : Tensor? = prim::If(%2897) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
          block0():
            %x.418 : Tensor = prim::unchecked_cast(%x.412)
            %x.420 : Tensor = aten::hardtanh_(%x.418, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.420)
          block1():
            -> (%x.412)
        %upc2.6 : __torch__.upscale.model.bsvd.model.___torch_mangle_45.UpBlock = prim::GetAttr[name="upc2"](%temp1.3)
        %memconv.27 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%upc2.6)
        %c1.27 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.27)
        %2904 : bool = aten::__isnot__(%x2.30, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.401 : Tensor? = prim::If(%2904) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.403 : Tensor = prim::unchecked_cast(%x2.30)
            %2907 : int[] = aten::size(%input_right.403) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %2908 : int, %2909 : int, %2910 : int, %2911 : int = prim::ListUnpack(%2907)
             = prim::SetAttr[name="n"](%c1.27, %2908)
             = prim::SetAttr[name="c"](%c1.27, %2909)
             = prim::SetAttr[name="h"](%c1.27, %2910)
             = prim::SetAttr[name="w"](%c1.27, %2911)
            %c.162 : int = prim::GetAttr[name="c"](%c1.27)
            %2913 : int = aten::floordiv(%c.162, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c1.27, %2913)
            -> (%input_right.403)
          block1():
            -> (%x2.30)
        %center.482 : Tensor? = prim::GetAttr[name="center"](%c1.27)
        %2915 : bool = aten::__is__(%center.482, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.422 : Tensor? = prim::If(%2915) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %2917 : bool = aten::__isnot__(%input_right.401, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%2917) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.405 : Tensor = prim::unchecked_cast(%input_right.401)
                %left_fold_2fold.286 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.27)
                %2920 : int[] = aten::size(%left_fold_2fold.286) # <string>:13:9
                %2921 : int = aten::__getitem__(%2920, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %2922 : bool = aten::eq(%2921, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%2922) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.216 : int = prim::GetAttr[name="n"](%c1.27)
                    %fold.267 : int = prim::GetAttr[name="fold"](%c1.27)
                    %h.216 : int = prim::GetAttr[name="h"](%c1.27)
                    %w.216 : int = prim::GetAttr[name="w"](%c1.27)
                    %2927 : int[] = prim::ListConstruct(%n.216, %fold.267, %h.216, %w.216)
                    %2928 : Tensor = aten::zeros(%2927, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c1.27, %2928)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c1.27, %input_right.405)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.27, %34)
                -> ()
            -> (%34)
          block1():
            %2929 : bool = aten::__is__(%input_right.401, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.407 : Tensor?, %output.175 : Tensor = prim::If(%2929) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.484 : Tensor? = prim::GetAttr[name="center"](%c1.27)
                %2933 : bool = aten::__isnot__(%center.484, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%2933) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.288 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.27)
                %center.486 : Tensor? = prim::GetAttr[name="center"](%c1.27)
                %n.218 : int = prim::GetAttr[name="n"](%c1.27)
                %fold.269 : int = prim::GetAttr[name="fold"](%c1.27)
                %h.218 : int = prim::GetAttr[name="h"](%c1.27)
                %w.218 : int = prim::GetAttr[name="w"](%c1.27)
                %2941 : int[] = prim::ListConstruct(%n.218, %fold.269, %h.218, %w.218)
                %2942 : Tensor = aten::zeros(%2941, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %2944 : bool = aten::__is__(%center.486, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %2945 : bool = aten::__not__(%2944) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.488 : Tensor, %left_fold_2fold.290 : Tensor = prim::If(%2945) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.490 : Tensor = prim::unchecked_cast(%center.486)
                    -> (%center.490, %left_fold_2fold.288)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %2949 : int[] = aten::size(%center.488) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.220 : int, %c.164 : int, %h.220 : int, %w.220 : int = prim::ListUnpack(%2949)
                %fold.271 : int = aten::floordiv(%c.164, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %2955 : int[] = aten::size(%left_fold_2fold.290) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2956 : int = aten::__getitem__(%2955, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2957 : bool = aten::eq(%2956, %fold.271) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%2957) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %2959 : Tensor = aten::slice(%2942, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2960 : Tensor = aten::slice(%2959, %33, %34, %fold.271, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2961 : Tensor = aten::slice(%2960, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2962 : Tensor = aten::slice(%2961, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2963 : Tensor = aten::slice(%center.488, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2964 : int = aten::mul(%fold.271, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %2965 : Tensor = aten::slice(%2963, %33, %2964, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2966 : Tensor = aten::slice(%2965, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2967 : Tensor = aten::slice(%2966, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %2968 : Tensor[] = prim::ListConstruct(%2962, %left_fold_2fold.290, %2967)
                %2969 : Tensor = aten::cat(%2968, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.177 : Tensor = aten::conv2d(%2969, %self.temp1.upc2.memconv.c1.op.conv.weight, %self.temp1.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.401, %output.177)
              block1():
                %input_right.409 : Tensor = prim::unchecked_cast(%input_right.401)
                %left_fold_2fold.292 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.27)
                %center.492 : Tensor? = prim::GetAttr[name="center"](%c1.27)
                %2981 : bool = aten::__is__(%center.492, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %2982 : bool = aten::__not__(%2981) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.494 : Tensor, %left_fold_2fold.294 : Tensor = prim::If(%2982) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.496 : Tensor = prim::unchecked_cast(%center.492)
                    -> (%center.496, %left_fold_2fold.292)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %2986 : int[] = aten::size(%center.494) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.222 : int, %c.166 : int, %h.222 : int, %w.222 : int = prim::ListUnpack(%2986)
                %fold.273 : int = aten::floordiv(%c.166, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %2992 : int[] = aten::size(%left_fold_2fold.294) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2993 : int = aten::__getitem__(%2992, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %2994 : bool = aten::eq(%2993, %fold.273) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%2994) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %2996 : Tensor = aten::slice(%input_right.409, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2997 : Tensor = aten::slice(%2996, %33, %34, %fold.273, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2998 : Tensor = aten::slice(%2997, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %2999 : Tensor = aten::slice(%2998, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3000 : Tensor = aten::slice(%center.494, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3001 : int = aten::mul(%fold.273, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3002 : Tensor = aten::slice(%3000, %33, %3001, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3003 : Tensor = aten::slice(%3002, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3004 : Tensor = aten::slice(%3003, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3005 : Tensor[] = prim::ListConstruct(%2999, %left_fold_2fold.294, %3004)
                %3006 : Tensor = aten::cat(%3005, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.179 : Tensor = aten::conv2d(%3006, %self.temp1.upc2.memconv.c1.op.conv.weight, %self.temp1.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.409, %output.179)
            %center.498 : Tensor? = prim::GetAttr[name="center"](%c1.27)
            %fold.275 : int = prim::GetAttr[name="fold"](%c1.27)
            %3016 : bool = aten::__isnot__(%center.498, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.424 : Tensor = prim::If(%3016) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.426 : Tensor = prim::unchecked_cast(%center.498)
                -> (%x.426)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %3019 : Tensor = aten::slice(%x.424, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3020 : int = aten::mul(%fold.275, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %3021 : Tensor = aten::slice(%3019, %33, %fold.275, %3020, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3022 : Tensor = aten::slice(%3021, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3023 : Tensor = aten::slice(%3022, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c1.27, %3023)
            %3024 : bool = aten::__isnot__(%input_right.407, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%3024) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.411 : Tensor = prim::unchecked_cast(%input_right.407)
                 = prim::SetAttr[name="center"](%c1.27, %input_right.411)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.27, %34)
                -> ()
            -> (%output.175)
        %3026 : bool = aten::__isnot__(%x.422, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
        %x.428 : Tensor? = prim::If(%3026) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
          block0():
            %x.430 : Tensor = prim::unchecked_cast(%x.422)
            %x.432 : Tensor = aten::hardtanh_(%x.430, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.432)
          block1():
            -> (%x.422)
        %c2.27 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.27)
        %3031 : bool = aten::__isnot__(%x.428, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.413 : Tensor? = prim::If(%3031) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.415 : Tensor = prim::unchecked_cast(%x.428)
            %3034 : int[] = aten::size(%input_right.415) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %3035 : int, %3036 : int, %3037 : int, %3038 : int = prim::ListUnpack(%3034)
             = prim::SetAttr[name="n"](%c2.27, %3035)
             = prim::SetAttr[name="c"](%c2.27, %3036)
             = prim::SetAttr[name="h"](%c2.27, %3037)
             = prim::SetAttr[name="w"](%c2.27, %3038)
            %c.168 : int = prim::GetAttr[name="c"](%c2.27)
            %3040 : int = aten::floordiv(%c.168, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c2.27, %3040)
            -> (%input_right.415)
          block1():
            -> (%x.428)
        %center.500 : Tensor? = prim::GetAttr[name="center"](%c2.27)
        %3042 : bool = aten::__is__(%center.500, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.434 : Tensor? = prim::If(%3042) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %3044 : bool = aten::__isnot__(%input_right.413, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%3044) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.417 : Tensor = prim::unchecked_cast(%input_right.413)
                %left_fold_2fold.296 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.27)
                %3047 : int[] = aten::size(%left_fold_2fold.296) # <string>:13:9
                %3048 : int = aten::__getitem__(%3047, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %3049 : bool = aten::eq(%3048, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%3049) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.224 : int = prim::GetAttr[name="n"](%c2.27)
                    %fold.277 : int = prim::GetAttr[name="fold"](%c2.27)
                    %h.224 : int = prim::GetAttr[name="h"](%c2.27)
                    %w.224 : int = prim::GetAttr[name="w"](%c2.27)
                    %3054 : int[] = prim::ListConstruct(%n.224, %fold.277, %h.224, %w.224)
                    %3055 : Tensor = aten::zeros(%3054, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c2.27, %3055)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c2.27, %input_right.417)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.27, %34)
                -> ()
            -> (%34)
          block1():
            %3056 : bool = aten::__is__(%input_right.413, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.419 : Tensor?, %output.181 : Tensor = prim::If(%3056) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.502 : Tensor? = prim::GetAttr[name="center"](%c2.27)
                %3060 : bool = aten::__isnot__(%center.502, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%3060) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.298 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.27)
                %center.504 : Tensor? = prim::GetAttr[name="center"](%c2.27)
                %n.226 : int = prim::GetAttr[name="n"](%c2.27)
                %fold.279 : int = prim::GetAttr[name="fold"](%c2.27)
                %h.226 : int = prim::GetAttr[name="h"](%c2.27)
                %w.226 : int = prim::GetAttr[name="w"](%c2.27)
                %3068 : int[] = prim::ListConstruct(%n.226, %fold.279, %h.226, %w.226)
                %3069 : Tensor = aten::zeros(%3068, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %3071 : bool = aten::__is__(%center.504, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3072 : bool = aten::__not__(%3071) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.506 : Tensor, %left_fold_2fold.300 : Tensor = prim::If(%3072) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.508 : Tensor = prim::unchecked_cast(%center.504)
                    -> (%center.508, %left_fold_2fold.298)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3076 : int[] = aten::size(%center.506) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.228 : int, %c.170 : int, %h.228 : int, %w.228 : int = prim::ListUnpack(%3076)
                %fold.281 : int = aten::floordiv(%c.170, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3082 : int[] = aten::size(%left_fold_2fold.300) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3083 : int = aten::__getitem__(%3082, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3084 : bool = aten::eq(%3083, %fold.281) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3084) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3086 : Tensor = aten::slice(%3069, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3087 : Tensor = aten::slice(%3086, %33, %34, %fold.281, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3088 : Tensor = aten::slice(%3087, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3089 : Tensor = aten::slice(%3088, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3090 : Tensor = aten::slice(%center.506, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3091 : int = aten::mul(%fold.281, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3092 : Tensor = aten::slice(%3090, %33, %3091, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3093 : Tensor = aten::slice(%3092, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3094 : Tensor = aten::slice(%3093, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3095 : Tensor[] = prim::ListConstruct(%3089, %left_fold_2fold.300, %3094)
                %3096 : Tensor = aten::cat(%3095, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.183 : Tensor = aten::conv2d(%3096, %self.temp1.upc2.memconv.c2.op.conv.weight, %self.temp1.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.413, %output.183)
              block1():
                %input_right.421 : Tensor = prim::unchecked_cast(%input_right.413)
                %left_fold_2fold.302 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.27)
                %center.510 : Tensor? = prim::GetAttr[name="center"](%c2.27)
                %3108 : bool = aten::__is__(%center.510, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3109 : bool = aten::__not__(%3108) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.512 : Tensor, %left_fold_2fold.304 : Tensor = prim::If(%3109) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.514 : Tensor = prim::unchecked_cast(%center.510)
                    -> (%center.514, %left_fold_2fold.302)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3113 : int[] = aten::size(%center.512) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.230 : int, %c.172 : int, %h.230 : int, %w.230 : int = prim::ListUnpack(%3113)
                %fold.283 : int = aten::floordiv(%c.172, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3119 : int[] = aten::size(%left_fold_2fold.304) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3120 : int = aten::__getitem__(%3119, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3121 : bool = aten::eq(%3120, %fold.283) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3121) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3123 : Tensor = aten::slice(%input_right.421, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3124 : Tensor = aten::slice(%3123, %33, %34, %fold.283, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3125 : Tensor = aten::slice(%3124, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3126 : Tensor = aten::slice(%3125, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3127 : Tensor = aten::slice(%center.512, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3128 : int = aten::mul(%fold.283, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3129 : Tensor = aten::slice(%3127, %33, %3128, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3130 : Tensor = aten::slice(%3129, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3131 : Tensor = aten::slice(%3130, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3132 : Tensor[] = prim::ListConstruct(%3126, %left_fold_2fold.304, %3131)
                %3133 : Tensor = aten::cat(%3132, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.185 : Tensor = aten::conv2d(%3133, %self.temp1.upc2.memconv.c2.op.conv.weight, %self.temp1.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.421, %output.185)
            %center.516 : Tensor? = prim::GetAttr[name="center"](%c2.27)
            %fold.285 : int = prim::GetAttr[name="fold"](%c2.27)
            %3143 : bool = aten::__isnot__(%center.516, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.436 : Tensor = prim::If(%3143) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.438 : Tensor = prim::unchecked_cast(%center.516)
                -> (%x.438)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %3146 : Tensor = aten::slice(%x.436, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3147 : int = aten::mul(%fold.285, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %3148 : Tensor = aten::slice(%3146, %33, %fold.285, %3147, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3149 : Tensor = aten::slice(%3148, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3150 : Tensor = aten::slice(%3149, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c2.27, %3150)
            %3151 : bool = aten::__isnot__(%input_right.419, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%3151) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.423 : Tensor = prim::unchecked_cast(%input_right.419)
                 = prim::SetAttr[name="center"](%c2.27, %input_right.423)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.27, %34)
                -> ()
            -> (%output.181)
        %3153 : bool = aten::__isnot__(%x.434, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
        %x.440 : Tensor? = prim::If(%3153) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
          block0():
            %x.442 : Tensor = prim::unchecked_cast(%x.434)
            %x.444 : Tensor = aten::hardtanh_(%x.442, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.444)
          block1():
            -> (%x.434)
        %3157 : bool = aten::__isnot__(%x.440, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
        %x2.32 : Tensor? = prim::If(%3157) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
          block0():
            %x.446 : Tensor = prim::unchecked_cast(%x.440)
            %input.77 : Tensor = aten::conv2d(%x.446, %self.temp1.upc2.convblock.0.weight, %self.temp1.upc2.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %x.448 : Tensor = aten::pixel_shuffle(%input.77, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
            -> (%x.448)
          block1():
            -> (%x.440)
        %upc1.6 : __torch__.upscale.model.bsvd.model.___torch_mangle_49.UpBlock = prim::GetAttr[name="upc1"](%temp1.3)
        %3171 : bool = aten::__isnot__(%x2.32, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
        %3172 : Tensor? = prim::If(%3171) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
          block0():
            %mem_list.41 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.11)
            %3174 : Tensor = aten::pop(%mem_list.41, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
            -> (%3174)
          block1():
            -> (%34)
        %3175 : bool = aten::__is__(%x2.32, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
        %3176 : bool, %x1.78 : Tensor? = prim::If(%3175) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
          block0():
            -> (%35, %x2.32)
          block1():
            %x1.80 : Tensor = prim::unchecked_cast(%x2.32)
            %3179 : bool = aten::__is__(%3172, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
            -> (%3179, %x1.80)
        %3180 : Tensor? = prim::If(%3176) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
          block0():
            -> (%34)
          block1():
            %x1.82 : Tensor = prim::unchecked_cast(%x1.78)
            %x2.34 : Tensor = prim::unchecked_cast(%3172)
            %3183 : Tensor = aten::add(%x1.82, %x2.34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
            -> (%3183)
        %memconv.29 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%upc1.6)
        %c1.29 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.29)
        %3186 : bool = aten::__isnot__(%3180, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.425 : Tensor? = prim::If(%3186) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.427 : Tensor = prim::unchecked_cast(%3180)
            %3189 : int[] = aten::size(%input_right.427) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %3190 : int, %3191 : int, %3192 : int, %3193 : int = prim::ListUnpack(%3189)
             = prim::SetAttr[name="n"](%c1.29, %3190)
             = prim::SetAttr[name="c"](%c1.29, %3191)
             = prim::SetAttr[name="h"](%c1.29, %3192)
             = prim::SetAttr[name="w"](%c1.29, %3193)
            %c.174 : int = prim::GetAttr[name="c"](%c1.29)
            %3195 : int = aten::floordiv(%c.174, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c1.29, %3195)
            -> (%input_right.427)
          block1():
            -> (%3180)
        %center.518 : Tensor? = prim::GetAttr[name="center"](%c1.29)
        %3197 : bool = aten::__is__(%center.518, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.450 : Tensor? = prim::If(%3197) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %3199 : bool = aten::__isnot__(%input_right.425, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%3199) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.429 : Tensor = prim::unchecked_cast(%input_right.425)
                %left_fold_2fold.306 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.29)
                %3202 : int[] = aten::size(%left_fold_2fold.306) # <string>:13:9
                %3203 : int = aten::__getitem__(%3202, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %3204 : bool = aten::eq(%3203, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%3204) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.232 : int = prim::GetAttr[name="n"](%c1.29)
                    %fold.287 : int = prim::GetAttr[name="fold"](%c1.29)
                    %h.232 : int = prim::GetAttr[name="h"](%c1.29)
                    %w.232 : int = prim::GetAttr[name="w"](%c1.29)
                    %3209 : int[] = prim::ListConstruct(%n.232, %fold.287, %h.232, %w.232)
                    %3210 : Tensor = aten::zeros(%3209, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c1.29, %3210)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c1.29, %input_right.429)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.29, %34)
                -> ()
            -> (%34)
          block1():
            %3211 : bool = aten::__is__(%input_right.425, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.431 : Tensor?, %output.187 : Tensor = prim::If(%3211) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.520 : Tensor? = prim::GetAttr[name="center"](%c1.29)
                %3215 : bool = aten::__isnot__(%center.520, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%3215) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.308 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.29)
                %center.522 : Tensor? = prim::GetAttr[name="center"](%c1.29)
                %n.234 : int = prim::GetAttr[name="n"](%c1.29)
                %fold.289 : int = prim::GetAttr[name="fold"](%c1.29)
                %h.234 : int = prim::GetAttr[name="h"](%c1.29)
                %w.234 : int = prim::GetAttr[name="w"](%c1.29)
                %3223 : int[] = prim::ListConstruct(%n.234, %fold.289, %h.234, %w.234)
                %3224 : Tensor = aten::zeros(%3223, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %3226 : bool = aten::__is__(%center.522, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3227 : bool = aten::__not__(%3226) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.524 : Tensor, %left_fold_2fold.310 : Tensor = prim::If(%3227) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.526 : Tensor = prim::unchecked_cast(%center.522)
                    -> (%center.526, %left_fold_2fold.308)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3231 : int[] = aten::size(%center.524) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.236 : int, %c.176 : int, %h.236 : int, %w.236 : int = prim::ListUnpack(%3231)
                %fold.291 : int = aten::floordiv(%c.176, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3237 : int[] = aten::size(%left_fold_2fold.310) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3238 : int = aten::__getitem__(%3237, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3239 : bool = aten::eq(%3238, %fold.291) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3239) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3241 : Tensor = aten::slice(%3224, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3242 : Tensor = aten::slice(%3241, %33, %34, %fold.291, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3243 : Tensor = aten::slice(%3242, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3244 : Tensor = aten::slice(%3243, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3245 : Tensor = aten::slice(%center.524, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3246 : int = aten::mul(%fold.291, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3247 : Tensor = aten::slice(%3245, %33, %3246, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3248 : Tensor = aten::slice(%3247, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3249 : Tensor = aten::slice(%3248, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3250 : Tensor[] = prim::ListConstruct(%3244, %left_fold_2fold.310, %3249)
                %3251 : Tensor = aten::cat(%3250, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.189 : Tensor = aten::conv2d(%3251, %self.temp1.upc1.memconv.c1.op.conv.weight, %self.temp1.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.425, %output.189)
              block1():
                %input_right.433 : Tensor = prim::unchecked_cast(%input_right.425)
                %left_fold_2fold.312 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.29)
                %center.528 : Tensor? = prim::GetAttr[name="center"](%c1.29)
                %3263 : bool = aten::__is__(%center.528, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3264 : bool = aten::__not__(%3263) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.530 : Tensor, %left_fold_2fold.314 : Tensor = prim::If(%3264) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.532 : Tensor = prim::unchecked_cast(%center.528)
                    -> (%center.532, %left_fold_2fold.312)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3268 : int[] = aten::size(%center.530) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.238 : int, %c.178 : int, %h.238 : int, %w.238 : int = prim::ListUnpack(%3268)
                %fold.293 : int = aten::floordiv(%c.178, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3274 : int[] = aten::size(%left_fold_2fold.314) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3275 : int = aten::__getitem__(%3274, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3276 : bool = aten::eq(%3275, %fold.293) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3276) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3278 : Tensor = aten::slice(%input_right.433, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3279 : Tensor = aten::slice(%3278, %33, %34, %fold.293, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3280 : Tensor = aten::slice(%3279, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3281 : Tensor = aten::slice(%3280, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3282 : Tensor = aten::slice(%center.530, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3283 : int = aten::mul(%fold.293, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3284 : Tensor = aten::slice(%3282, %33, %3283, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3285 : Tensor = aten::slice(%3284, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3286 : Tensor = aten::slice(%3285, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3287 : Tensor[] = prim::ListConstruct(%3281, %left_fold_2fold.314, %3286)
                %3288 : Tensor = aten::cat(%3287, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.191 : Tensor = aten::conv2d(%3288, %self.temp1.upc1.memconv.c1.op.conv.weight, %self.temp1.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.433, %output.191)
            %center.534 : Tensor? = prim::GetAttr[name="center"](%c1.29)
            %fold.295 : int = prim::GetAttr[name="fold"](%c1.29)
            %3298 : bool = aten::__isnot__(%center.534, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.452 : Tensor = prim::If(%3298) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.454 : Tensor = prim::unchecked_cast(%center.534)
                -> (%x.454)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %3301 : Tensor = aten::slice(%x.452, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3302 : int = aten::mul(%fold.295, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %3303 : Tensor = aten::slice(%3301, %33, %fold.295, %3302, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3304 : Tensor = aten::slice(%3303, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3305 : Tensor = aten::slice(%3304, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c1.29, %3305)
            %3306 : bool = aten::__isnot__(%input_right.431, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%3306) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.435 : Tensor = prim::unchecked_cast(%input_right.431)
                 = prim::SetAttr[name="center"](%c1.29, %input_right.435)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.29, %34)
                -> ()
            -> (%output.187)
        %3308 : bool = aten::__isnot__(%x.450, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
        %x.456 : Tensor? = prim::If(%3308) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
          block0():
            %x.458 : Tensor = prim::unchecked_cast(%x.450)
            %x.460 : Tensor = aten::hardtanh_(%x.458, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.460)
          block1():
            -> (%x.450)
        %c2.29 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.29)
        %3313 : bool = aten::__isnot__(%x.456, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.437 : Tensor? = prim::If(%3313) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.439 : Tensor = prim::unchecked_cast(%x.456)
            %3316 : int[] = aten::size(%input_right.439) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %3317 : int, %3318 : int, %3319 : int, %3320 : int = prim::ListUnpack(%3316)
             = prim::SetAttr[name="n"](%c2.29, %3317)
             = prim::SetAttr[name="c"](%c2.29, %3318)
             = prim::SetAttr[name="h"](%c2.29, %3319)
             = prim::SetAttr[name="w"](%c2.29, %3320)
            %c.180 : int = prim::GetAttr[name="c"](%c2.29)
            %3322 : int = aten::floordiv(%c.180, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c2.29, %3322)
            -> (%input_right.439)
          block1():
            -> (%x.456)
        %center.536 : Tensor? = prim::GetAttr[name="center"](%c2.29)
        %3324 : bool = aten::__is__(%center.536, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.462 : Tensor? = prim::If(%3324) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %3326 : bool = aten::__isnot__(%input_right.437, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%3326) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.441 : Tensor = prim::unchecked_cast(%input_right.437)
                %left_fold_2fold.316 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.29)
                %3329 : int[] = aten::size(%left_fold_2fold.316) # <string>:13:9
                %3330 : int = aten::__getitem__(%3329, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %3331 : bool = aten::eq(%3330, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%3331) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.240 : int = prim::GetAttr[name="n"](%c2.29)
                    %fold.297 : int = prim::GetAttr[name="fold"](%c2.29)
                    %h.240 : int = prim::GetAttr[name="h"](%c2.29)
                    %w.240 : int = prim::GetAttr[name="w"](%c2.29)
                    %3336 : int[] = prim::ListConstruct(%n.240, %fold.297, %h.240, %w.240)
                    %3337 : Tensor = aten::zeros(%3336, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c2.29, %3337)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c2.29, %input_right.441)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.29, %34)
                -> ()
            -> (%34)
          block1():
            %3338 : bool = aten::__is__(%input_right.437, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.443 : Tensor?, %output.193 : Tensor = prim::If(%3338) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.538 : Tensor? = prim::GetAttr[name="center"](%c2.29)
                %3342 : bool = aten::__isnot__(%center.538, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%3342) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.318 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.29)
                %center.540 : Tensor? = prim::GetAttr[name="center"](%c2.29)
                %n.242 : int = prim::GetAttr[name="n"](%c2.29)
                %fold.299 : int = prim::GetAttr[name="fold"](%c2.29)
                %h.242 : int = prim::GetAttr[name="h"](%c2.29)
                %w.242 : int = prim::GetAttr[name="w"](%c2.29)
                %3350 : int[] = prim::ListConstruct(%n.242, %fold.299, %h.242, %w.242)
                %3351 : Tensor = aten::zeros(%3350, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %3353 : bool = aten::__is__(%center.540, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3354 : bool = aten::__not__(%3353) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.542 : Tensor, %left_fold_2fold.320 : Tensor = prim::If(%3354) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.544 : Tensor = prim::unchecked_cast(%center.540)
                    -> (%center.544, %left_fold_2fold.318)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3358 : int[] = aten::size(%center.542) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.244 : int, %c.182 : int, %h.244 : int, %w.244 : int = prim::ListUnpack(%3358)
                %fold.301 : int = aten::floordiv(%c.182, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3364 : int[] = aten::size(%left_fold_2fold.320) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3365 : int = aten::__getitem__(%3364, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3366 : bool = aten::eq(%3365, %fold.301) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3366) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3368 : Tensor = aten::slice(%3351, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3369 : Tensor = aten::slice(%3368, %33, %34, %fold.301, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3370 : Tensor = aten::slice(%3369, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3371 : Tensor = aten::slice(%3370, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3372 : Tensor = aten::slice(%center.542, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3373 : int = aten::mul(%fold.301, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3374 : Tensor = aten::slice(%3372, %33, %3373, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3375 : Tensor = aten::slice(%3374, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3376 : Tensor = aten::slice(%3375, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3377 : Tensor[] = prim::ListConstruct(%3371, %left_fold_2fold.320, %3376)
                %3378 : Tensor = aten::cat(%3377, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.195 : Tensor = aten::conv2d(%3378, %self.temp1.upc1.memconv.c2.op.conv.weight, %self.temp1.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.437, %output.195)
              block1():
                %input_right.445 : Tensor = prim::unchecked_cast(%input_right.437)
                %left_fold_2fold.322 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.29)
                %center.546 : Tensor? = prim::GetAttr[name="center"](%c2.29)
                %3390 : bool = aten::__is__(%center.546, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3391 : bool = aten::__not__(%3390) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.548 : Tensor, %left_fold_2fold.324 : Tensor = prim::If(%3391) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.550 : Tensor = prim::unchecked_cast(%center.546)
                    -> (%center.550, %left_fold_2fold.322)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3395 : int[] = aten::size(%center.548) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.246 : int, %c.184 : int, %h.246 : int, %w.246 : int = prim::ListUnpack(%3395)
                %fold.303 : int = aten::floordiv(%c.184, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3401 : int[] = aten::size(%left_fold_2fold.324) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3402 : int = aten::__getitem__(%3401, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3403 : bool = aten::eq(%3402, %fold.303) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3403) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3405 : Tensor = aten::slice(%input_right.445, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3406 : Tensor = aten::slice(%3405, %33, %34, %fold.303, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3407 : Tensor = aten::slice(%3406, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3408 : Tensor = aten::slice(%3407, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3409 : Tensor = aten::slice(%center.548, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3410 : int = aten::mul(%fold.303, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3411 : Tensor = aten::slice(%3409, %33, %3410, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3412 : Tensor = aten::slice(%3411, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3413 : Tensor = aten::slice(%3412, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3414 : Tensor[] = prim::ListConstruct(%3408, %left_fold_2fold.324, %3413)
                %3415 : Tensor = aten::cat(%3414, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.197 : Tensor = aten::conv2d(%3415, %self.temp1.upc1.memconv.c2.op.conv.weight, %self.temp1.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.445, %output.197)
            %center.552 : Tensor? = prim::GetAttr[name="center"](%c2.29)
            %fold.305 : int = prim::GetAttr[name="fold"](%c2.29)
            %3425 : bool = aten::__isnot__(%center.552, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.464 : Tensor = prim::If(%3425) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.466 : Tensor = prim::unchecked_cast(%center.552)
                -> (%x.466)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %3428 : Tensor = aten::slice(%x.464, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3429 : int = aten::mul(%fold.305, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %3430 : Tensor = aten::slice(%3428, %33, %fold.305, %3429, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3431 : Tensor = aten::slice(%3430, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3432 : Tensor = aten::slice(%3431, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c2.29, %3432)
            %3433 : bool = aten::__isnot__(%input_right.443, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%3433) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.447 : Tensor = prim::unchecked_cast(%input_right.443)
                 = prim::SetAttr[name="center"](%c2.29, %input_right.447)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.29, %34)
                -> ()
            -> (%output.193)
        %3435 : bool = aten::__isnot__(%x.462, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
        %x.468 : Tensor? = prim::If(%3435) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
          block0():
            %x.470 : Tensor = prim::unchecked_cast(%x.462)
            %x.472 : Tensor = aten::hardtanh_(%x.470, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.472)
          block1():
            -> (%x.462)
        %3439 : bool = aten::__isnot__(%x.468, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
        %x1.84 : Tensor? = prim::If(%3439) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
          block0():
            %x.474 : Tensor = prim::unchecked_cast(%x.468)
            %input.79 : Tensor = aten::conv2d(%x.474, %self.temp1.upc1.convblock.0.weight, %self.temp1.upc1.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %x.476 : Tensor = aten::pixel_shuffle(%input.79, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
            -> (%x.476)
          block1():
            -> (%x.468)
        %skip2.13 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip2"](%temp1.3)
        %3453 : bool = aten::__isnot__(%x1.84, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
        %3454 : Tensor? = prim::If(%3453) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
          block0():
            %mem_list.43 : Tensor[] = prim::GetAttr[name="mem_list"](%skip2.13)
            %3456 : Tensor = aten::pop(%mem_list.43, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
            -> (%3456)
          block1():
            -> (%34)
        %3457 : bool = aten::__is__(%x1.84, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
        %3458 : bool, %x1.86 : Tensor? = prim::If(%3457) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
          block0():
            -> (%35, %x1.84)
          block1():
            %x1.88 : Tensor = prim::unchecked_cast(%x1.84)
            %3461 : bool = aten::__is__(%3454, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
            -> (%3461, %x1.88)
        %3462 : Tensor? = prim::If(%3458) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
          block0():
            -> (%34)
          block1():
            %x1.90 : Tensor = prim::unchecked_cast(%x1.86)
            %x2.36 : Tensor = prim::unchecked_cast(%3454)
            %3465 : Tensor = aten::add(%x1.90, %x2.36, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
            -> (%3465)
        %3466 : bool = aten::__is__(%3462, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:11
        %x.478 : Tensor? = prim::If(%3466) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:8
          block0():
            -> (%34)
          block1():
            %x.480 : Tensor = prim::unchecked_cast(%3462)
            %input.81 : Tensor = aten::conv2d(%x.480, %self.temp1.outc.convblock.0.weight, %self.temp1.outc.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %input.83 : Tensor = aten::hardtanh_(%input.81, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            %input.85 : Tensor = aten::conv2d(%input.83, %self.temp1.outc.convblock.3.weight, %self.temp1.outc.convblock.3.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            -> (%input.85)
        %skip1.13 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip1"](%temp1.3)
        %3486 : bool = aten::__isnot__(%x.478, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
        %3487 : Tensor? = prim::If(%3486) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
          block0():
            %mem_list.45 : Tensor[] = prim::GetAttr[name="mem_list"](%skip1.13)
            %3489 : Tensor = aten::pop(%mem_list.45, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
            -> (%3489)
          block1():
            -> (%34)
        %3490 : bool = aten::__is__(%3487, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
        %3491 : bool, %x1.92 : Tensor? = prim::If(%3490) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
          block0():
            -> (%35, %3487)
          block1():
            %x1.94 : Tensor = prim::unchecked_cast(%3487)
            %3494 : bool = aten::__is__(%x.478, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:25
            -> (%3494, %x1.94)
        %x.482 : Tensor? = prim::If(%3491) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:8
          block0():
            -> (%34)
          block1():
            %x1.96 : Tensor = prim::unchecked_cast(%x1.92)
            %x2.38 : Tensor = prim::unchecked_cast(%x.478)
            %3498 : Tensor = aten::slice(%x1.96, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
            %3499 : Tensor = aten::slice(%3498, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
            %3500 : Tensor = aten::slice(%3499, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
            %3501 : Tensor = aten::slice(%3500, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
            %3502 : Tensor = aten::slice(%x2.38, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
            %3503 : Tensor = aten::slice(%3502, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
            %3504 : Tensor = aten::slice(%3503, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
            %3505 : Tensor = aten::slice(%3504, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
            %3506 : Tensor = aten::sub(%3501, %3505, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
            %3507 : Tensor = aten::slice(%x2.38, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
            %3508 : Tensor = aten::slice(%3507, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
            %3509 : Tensor = aten::slice(%3508, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
            %3510 : Tensor = aten::slice(%3509, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
            %3511 : Tensor = aten::copy_(%3510, %3506, %30) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
            -> (%x2.38)
        %temp2.3 : __torch__.upscale.model.bsvd.model.___torch_mangle_55.DenBlock = prim::GetAttr[name="temp2"](%self)
        %skip1.15 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip1"](%temp2.3)
        %3514 : bool = aten::__is__(%x.482, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:426:11
        %3515 : Tensor? = prim::If(%3514) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:426:8
          block0():
            -> (%34)
          block1():
            %x.484 : Tensor = prim::unchecked_cast(%x.482)
            %3517 : Tensor = aten::slice(%x.484, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
            %3518 : Tensor = aten::slice(%3517, %33, %32, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
            %3519 : Tensor = aten::slice(%3518, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
            %3520 : Tensor = aten::slice(%3519, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
            -> (%3520)
        %3521 : bool = aten::__isnot__(%3515, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
         = prim::If(%3521) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
          block0():
            %x.486 : Tensor = prim::unchecked_cast(%3515)
            %mem_list.47 : Tensor[] = prim::GetAttr[name="mem_list"](%skip1.15)
             = aten::insert(%mem_list.47, %32, %x.486) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
            -> ()
          block1():
            -> ()
        %3525 : bool = aten::__is__(%x.482, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:245:11
        %x0.9 : Tensor? = prim::If(%3525) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:245:8
          block0():
            -> (%34)
          block1():
            %x.488 : Tensor = prim::unchecked_cast(%x.482)
            %input.87 : Tensor = aten::conv2d(%x.488, %self.temp2.inc.convblock.0.weight, %self.temp2.inc.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %input.89 : Tensor = aten::hardtanh_(%input.87, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            %input.91 : Tensor = aten::conv2d(%input.89, %self.temp2.inc.convblock.3.weight, %self.temp2.inc.convblock.3.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %input.93 : Tensor = aten::hardtanh_(%input.91, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%input.93)
        %skip2.15 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip2"](%temp2.3)
        %3546 : bool = aten::__isnot__(%x0.9, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
         = prim::If(%3546) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
          block0():
            %x.490 : Tensor = prim::unchecked_cast(%x0.9)
            %mem_list.49 : Tensor[] = prim::GetAttr[name="mem_list"](%skip2.15)
             = aten::insert(%mem_list.49, %32, %x.490) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
            -> ()
          block1():
            -> ()
        %downc0.8 : __torch__.upscale.model.bsvd.model.___torch_mangle_31.DownBlock = prim::GetAttr[name="downc0"](%temp2.3)
        %3550 : bool = aten::__isnot__(%x0.9, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:11
        %x.492 : Tensor? = prim::If(%3550) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:8
          block0():
            %x.494 : Tensor = prim::unchecked_cast(%x0.9)
            %input.95 : Tensor = aten::conv2d(%x.494, %self.temp2.downc0.convblock.0.weight, %self.temp2.downc0.convblock.0.bias, %7565, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %x.496 : Tensor = aten::hardtanh_(%input.95, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.496)
          block1():
            -> (%x0.9)
        %memconv.31 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%downc0.8)
        %c1.31 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.31)
        %3564 : bool = aten::__isnot__(%x.492, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.449 : Tensor? = prim::If(%3564) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.451 : Tensor = prim::unchecked_cast(%x.492)
            %3567 : int[] = aten::size(%input_right.451) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %3568 : int, %3569 : int, %3570 : int, %3571 : int = prim::ListUnpack(%3567)
             = prim::SetAttr[name="n"](%c1.31, %3568)
             = prim::SetAttr[name="c"](%c1.31, %3569)
             = prim::SetAttr[name="h"](%c1.31, %3570)
             = prim::SetAttr[name="w"](%c1.31, %3571)
            %c.186 : int = prim::GetAttr[name="c"](%c1.31)
            %3573 : int = aten::floordiv(%c.186, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c1.31, %3573)
            -> (%input_right.451)
          block1():
            -> (%x.492)
        %center.554 : Tensor? = prim::GetAttr[name="center"](%c1.31)
        %3575 : bool = aten::__is__(%center.554, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.498 : Tensor? = prim::If(%3575) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %3577 : bool = aten::__isnot__(%input_right.449, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%3577) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.453 : Tensor = prim::unchecked_cast(%input_right.449)
                %left_fold_2fold.326 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.31)
                %3580 : int[] = aten::size(%left_fold_2fold.326) # <string>:13:9
                %3581 : int = aten::__getitem__(%3580, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %3582 : bool = aten::eq(%3581, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%3582) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.248 : int = prim::GetAttr[name="n"](%c1.31)
                    %fold.307 : int = prim::GetAttr[name="fold"](%c1.31)
                    %h.248 : int = prim::GetAttr[name="h"](%c1.31)
                    %w.248 : int = prim::GetAttr[name="w"](%c1.31)
                    %3587 : int[] = prim::ListConstruct(%n.248, %fold.307, %h.248, %w.248)
                    %3588 : Tensor = aten::zeros(%3587, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c1.31, %3588)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c1.31, %input_right.453)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.31, %34)
                -> ()
            -> (%34)
          block1():
            %3589 : bool = aten::__is__(%input_right.449, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.455 : Tensor?, %output.199 : Tensor = prim::If(%3589) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.556 : Tensor? = prim::GetAttr[name="center"](%c1.31)
                %3593 : bool = aten::__isnot__(%center.556, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%3593) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.328 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.31)
                %center.558 : Tensor? = prim::GetAttr[name="center"](%c1.31)
                %n.250 : int = prim::GetAttr[name="n"](%c1.31)
                %fold.309 : int = prim::GetAttr[name="fold"](%c1.31)
                %h.250 : int = prim::GetAttr[name="h"](%c1.31)
                %w.250 : int = prim::GetAttr[name="w"](%c1.31)
                %3601 : int[] = prim::ListConstruct(%n.250, %fold.309, %h.250, %w.250)
                %3602 : Tensor = aten::zeros(%3601, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %3604 : bool = aten::__is__(%center.558, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3605 : bool = aten::__not__(%3604) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.560 : Tensor, %left_fold_2fold.330 : Tensor = prim::If(%3605) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.562 : Tensor = prim::unchecked_cast(%center.558)
                    -> (%center.562, %left_fold_2fold.328)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3609 : int[] = aten::size(%center.560) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.252 : int, %c.188 : int, %h.252 : int, %w.252 : int = prim::ListUnpack(%3609)
                %fold.311 : int = aten::floordiv(%c.188, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3615 : int[] = aten::size(%left_fold_2fold.330) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3616 : int = aten::__getitem__(%3615, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3617 : bool = aten::eq(%3616, %fold.311) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3617) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3619 : Tensor = aten::slice(%3602, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3620 : Tensor = aten::slice(%3619, %33, %34, %fold.311, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3621 : Tensor = aten::slice(%3620, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3622 : Tensor = aten::slice(%3621, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3623 : Tensor = aten::slice(%center.560, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3624 : int = aten::mul(%fold.311, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3625 : Tensor = aten::slice(%3623, %33, %3624, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3626 : Tensor = aten::slice(%3625, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3627 : Tensor = aten::slice(%3626, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3628 : Tensor[] = prim::ListConstruct(%3622, %left_fold_2fold.330, %3627)
                %3629 : Tensor = aten::cat(%3628, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.201 : Tensor = aten::conv2d(%3629, %self.temp2.downc0.memconv.c1.op.conv.weight, %self.temp2.downc0.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.449, %output.201)
              block1():
                %input_right.457 : Tensor = prim::unchecked_cast(%input_right.449)
                %left_fold_2fold.332 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.31)
                %center.564 : Tensor? = prim::GetAttr[name="center"](%c1.31)
                %3641 : bool = aten::__is__(%center.564, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3642 : bool = aten::__not__(%3641) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.566 : Tensor, %left_fold_2fold.334 : Tensor = prim::If(%3642) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.568 : Tensor = prim::unchecked_cast(%center.564)
                    -> (%center.568, %left_fold_2fold.332)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3646 : int[] = aten::size(%center.566) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.254 : int, %c.190 : int, %h.254 : int, %w.254 : int = prim::ListUnpack(%3646)
                %fold.313 : int = aten::floordiv(%c.190, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3652 : int[] = aten::size(%left_fold_2fold.334) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3653 : int = aten::__getitem__(%3652, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3654 : bool = aten::eq(%3653, %fold.313) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3654) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3656 : Tensor = aten::slice(%input_right.457, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3657 : Tensor = aten::slice(%3656, %33, %34, %fold.313, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3658 : Tensor = aten::slice(%3657, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3659 : Tensor = aten::slice(%3658, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3660 : Tensor = aten::slice(%center.566, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3661 : int = aten::mul(%fold.313, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3662 : Tensor = aten::slice(%3660, %33, %3661, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3663 : Tensor = aten::slice(%3662, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3664 : Tensor = aten::slice(%3663, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3665 : Tensor[] = prim::ListConstruct(%3659, %left_fold_2fold.334, %3664)
                %3666 : Tensor = aten::cat(%3665, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.203 : Tensor = aten::conv2d(%3666, %self.temp2.downc0.memconv.c1.op.conv.weight, %self.temp2.downc0.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.457, %output.203)
            %center.570 : Tensor? = prim::GetAttr[name="center"](%c1.31)
            %fold.315 : int = prim::GetAttr[name="fold"](%c1.31)
            %3676 : bool = aten::__isnot__(%center.570, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.500 : Tensor = prim::If(%3676) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.502 : Tensor = prim::unchecked_cast(%center.570)
                -> (%x.502)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %3679 : Tensor = aten::slice(%x.500, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3680 : int = aten::mul(%fold.315, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %3681 : Tensor = aten::slice(%3679, %33, %fold.315, %3680, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3682 : Tensor = aten::slice(%3681, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3683 : Tensor = aten::slice(%3682, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c1.31, %3683)
            %3684 : bool = aten::__isnot__(%input_right.455, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%3684) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.459 : Tensor = prim::unchecked_cast(%input_right.455)
                 = prim::SetAttr[name="center"](%c1.31, %input_right.459)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.31, %34)
                -> ()
            -> (%output.199)
        %3686 : bool = aten::__isnot__(%x.498, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
        %x.504 : Tensor? = prim::If(%3686) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
          block0():
            %x.506 : Tensor = prim::unchecked_cast(%x.498)
            %x.508 : Tensor = aten::hardtanh_(%x.506, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.508)
          block1():
            -> (%x.498)
        %c2.31 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.31)
        %3691 : bool = aten::__isnot__(%x.504, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.461 : Tensor? = prim::If(%3691) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.463 : Tensor = prim::unchecked_cast(%x.504)
            %3694 : int[] = aten::size(%input_right.463) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %3695 : int, %3696 : int, %3697 : int, %3698 : int = prim::ListUnpack(%3694)
             = prim::SetAttr[name="n"](%c2.31, %3695)
             = prim::SetAttr[name="c"](%c2.31, %3696)
             = prim::SetAttr[name="h"](%c2.31, %3697)
             = prim::SetAttr[name="w"](%c2.31, %3698)
            %c.192 : int = prim::GetAttr[name="c"](%c2.31)
            %3700 : int = aten::floordiv(%c.192, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c2.31, %3700)
            -> (%input_right.463)
          block1():
            -> (%x.504)
        %center.572 : Tensor? = prim::GetAttr[name="center"](%c2.31)
        %3702 : bool = aten::__is__(%center.572, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.510 : Tensor? = prim::If(%3702) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %3704 : bool = aten::__isnot__(%input_right.461, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%3704) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.465 : Tensor = prim::unchecked_cast(%input_right.461)
                %left_fold_2fold.336 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.31)
                %3707 : int[] = aten::size(%left_fold_2fold.336) # <string>:13:9
                %3708 : int = aten::__getitem__(%3707, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %3709 : bool = aten::eq(%3708, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%3709) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.256 : int = prim::GetAttr[name="n"](%c2.31)
                    %fold.317 : int = prim::GetAttr[name="fold"](%c2.31)
                    %h.256 : int = prim::GetAttr[name="h"](%c2.31)
                    %w.256 : int = prim::GetAttr[name="w"](%c2.31)
                    %3714 : int[] = prim::ListConstruct(%n.256, %fold.317, %h.256, %w.256)
                    %3715 : Tensor = aten::zeros(%3714, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c2.31, %3715)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c2.31, %input_right.465)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.31, %34)
                -> ()
            -> (%34)
          block1():
            %3716 : bool = aten::__is__(%input_right.461, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.467 : Tensor?, %output.205 : Tensor = prim::If(%3716) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.574 : Tensor? = prim::GetAttr[name="center"](%c2.31)
                %3720 : bool = aten::__isnot__(%center.574, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%3720) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.338 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.31)
                %center.576 : Tensor? = prim::GetAttr[name="center"](%c2.31)
                %n.258 : int = prim::GetAttr[name="n"](%c2.31)
                %fold.319 : int = prim::GetAttr[name="fold"](%c2.31)
                %h.258 : int = prim::GetAttr[name="h"](%c2.31)
                %w.258 : int = prim::GetAttr[name="w"](%c2.31)
                %3728 : int[] = prim::ListConstruct(%n.258, %fold.319, %h.258, %w.258)
                %3729 : Tensor = aten::zeros(%3728, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %3731 : bool = aten::__is__(%center.576, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3732 : bool = aten::__not__(%3731) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.578 : Tensor, %left_fold_2fold.340 : Tensor = prim::If(%3732) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.580 : Tensor = prim::unchecked_cast(%center.576)
                    -> (%center.580, %left_fold_2fold.338)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3736 : int[] = aten::size(%center.578) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.260 : int, %c.194 : int, %h.260 : int, %w.260 : int = prim::ListUnpack(%3736)
                %fold.321 : int = aten::floordiv(%c.194, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3742 : int[] = aten::size(%left_fold_2fold.340) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3743 : int = aten::__getitem__(%3742, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3744 : bool = aten::eq(%3743, %fold.321) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3744) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3746 : Tensor = aten::slice(%3729, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3747 : Tensor = aten::slice(%3746, %33, %34, %fold.321, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3748 : Tensor = aten::slice(%3747, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3749 : Tensor = aten::slice(%3748, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3750 : Tensor = aten::slice(%center.578, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3751 : int = aten::mul(%fold.321, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3752 : Tensor = aten::slice(%3750, %33, %3751, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3753 : Tensor = aten::slice(%3752, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3754 : Tensor = aten::slice(%3753, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3755 : Tensor[] = prim::ListConstruct(%3749, %left_fold_2fold.340, %3754)
                %3756 : Tensor = aten::cat(%3755, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.207 : Tensor = aten::conv2d(%3756, %self.temp2.downc0.memconv.c2.op.conv.weight, %self.temp2.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.461, %output.207)
              block1():
                %input_right.469 : Tensor = prim::unchecked_cast(%input_right.461)
                %left_fold_2fold.342 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.31)
                %center.582 : Tensor? = prim::GetAttr[name="center"](%c2.31)
                %3768 : bool = aten::__is__(%center.582, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3769 : bool = aten::__not__(%3768) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.584 : Tensor, %left_fold_2fold.344 : Tensor = prim::If(%3769) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.586 : Tensor = prim::unchecked_cast(%center.582)
                    -> (%center.586, %left_fold_2fold.342)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3773 : int[] = aten::size(%center.584) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.262 : int, %c.196 : int, %h.262 : int, %w.262 : int = prim::ListUnpack(%3773)
                %fold.323 : int = aten::floordiv(%c.196, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3779 : int[] = aten::size(%left_fold_2fold.344) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3780 : int = aten::__getitem__(%3779, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3781 : bool = aten::eq(%3780, %fold.323) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3781) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3783 : Tensor = aten::slice(%input_right.469, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3784 : Tensor = aten::slice(%3783, %33, %34, %fold.323, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3785 : Tensor = aten::slice(%3784, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3786 : Tensor = aten::slice(%3785, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3787 : Tensor = aten::slice(%center.584, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3788 : int = aten::mul(%fold.323, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3789 : Tensor = aten::slice(%3787, %33, %3788, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3790 : Tensor = aten::slice(%3789, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3791 : Tensor = aten::slice(%3790, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3792 : Tensor[] = prim::ListConstruct(%3786, %left_fold_2fold.344, %3791)
                %3793 : Tensor = aten::cat(%3792, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.209 : Tensor = aten::conv2d(%3793, %self.temp2.downc0.memconv.c2.op.conv.weight, %self.temp2.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.469, %output.209)
            %center.588 : Tensor? = prim::GetAttr[name="center"](%c2.31)
            %fold.325 : int = prim::GetAttr[name="fold"](%c2.31)
            %3803 : bool = aten::__isnot__(%center.588, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.512 : Tensor = prim::If(%3803) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.514 : Tensor = prim::unchecked_cast(%center.588)
                -> (%x.514)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %3806 : Tensor = aten::slice(%x.512, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3807 : int = aten::mul(%fold.325, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %3808 : Tensor = aten::slice(%3806, %33, %fold.325, %3807, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3809 : Tensor = aten::slice(%3808, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3810 : Tensor = aten::slice(%3809, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c2.31, %3810)
            %3811 : bool = aten::__isnot__(%input_right.467, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%3811) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.471 : Tensor = prim::unchecked_cast(%input_right.467)
                 = prim::SetAttr[name="center"](%c2.31, %input_right.471)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.31, %34)
                -> ()
            -> (%output.205)
        %3813 : bool = aten::__isnot__(%x.510, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
        %x1.98 : Tensor? = prim::If(%3813) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
          block0():
            %x.516 : Tensor = prim::unchecked_cast(%x.510)
            %x.518 : Tensor = aten::hardtanh_(%x.516, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.518)
          block1():
            -> (%x.510)
        %skip3.15 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip3"](%temp2.3)
        %3818 : bool = aten::__isnot__(%x1.98, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
         = prim::If(%3818) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
          block0():
            %x.520 : Tensor = prim::unchecked_cast(%x1.98)
            %mem_list.51 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.15)
             = aten::insert(%mem_list.51, %32, %x.520) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
            -> ()
          block1():
            -> ()
        %downc1.8 : __torch__.upscale.model.bsvd.model.___torch_mangle_38.DownBlock = prim::GetAttr[name="downc1"](%temp2.3)
        %3822 : bool = aten::__isnot__(%x1.98, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:11
        %x.522 : Tensor? = prim::If(%3822) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:8
          block0():
            %x.524 : Tensor = prim::unchecked_cast(%x1.98)
            %input.97 : Tensor = aten::conv2d(%x.524, %self.temp2.downc1.convblock.0.weight, %self.temp2.downc1.convblock.0.bias, %7565, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %x.526 : Tensor = aten::hardtanh_(%input.97, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.526)
          block1():
            -> (%x1.98)
        %memconv.33 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%downc1.8)
        %c1.33 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.33)
        %3836 : bool = aten::__isnot__(%x.522, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.473 : Tensor? = prim::If(%3836) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.475 : Tensor = prim::unchecked_cast(%x.522)
            %3839 : int[] = aten::size(%input_right.475) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %3840 : int, %3841 : int, %3842 : int, %3843 : int = prim::ListUnpack(%3839)
             = prim::SetAttr[name="n"](%c1.33, %3840)
             = prim::SetAttr[name="c"](%c1.33, %3841)
             = prim::SetAttr[name="h"](%c1.33, %3842)
             = prim::SetAttr[name="w"](%c1.33, %3843)
            %c.198 : int = prim::GetAttr[name="c"](%c1.33)
            %3845 : int = aten::floordiv(%c.198, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c1.33, %3845)
            -> (%input_right.475)
          block1():
            -> (%x.522)
        %center.590 : Tensor? = prim::GetAttr[name="center"](%c1.33)
        %3847 : bool = aten::__is__(%center.590, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.528 : Tensor? = prim::If(%3847) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %3849 : bool = aten::__isnot__(%input_right.473, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%3849) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.477 : Tensor = prim::unchecked_cast(%input_right.473)
                %left_fold_2fold.346 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.33)
                %3852 : int[] = aten::size(%left_fold_2fold.346) # <string>:13:9
                %3853 : int = aten::__getitem__(%3852, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %3854 : bool = aten::eq(%3853, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%3854) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.264 : int = prim::GetAttr[name="n"](%c1.33)
                    %fold.327 : int = prim::GetAttr[name="fold"](%c1.33)
                    %h.264 : int = prim::GetAttr[name="h"](%c1.33)
                    %w.264 : int = prim::GetAttr[name="w"](%c1.33)
                    %3859 : int[] = prim::ListConstruct(%n.264, %fold.327, %h.264, %w.264)
                    %3860 : Tensor = aten::zeros(%3859, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c1.33, %3860)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c1.33, %input_right.477)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.33, %34)
                -> ()
            -> (%34)
          block1():
            %3861 : bool = aten::__is__(%input_right.473, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.479 : Tensor?, %output.211 : Tensor = prim::If(%3861) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.592 : Tensor? = prim::GetAttr[name="center"](%c1.33)
                %3865 : bool = aten::__isnot__(%center.592, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%3865) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.348 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.33)
                %center.594 : Tensor? = prim::GetAttr[name="center"](%c1.33)
                %n.266 : int = prim::GetAttr[name="n"](%c1.33)
                %fold.329 : int = prim::GetAttr[name="fold"](%c1.33)
                %h.266 : int = prim::GetAttr[name="h"](%c1.33)
                %w.266 : int = prim::GetAttr[name="w"](%c1.33)
                %3873 : int[] = prim::ListConstruct(%n.266, %fold.329, %h.266, %w.266)
                %3874 : Tensor = aten::zeros(%3873, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %3876 : bool = aten::__is__(%center.594, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3877 : bool = aten::__not__(%3876) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.596 : Tensor, %left_fold_2fold.350 : Tensor = prim::If(%3877) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.598 : Tensor = prim::unchecked_cast(%center.594)
                    -> (%center.598, %left_fold_2fold.348)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3881 : int[] = aten::size(%center.596) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.268 : int, %c.200 : int, %h.268 : int, %w.268 : int = prim::ListUnpack(%3881)
                %fold.331 : int = aten::floordiv(%c.200, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3887 : int[] = aten::size(%left_fold_2fold.350) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3888 : int = aten::__getitem__(%3887, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3889 : bool = aten::eq(%3888, %fold.331) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3889) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3891 : Tensor = aten::slice(%3874, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3892 : Tensor = aten::slice(%3891, %33, %34, %fold.331, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3893 : Tensor = aten::slice(%3892, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3894 : Tensor = aten::slice(%3893, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3895 : Tensor = aten::slice(%center.596, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3896 : int = aten::mul(%fold.331, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3897 : Tensor = aten::slice(%3895, %33, %3896, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3898 : Tensor = aten::slice(%3897, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3899 : Tensor = aten::slice(%3898, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3900 : Tensor[] = prim::ListConstruct(%3894, %left_fold_2fold.350, %3899)
                %3901 : Tensor = aten::cat(%3900, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.213 : Tensor = aten::conv2d(%3901, %self.temp2.downc1.memconv.c1.op.conv.weight, %self.temp2.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.473, %output.213)
              block1():
                %input_right.481 : Tensor = prim::unchecked_cast(%input_right.473)
                %left_fold_2fold.352 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.33)
                %center.600 : Tensor? = prim::GetAttr[name="center"](%c1.33)
                %3913 : bool = aten::__is__(%center.600, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %3914 : bool = aten::__not__(%3913) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.602 : Tensor, %left_fold_2fold.354 : Tensor = prim::If(%3914) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.604 : Tensor = prim::unchecked_cast(%center.600)
                    -> (%center.604, %left_fold_2fold.352)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %3918 : int[] = aten::size(%center.602) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.270 : int, %c.202 : int, %h.270 : int, %w.270 : int = prim::ListUnpack(%3918)
                %fold.333 : int = aten::floordiv(%c.202, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %3924 : int[] = aten::size(%left_fold_2fold.354) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3925 : int = aten::__getitem__(%3924, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %3926 : bool = aten::eq(%3925, %fold.333) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%3926) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %3928 : Tensor = aten::slice(%input_right.481, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3929 : Tensor = aten::slice(%3928, %33, %34, %fold.333, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3930 : Tensor = aten::slice(%3929, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3931 : Tensor = aten::slice(%3930, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %3932 : Tensor = aten::slice(%center.602, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3933 : int = aten::mul(%fold.333, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %3934 : Tensor = aten::slice(%3932, %33, %3933, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3935 : Tensor = aten::slice(%3934, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3936 : Tensor = aten::slice(%3935, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %3937 : Tensor[] = prim::ListConstruct(%3931, %left_fold_2fold.354, %3936)
                %3938 : Tensor = aten::cat(%3937, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.215 : Tensor = aten::conv2d(%3938, %self.temp2.downc1.memconv.c1.op.conv.weight, %self.temp2.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.481, %output.215)
            %center.606 : Tensor? = prim::GetAttr[name="center"](%c1.33)
            %fold.335 : int = prim::GetAttr[name="fold"](%c1.33)
            %3948 : bool = aten::__isnot__(%center.606, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.530 : Tensor = prim::If(%3948) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.532 : Tensor = prim::unchecked_cast(%center.606)
                -> (%x.532)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %3951 : Tensor = aten::slice(%x.530, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3952 : int = aten::mul(%fold.335, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %3953 : Tensor = aten::slice(%3951, %33, %fold.335, %3952, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3954 : Tensor = aten::slice(%3953, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %3955 : Tensor = aten::slice(%3954, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c1.33, %3955)
            %3956 : bool = aten::__isnot__(%input_right.479, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%3956) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.483 : Tensor = prim::unchecked_cast(%input_right.479)
                 = prim::SetAttr[name="center"](%c1.33, %input_right.483)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.33, %34)
                -> ()
            -> (%output.211)
        %3958 : bool = aten::__isnot__(%x.528, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
        %x.534 : Tensor? = prim::If(%3958) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
          block0():
            %x.536 : Tensor = prim::unchecked_cast(%x.528)
            %x.538 : Tensor = aten::hardtanh_(%x.536, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.538)
          block1():
            -> (%x.528)
        %c2.33 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.33)
        %3963 : bool = aten::__isnot__(%x.534, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.485 : Tensor? = prim::If(%3963) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.487 : Tensor = prim::unchecked_cast(%x.534)
            %3966 : int[] = aten::size(%input_right.487) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %3967 : int, %3968 : int, %3969 : int, %3970 : int = prim::ListUnpack(%3966)
             = prim::SetAttr[name="n"](%c2.33, %3967)
             = prim::SetAttr[name="c"](%c2.33, %3968)
             = prim::SetAttr[name="h"](%c2.33, %3969)
             = prim::SetAttr[name="w"](%c2.33, %3970)
            %c.204 : int = prim::GetAttr[name="c"](%c2.33)
            %3972 : int = aten::floordiv(%c.204, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c2.33, %3972)
            -> (%input_right.487)
          block1():
            -> (%x.534)
        %center.608 : Tensor? = prim::GetAttr[name="center"](%c2.33)
        %3974 : bool = aten::__is__(%center.608, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.540 : Tensor? = prim::If(%3974) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %3976 : bool = aten::__isnot__(%input_right.485, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%3976) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.489 : Tensor = prim::unchecked_cast(%input_right.485)
                %left_fold_2fold.356 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.33)
                %3979 : int[] = aten::size(%left_fold_2fold.356) # <string>:13:9
                %3980 : int = aten::__getitem__(%3979, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %3981 : bool = aten::eq(%3980, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%3981) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.272 : int = prim::GetAttr[name="n"](%c2.33)
                    %fold.337 : int = prim::GetAttr[name="fold"](%c2.33)
                    %h.272 : int = prim::GetAttr[name="h"](%c2.33)
                    %w.272 : int = prim::GetAttr[name="w"](%c2.33)
                    %3986 : int[] = prim::ListConstruct(%n.272, %fold.337, %h.272, %w.272)
                    %3987 : Tensor = aten::zeros(%3986, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c2.33, %3987)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c2.33, %input_right.489)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.33, %34)
                -> ()
            -> (%34)
          block1():
            %3988 : bool = aten::__is__(%input_right.485, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.491 : Tensor?, %output.217 : Tensor = prim::If(%3988) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.610 : Tensor? = prim::GetAttr[name="center"](%c2.33)
                %3992 : bool = aten::__isnot__(%center.610, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%3992) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.358 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.33)
                %center.612 : Tensor? = prim::GetAttr[name="center"](%c2.33)
                %n.274 : int = prim::GetAttr[name="n"](%c2.33)
                %fold.339 : int = prim::GetAttr[name="fold"](%c2.33)
                %h.274 : int = prim::GetAttr[name="h"](%c2.33)
                %w.274 : int = prim::GetAttr[name="w"](%c2.33)
                %4000 : int[] = prim::ListConstruct(%n.274, %fold.339, %h.274, %w.274)
                %4001 : Tensor = aten::zeros(%4000, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %4003 : bool = aten::__is__(%center.612, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %4004 : bool = aten::__not__(%4003) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.614 : Tensor, %left_fold_2fold.360 : Tensor = prim::If(%4004) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.616 : Tensor = prim::unchecked_cast(%center.612)
                    -> (%center.616, %left_fold_2fold.358)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %4008 : int[] = aten::size(%center.614) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.276 : int, %c.206 : int, %h.276 : int, %w.276 : int = prim::ListUnpack(%4008)
                %fold.341 : int = aten::floordiv(%c.206, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %4014 : int[] = aten::size(%left_fold_2fold.360) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4015 : int = aten::__getitem__(%4014, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4016 : bool = aten::eq(%4015, %fold.341) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%4016) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %4018 : Tensor = aten::slice(%4001, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4019 : Tensor = aten::slice(%4018, %33, %34, %fold.341, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4020 : Tensor = aten::slice(%4019, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4021 : Tensor = aten::slice(%4020, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4022 : Tensor = aten::slice(%center.614, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4023 : int = aten::mul(%fold.341, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %4024 : Tensor = aten::slice(%4022, %33, %4023, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4025 : Tensor = aten::slice(%4024, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4026 : Tensor = aten::slice(%4025, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4027 : Tensor[] = prim::ListConstruct(%4021, %left_fold_2fold.360, %4026)
                %4028 : Tensor = aten::cat(%4027, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.219 : Tensor = aten::conv2d(%4028, %self.temp2.downc1.memconv.c2.op.conv.weight, %self.temp2.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.485, %output.219)
              block1():
                %input_right.493 : Tensor = prim::unchecked_cast(%input_right.485)
                %left_fold_2fold.362 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.33)
                %center.618 : Tensor? = prim::GetAttr[name="center"](%c2.33)
                %4040 : bool = aten::__is__(%center.618, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %4041 : bool = aten::__not__(%4040) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.620 : Tensor, %left_fold_2fold.364 : Tensor = prim::If(%4041) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.622 : Tensor = prim::unchecked_cast(%center.618)
                    -> (%center.622, %left_fold_2fold.362)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %4045 : int[] = aten::size(%center.620) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.278 : int, %c.208 : int, %h.278 : int, %w.278 : int = prim::ListUnpack(%4045)
                %fold.343 : int = aten::floordiv(%c.208, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %4051 : int[] = aten::size(%left_fold_2fold.364) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4052 : int = aten::__getitem__(%4051, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4053 : bool = aten::eq(%4052, %fold.343) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%4053) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %4055 : Tensor = aten::slice(%input_right.493, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4056 : Tensor = aten::slice(%4055, %33, %34, %fold.343, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4057 : Tensor = aten::slice(%4056, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4058 : Tensor = aten::slice(%4057, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4059 : Tensor = aten::slice(%center.620, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4060 : int = aten::mul(%fold.343, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %4061 : Tensor = aten::slice(%4059, %33, %4060, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4062 : Tensor = aten::slice(%4061, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4063 : Tensor = aten::slice(%4062, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4064 : Tensor[] = prim::ListConstruct(%4058, %left_fold_2fold.364, %4063)
                %4065 : Tensor = aten::cat(%4064, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.221 : Tensor = aten::conv2d(%4065, %self.temp2.downc1.memconv.c2.op.conv.weight, %self.temp2.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.493, %output.221)
            %center.624 : Tensor? = prim::GetAttr[name="center"](%c2.33)
            %fold.345 : int = prim::GetAttr[name="fold"](%c2.33)
            %4075 : bool = aten::__isnot__(%center.624, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.542 : Tensor = prim::If(%4075) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.544 : Tensor = prim::unchecked_cast(%center.624)
                -> (%x.544)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %4078 : Tensor = aten::slice(%x.542, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4079 : int = aten::mul(%fold.345, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %4080 : Tensor = aten::slice(%4078, %33, %fold.345, %4079, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4081 : Tensor = aten::slice(%4080, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4082 : Tensor = aten::slice(%4081, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c2.33, %4082)
            %4083 : bool = aten::__isnot__(%input_right.491, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%4083) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.495 : Tensor = prim::unchecked_cast(%input_right.491)
                 = prim::SetAttr[name="center"](%c2.33, %input_right.495)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.33, %34)
                -> ()
            -> (%output.217)
        %4085 : bool = aten::__isnot__(%x.540, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
        %x2.40 : Tensor? = prim::If(%4085) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
          block0():
            %x.546 : Tensor = prim::unchecked_cast(%x.540)
            %x.548 : Tensor = aten::hardtanh_(%x.546, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.548)
          block1():
            -> (%x.540)
        %upc2.8 : __torch__.upscale.model.bsvd.model.___torch_mangle_45.UpBlock = prim::GetAttr[name="upc2"](%temp2.3)
        %memconv.35 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%upc2.8)
        %c1.35 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.35)
        %4092 : bool = aten::__isnot__(%x2.40, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.497 : Tensor? = prim::If(%4092) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.499 : Tensor = prim::unchecked_cast(%x2.40)
            %4095 : int[] = aten::size(%input_right.499) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %4096 : int, %4097 : int, %4098 : int, %4099 : int = prim::ListUnpack(%4095)
             = prim::SetAttr[name="n"](%c1.35, %4096)
             = prim::SetAttr[name="c"](%c1.35, %4097)
             = prim::SetAttr[name="h"](%c1.35, %4098)
             = prim::SetAttr[name="w"](%c1.35, %4099)
            %c.210 : int = prim::GetAttr[name="c"](%c1.35)
            %4101 : int = aten::floordiv(%c.210, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c1.35, %4101)
            -> (%input_right.499)
          block1():
            -> (%x2.40)
        %center.626 : Tensor? = prim::GetAttr[name="center"](%c1.35)
        %4103 : bool = aten::__is__(%center.626, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.550 : Tensor? = prim::If(%4103) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %4105 : bool = aten::__isnot__(%input_right.497, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%4105) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.501 : Tensor = prim::unchecked_cast(%input_right.497)
                %left_fold_2fold.366 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.35)
                %4108 : int[] = aten::size(%left_fold_2fold.366) # <string>:13:9
                %4109 : int = aten::__getitem__(%4108, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %4110 : bool = aten::eq(%4109, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%4110) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.280 : int = prim::GetAttr[name="n"](%c1.35)
                    %fold.347 : int = prim::GetAttr[name="fold"](%c1.35)
                    %h.280 : int = prim::GetAttr[name="h"](%c1.35)
                    %w.280 : int = prim::GetAttr[name="w"](%c1.35)
                    %4115 : int[] = prim::ListConstruct(%n.280, %fold.347, %h.280, %w.280)
                    %4116 : Tensor = aten::zeros(%4115, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c1.35, %4116)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c1.35, %input_right.501)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.35, %34)
                -> ()
            -> (%34)
          block1():
            %4117 : bool = aten::__is__(%input_right.497, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.503 : Tensor?, %output.223 : Tensor = prim::If(%4117) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.628 : Tensor? = prim::GetAttr[name="center"](%c1.35)
                %4121 : bool = aten::__isnot__(%center.628, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%4121) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.368 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.35)
                %center.630 : Tensor? = prim::GetAttr[name="center"](%c1.35)
                %n.282 : int = prim::GetAttr[name="n"](%c1.35)
                %fold.349 : int = prim::GetAttr[name="fold"](%c1.35)
                %h.282 : int = prim::GetAttr[name="h"](%c1.35)
                %w.282 : int = prim::GetAttr[name="w"](%c1.35)
                %4129 : int[] = prim::ListConstruct(%n.282, %fold.349, %h.282, %w.282)
                %4130 : Tensor = aten::zeros(%4129, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %4132 : bool = aten::__is__(%center.630, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %4133 : bool = aten::__not__(%4132) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.632 : Tensor, %left_fold_2fold.370 : Tensor = prim::If(%4133) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.634 : Tensor = prim::unchecked_cast(%center.630)
                    -> (%center.634, %left_fold_2fold.368)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %4137 : int[] = aten::size(%center.632) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.284 : int, %c.212 : int, %h.284 : int, %w.284 : int = prim::ListUnpack(%4137)
                %fold.351 : int = aten::floordiv(%c.212, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %4143 : int[] = aten::size(%left_fold_2fold.370) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4144 : int = aten::__getitem__(%4143, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4145 : bool = aten::eq(%4144, %fold.351) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%4145) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %4147 : Tensor = aten::slice(%4130, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4148 : Tensor = aten::slice(%4147, %33, %34, %fold.351, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4149 : Tensor = aten::slice(%4148, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4150 : Tensor = aten::slice(%4149, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4151 : Tensor = aten::slice(%center.632, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4152 : int = aten::mul(%fold.351, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %4153 : Tensor = aten::slice(%4151, %33, %4152, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4154 : Tensor = aten::slice(%4153, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4155 : Tensor = aten::slice(%4154, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4156 : Tensor[] = prim::ListConstruct(%4150, %left_fold_2fold.370, %4155)
                %4157 : Tensor = aten::cat(%4156, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.225 : Tensor = aten::conv2d(%4157, %self.temp2.upc2.memconv.c1.op.conv.weight, %self.temp2.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.497, %output.225)
              block1():
                %input_right.505 : Tensor = prim::unchecked_cast(%input_right.497)
                %left_fold_2fold.372 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.35)
                %center.636 : Tensor? = prim::GetAttr[name="center"](%c1.35)
                %4169 : bool = aten::__is__(%center.636, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %4170 : bool = aten::__not__(%4169) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.638 : Tensor, %left_fold_2fold.374 : Tensor = prim::If(%4170) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.640 : Tensor = prim::unchecked_cast(%center.636)
                    -> (%center.640, %left_fold_2fold.372)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %4174 : int[] = aten::size(%center.638) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.286 : int, %c.214 : int, %h.286 : int, %w.286 : int = prim::ListUnpack(%4174)
                %fold.353 : int = aten::floordiv(%c.214, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %4180 : int[] = aten::size(%left_fold_2fold.374) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4181 : int = aten::__getitem__(%4180, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4182 : bool = aten::eq(%4181, %fold.353) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%4182) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %4184 : Tensor = aten::slice(%input_right.505, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4185 : Tensor = aten::slice(%4184, %33, %34, %fold.353, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4186 : Tensor = aten::slice(%4185, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4187 : Tensor = aten::slice(%4186, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4188 : Tensor = aten::slice(%center.638, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4189 : int = aten::mul(%fold.353, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %4190 : Tensor = aten::slice(%4188, %33, %4189, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4191 : Tensor = aten::slice(%4190, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4192 : Tensor = aten::slice(%4191, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4193 : Tensor[] = prim::ListConstruct(%4187, %left_fold_2fold.374, %4192)
                %4194 : Tensor = aten::cat(%4193, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.227 : Tensor = aten::conv2d(%4194, %self.temp2.upc2.memconv.c1.op.conv.weight, %self.temp2.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.505, %output.227)
            %center.642 : Tensor? = prim::GetAttr[name="center"](%c1.35)
            %fold.355 : int = prim::GetAttr[name="fold"](%c1.35)
            %4204 : bool = aten::__isnot__(%center.642, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.552 : Tensor = prim::If(%4204) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.554 : Tensor = prim::unchecked_cast(%center.642)
                -> (%x.554)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %4207 : Tensor = aten::slice(%x.552, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4208 : int = aten::mul(%fold.355, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %4209 : Tensor = aten::slice(%4207, %33, %fold.355, %4208, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4210 : Tensor = aten::slice(%4209, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4211 : Tensor = aten::slice(%4210, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c1.35, %4211)
            %4212 : bool = aten::__isnot__(%input_right.503, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%4212) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.507 : Tensor = prim::unchecked_cast(%input_right.503)
                 = prim::SetAttr[name="center"](%c1.35, %input_right.507)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.35, %34)
                -> ()
            -> (%output.223)
        %4214 : bool = aten::__isnot__(%x.550, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
        %x.556 : Tensor? = prim::If(%4214) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
          block0():
            %x.558 : Tensor = prim::unchecked_cast(%x.550)
            %x.560 : Tensor = aten::hardtanh_(%x.558, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.560)
          block1():
            -> (%x.550)
        %c2.35 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.35)
        %4219 : bool = aten::__isnot__(%x.556, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.509 : Tensor? = prim::If(%4219) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.511 : Tensor = prim::unchecked_cast(%x.556)
            %4222 : int[] = aten::size(%input_right.511) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %4223 : int, %4224 : int, %4225 : int, %4226 : int = prim::ListUnpack(%4222)
             = prim::SetAttr[name="n"](%c2.35, %4223)
             = prim::SetAttr[name="c"](%c2.35, %4224)
             = prim::SetAttr[name="h"](%c2.35, %4225)
             = prim::SetAttr[name="w"](%c2.35, %4226)
            %c.216 : int = prim::GetAttr[name="c"](%c2.35)
            %4228 : int = aten::floordiv(%c.216, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c2.35, %4228)
            -> (%input_right.511)
          block1():
            -> (%x.556)
        %center.644 : Tensor? = prim::GetAttr[name="center"](%c2.35)
        %4230 : bool = aten::__is__(%center.644, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.562 : Tensor? = prim::If(%4230) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %4232 : bool = aten::__isnot__(%input_right.509, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%4232) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.513 : Tensor = prim::unchecked_cast(%input_right.509)
                %left_fold_2fold.376 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.35)
                %4235 : int[] = aten::size(%left_fold_2fold.376) # <string>:13:9
                %4236 : int = aten::__getitem__(%4235, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %4237 : bool = aten::eq(%4236, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%4237) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.288 : int = prim::GetAttr[name="n"](%c2.35)
                    %fold.357 : int = prim::GetAttr[name="fold"](%c2.35)
                    %h.288 : int = prim::GetAttr[name="h"](%c2.35)
                    %w.288 : int = prim::GetAttr[name="w"](%c2.35)
                    %4242 : int[] = prim::ListConstruct(%n.288, %fold.357, %h.288, %w.288)
                    %4243 : Tensor = aten::zeros(%4242, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c2.35, %4243)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c2.35, %input_right.513)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.35, %34)
                -> ()
            -> (%34)
          block1():
            %4244 : bool = aten::__is__(%input_right.509, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.515 : Tensor?, %output.229 : Tensor = prim::If(%4244) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.646 : Tensor? = prim::GetAttr[name="center"](%c2.35)
                %4248 : bool = aten::__isnot__(%center.646, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%4248) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.378 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.35)
                %center.648 : Tensor? = prim::GetAttr[name="center"](%c2.35)
                %n.290 : int = prim::GetAttr[name="n"](%c2.35)
                %fold.359 : int = prim::GetAttr[name="fold"](%c2.35)
                %h.290 : int = prim::GetAttr[name="h"](%c2.35)
                %w.290 : int = prim::GetAttr[name="w"](%c2.35)
                %4256 : int[] = prim::ListConstruct(%n.290, %fold.359, %h.290, %w.290)
                %4257 : Tensor = aten::zeros(%4256, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %4259 : bool = aten::__is__(%center.648, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %4260 : bool = aten::__not__(%4259) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.650 : Tensor, %left_fold_2fold.380 : Tensor = prim::If(%4260) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.652 : Tensor = prim::unchecked_cast(%center.648)
                    -> (%center.652, %left_fold_2fold.378)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %4264 : int[] = aten::size(%center.650) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.292 : int, %c.218 : int, %h.292 : int, %w.292 : int = prim::ListUnpack(%4264)
                %fold.361 : int = aten::floordiv(%c.218, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %4270 : int[] = aten::size(%left_fold_2fold.380) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4271 : int = aten::__getitem__(%4270, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4272 : bool = aten::eq(%4271, %fold.361) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%4272) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %4274 : Tensor = aten::slice(%4257, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4275 : Tensor = aten::slice(%4274, %33, %34, %fold.361, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4276 : Tensor = aten::slice(%4275, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4277 : Tensor = aten::slice(%4276, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4278 : Tensor = aten::slice(%center.650, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4279 : int = aten::mul(%fold.361, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %4280 : Tensor = aten::slice(%4278, %33, %4279, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4281 : Tensor = aten::slice(%4280, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4282 : Tensor = aten::slice(%4281, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4283 : Tensor[] = prim::ListConstruct(%4277, %left_fold_2fold.380, %4282)
                %4284 : Tensor = aten::cat(%4283, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.231 : Tensor = aten::conv2d(%4284, %self.temp2.upc2.memconv.c2.op.conv.weight, %self.temp2.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.509, %output.231)
              block1():
                %input_right.517 : Tensor = prim::unchecked_cast(%input_right.509)
                %left_fold_2fold.382 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.35)
                %center.654 : Tensor? = prim::GetAttr[name="center"](%c2.35)
                %4296 : bool = aten::__is__(%center.654, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %4297 : bool = aten::__not__(%4296) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.656 : Tensor, %left_fold_2fold.384 : Tensor = prim::If(%4297) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.658 : Tensor = prim::unchecked_cast(%center.654)
                    -> (%center.658, %left_fold_2fold.382)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %4301 : int[] = aten::size(%center.656) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.294 : int, %c.220 : int, %h.294 : int, %w.294 : int = prim::ListUnpack(%4301)
                %fold.363 : int = aten::floordiv(%c.220, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %4307 : int[] = aten::size(%left_fold_2fold.384) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4308 : int = aten::__getitem__(%4307, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4309 : bool = aten::eq(%4308, %fold.363) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%4309) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %4311 : Tensor = aten::slice(%input_right.517, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4312 : Tensor = aten::slice(%4311, %33, %34, %fold.363, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4313 : Tensor = aten::slice(%4312, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4314 : Tensor = aten::slice(%4313, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4315 : Tensor = aten::slice(%center.656, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4316 : int = aten::mul(%fold.363, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %4317 : Tensor = aten::slice(%4315, %33, %4316, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4318 : Tensor = aten::slice(%4317, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4319 : Tensor = aten::slice(%4318, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4320 : Tensor[] = prim::ListConstruct(%4314, %left_fold_2fold.384, %4319)
                %4321 : Tensor = aten::cat(%4320, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.233 : Tensor = aten::conv2d(%4321, %self.temp2.upc2.memconv.c2.op.conv.weight, %self.temp2.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.517, %output.233)
            %center.660 : Tensor? = prim::GetAttr[name="center"](%c2.35)
            %fold.365 : int = prim::GetAttr[name="fold"](%c2.35)
            %4331 : bool = aten::__isnot__(%center.660, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.564 : Tensor = prim::If(%4331) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.566 : Tensor = prim::unchecked_cast(%center.660)
                -> (%x.566)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %4334 : Tensor = aten::slice(%x.564, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4335 : int = aten::mul(%fold.365, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %4336 : Tensor = aten::slice(%4334, %33, %fold.365, %4335, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4337 : Tensor = aten::slice(%4336, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4338 : Tensor = aten::slice(%4337, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c2.35, %4338)
            %4339 : bool = aten::__isnot__(%input_right.515, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%4339) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.519 : Tensor = prim::unchecked_cast(%input_right.515)
                 = prim::SetAttr[name="center"](%c2.35, %input_right.519)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.35, %34)
                -> ()
            -> (%output.229)
        %4341 : bool = aten::__isnot__(%x.562, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
        %x.568 : Tensor? = prim::If(%4341) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
          block0():
            %x.570 : Tensor = prim::unchecked_cast(%x.562)
            %x.572 : Tensor = aten::hardtanh_(%x.570, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.572)
          block1():
            -> (%x.562)
        %4345 : bool = aten::__isnot__(%x.568, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
        %x2.42 : Tensor? = prim::If(%4345) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
          block0():
            %x.574 : Tensor = prim::unchecked_cast(%x.568)
            %input.99 : Tensor = aten::conv2d(%x.574, %self.temp2.upc2.convblock.0.weight, %self.temp2.upc2.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %x.576 : Tensor = aten::pixel_shuffle(%input.99, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
            -> (%x.576)
          block1():
            -> (%x.568)
        %upc1.8 : __torch__.upscale.model.bsvd.model.___torch_mangle_49.UpBlock = prim::GetAttr[name="upc1"](%temp2.3)
        %4359 : bool = aten::__isnot__(%x2.42, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
        %4360 : Tensor? = prim::If(%4359) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
          block0():
            %mem_list.53 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.15)
            %4362 : Tensor = aten::pop(%mem_list.53, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
            -> (%4362)
          block1():
            -> (%34)
        %4363 : bool = aten::__is__(%x2.42, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
        %4364 : bool, %x1.100 : Tensor? = prim::If(%4363) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
          block0():
            -> (%35, %x2.42)
          block1():
            %x1.102 : Tensor = prim::unchecked_cast(%x2.42)
            %4367 : bool = aten::__is__(%4360, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
            -> (%4367, %x1.102)
        %4368 : Tensor? = prim::If(%4364) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
          block0():
            -> (%34)
          block1():
            %x1.104 : Tensor = prim::unchecked_cast(%x1.100)
            %x2.44 : Tensor = prim::unchecked_cast(%4360)
            %4371 : Tensor = aten::add(%x1.104, %x2.44, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
            -> (%4371)
        %memconv.37 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%upc1.8)
        %c1.37 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.37)
        %4374 : bool = aten::__isnot__(%4368, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.521 : Tensor? = prim::If(%4374) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.523 : Tensor = prim::unchecked_cast(%4368)
            %4377 : int[] = aten::size(%input_right.523) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %4378 : int, %4379 : int, %4380 : int, %4381 : int = prim::ListUnpack(%4377)
             = prim::SetAttr[name="n"](%c1.37, %4378)
             = prim::SetAttr[name="c"](%c1.37, %4379)
             = prim::SetAttr[name="h"](%c1.37, %4380)
             = prim::SetAttr[name="w"](%c1.37, %4381)
            %c.222 : int = prim::GetAttr[name="c"](%c1.37)
            %4383 : int = aten::floordiv(%c.222, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c1.37, %4383)
            -> (%input_right.523)
          block1():
            -> (%4368)
        %center.662 : Tensor? = prim::GetAttr[name="center"](%c1.37)
        %4385 : bool = aten::__is__(%center.662, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.578 : Tensor? = prim::If(%4385) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %4387 : bool = aten::__isnot__(%input_right.521, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%4387) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.525 : Tensor = prim::unchecked_cast(%input_right.521)
                %left_fold_2fold.386 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.37)
                %4390 : int[] = aten::size(%left_fold_2fold.386) # <string>:13:9
                %4391 : int = aten::__getitem__(%4390, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %4392 : bool = aten::eq(%4391, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%4392) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.296 : int = prim::GetAttr[name="n"](%c1.37)
                    %fold.367 : int = prim::GetAttr[name="fold"](%c1.37)
                    %h.296 : int = prim::GetAttr[name="h"](%c1.37)
                    %w.296 : int = prim::GetAttr[name="w"](%c1.37)
                    %4397 : int[] = prim::ListConstruct(%n.296, %fold.367, %h.296, %w.296)
                    %4398 : Tensor = aten::zeros(%4397, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c1.37, %4398)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c1.37, %input_right.525)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.37, %34)
                -> ()
            -> (%34)
          block1():
            %4399 : bool = aten::__is__(%input_right.521, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.527 : Tensor?, %output.235 : Tensor = prim::If(%4399) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.664 : Tensor? = prim::GetAttr[name="center"](%c1.37)
                %4403 : bool = aten::__isnot__(%center.664, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%4403) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.388 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.37)
                %center.666 : Tensor? = prim::GetAttr[name="center"](%c1.37)
                %n.298 : int = prim::GetAttr[name="n"](%c1.37)
                %fold.369 : int = prim::GetAttr[name="fold"](%c1.37)
                %h.298 : int = prim::GetAttr[name="h"](%c1.37)
                %w.298 : int = prim::GetAttr[name="w"](%c1.37)
                %4411 : int[] = prim::ListConstruct(%n.298, %fold.369, %h.298, %w.298)
                %4412 : Tensor = aten::zeros(%4411, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %4414 : bool = aten::__is__(%center.666, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %4415 : bool = aten::__not__(%4414) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.668 : Tensor, %left_fold_2fold.390 : Tensor = prim::If(%4415) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.670 : Tensor = prim::unchecked_cast(%center.666)
                    -> (%center.670, %left_fold_2fold.388)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %4419 : int[] = aten::size(%center.668) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.300 : int, %c.224 : int, %h.300 : int, %w.300 : int = prim::ListUnpack(%4419)
                %fold.371 : int = aten::floordiv(%c.224, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %4425 : int[] = aten::size(%left_fold_2fold.390) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4426 : int = aten::__getitem__(%4425, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4427 : bool = aten::eq(%4426, %fold.371) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%4427) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %4429 : Tensor = aten::slice(%4412, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4430 : Tensor = aten::slice(%4429, %33, %34, %fold.371, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4431 : Tensor = aten::slice(%4430, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4432 : Tensor = aten::slice(%4431, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4433 : Tensor = aten::slice(%center.668, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4434 : int = aten::mul(%fold.371, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %4435 : Tensor = aten::slice(%4433, %33, %4434, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4436 : Tensor = aten::slice(%4435, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4437 : Tensor = aten::slice(%4436, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4438 : Tensor[] = prim::ListConstruct(%4432, %left_fold_2fold.390, %4437)
                %4439 : Tensor = aten::cat(%4438, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.237 : Tensor = aten::conv2d(%4439, %self.temp2.upc1.memconv.c1.op.conv.weight, %self.temp2.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.521, %output.237)
              block1():
                %input_right.529 : Tensor = prim::unchecked_cast(%input_right.521)
                %left_fold_2fold.392 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.37)
                %center.672 : Tensor? = prim::GetAttr[name="center"](%c1.37)
                %4451 : bool = aten::__is__(%center.672, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %4452 : bool = aten::__not__(%4451) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.674 : Tensor, %left_fold_2fold.394 : Tensor = prim::If(%4452) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.676 : Tensor = prim::unchecked_cast(%center.672)
                    -> (%center.676, %left_fold_2fold.392)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %4456 : int[] = aten::size(%center.674) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.302 : int, %c.226 : int, %h.302 : int, %w.302 : int = prim::ListUnpack(%4456)
                %fold.373 : int = aten::floordiv(%c.226, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %4462 : int[] = aten::size(%left_fold_2fold.394) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4463 : int = aten::__getitem__(%4462, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4464 : bool = aten::eq(%4463, %fold.373) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%4464) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %4466 : Tensor = aten::slice(%input_right.529, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4467 : Tensor = aten::slice(%4466, %33, %34, %fold.373, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4468 : Tensor = aten::slice(%4467, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4469 : Tensor = aten::slice(%4468, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4470 : Tensor = aten::slice(%center.674, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4471 : int = aten::mul(%fold.373, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %4472 : Tensor = aten::slice(%4470, %33, %4471, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4473 : Tensor = aten::slice(%4472, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4474 : Tensor = aten::slice(%4473, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4475 : Tensor[] = prim::ListConstruct(%4469, %left_fold_2fold.394, %4474)
                %4476 : Tensor = aten::cat(%4475, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.239 : Tensor = aten::conv2d(%4476, %self.temp2.upc1.memconv.c1.op.conv.weight, %self.temp2.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.529, %output.239)
            %center.678 : Tensor? = prim::GetAttr[name="center"](%c1.37)
            %fold.375 : int = prim::GetAttr[name="fold"](%c1.37)
            %4486 : bool = aten::__isnot__(%center.678, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.580 : Tensor = prim::If(%4486) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.582 : Tensor = prim::unchecked_cast(%center.678)
                -> (%x.582)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %4489 : Tensor = aten::slice(%x.580, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4490 : int = aten::mul(%fold.375, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %4491 : Tensor = aten::slice(%4489, %33, %fold.375, %4490, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4492 : Tensor = aten::slice(%4491, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4493 : Tensor = aten::slice(%4492, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c1.37, %4493)
            %4494 : bool = aten::__isnot__(%input_right.527, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%4494) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.531 : Tensor = prim::unchecked_cast(%input_right.527)
                 = prim::SetAttr[name="center"](%c1.37, %input_right.531)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c1.37, %34)
                -> ()
            -> (%output.235)
        %4496 : bool = aten::__isnot__(%x.578, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
        %x.584 : Tensor? = prim::If(%4496) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
          block0():
            %x.586 : Tensor = prim::unchecked_cast(%x.578)
            %x.588 : Tensor = aten::hardtanh_(%x.586, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.588)
          block1():
            -> (%x.578)
        %c2.37 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.37)
        %4501 : bool = aten::__isnot__(%x.584, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
        %input_right.533 : Tensor? = prim::If(%4501) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
          block0():
            %input_right.535 : Tensor = prim::unchecked_cast(%x.584)
            %4504 : int[] = aten::size(%input_right.535) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
            %4505 : int, %4506 : int, %4507 : int, %4508 : int = prim::ListUnpack(%4504)
             = prim::SetAttr[name="n"](%c2.37, %4505)
             = prim::SetAttr[name="c"](%c2.37, %4506)
             = prim::SetAttr[name="h"](%c2.37, %4507)
             = prim::SetAttr[name="w"](%c2.37, %4508)
            %c.228 : int = prim::GetAttr[name="c"](%c2.37)
            %4510 : int = aten::floordiv(%c.228, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
             = prim::SetAttr[name="fold"](%c2.37, %4510)
            -> (%input_right.535)
          block1():
            -> (%x.584)
        %center.680 : Tensor? = prim::GetAttr[name="center"](%c2.37)
        %4512 : bool = aten::__is__(%center.680, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
        %x.590 : Tensor? = prim::If(%4512) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
          block0():
            %4514 : bool = aten::__isnot__(%input_right.533, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
             = prim::If(%4514) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
              block0():
                %input_right.537 : Tensor = prim::unchecked_cast(%input_right.533)
                %left_fold_2fold.396 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.37)
                %4517 : int[] = aten::size(%left_fold_2fold.396) # <string>:13:9
                %4518 : int = aten::__getitem__(%4517, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                %4519 : bool = aten::eq(%4518, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                 = prim::If(%4519) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                  block0():
                    %n.304 : int = prim::GetAttr[name="n"](%c2.37)
                    %fold.377 : int = prim::GetAttr[name="fold"](%c2.37)
                    %h.304 : int = prim::GetAttr[name="h"](%c2.37)
                    %w.304 : int = prim::GetAttr[name="w"](%c2.37)
                    %4524 : int[] = prim::ListConstruct(%n.304, %fold.377, %h.304, %w.304)
                    %4525 : Tensor = aten::zeros(%4524, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                     = prim::SetAttr[name="left_fold_2fold"](%c2.37, %4525)
                    -> ()
                  block1():
                    -> ()
                 = prim::SetAttr[name="center"](%c2.37, %input_right.537)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.37, %34)
                -> ()
            -> (%34)
          block1():
            %4526 : bool = aten::__is__(%input_right.533, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
            %input_right.539 : Tensor?, %output.241 : Tensor = prim::If(%4526) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
              block0():
                %center.682 : Tensor? = prim::GetAttr[name="center"](%c2.37)
                %4530 : bool = aten::__isnot__(%center.682, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%4530) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.398 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.37)
                %center.684 : Tensor? = prim::GetAttr[name="center"](%c2.37)
                %n.306 : int = prim::GetAttr[name="n"](%c2.37)
                %fold.379 : int = prim::GetAttr[name="fold"](%c2.37)
                %h.306 : int = prim::GetAttr[name="h"](%c2.37)
                %w.306 : int = prim::GetAttr[name="w"](%c2.37)
                %4538 : int[] = prim::ListConstruct(%n.306, %fold.379, %h.306, %w.306)
                %4539 : Tensor = aten::zeros(%4538, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %4541 : bool = aten::__is__(%center.684, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %4542 : bool = aten::__not__(%4541) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.686 : Tensor, %left_fold_2fold.400 : Tensor = prim::If(%4542) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.688 : Tensor = prim::unchecked_cast(%center.684)
                    -> (%center.688, %left_fold_2fold.398)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %4546 : int[] = aten::size(%center.686) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.308 : int, %c.230 : int, %h.308 : int, %w.308 : int = prim::ListUnpack(%4546)
                %fold.381 : int = aten::floordiv(%c.230, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %4552 : int[] = aten::size(%left_fold_2fold.400) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4553 : int = aten::__getitem__(%4552, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4554 : bool = aten::eq(%4553, %fold.381) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%4554) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %4556 : Tensor = aten::slice(%4539, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4557 : Tensor = aten::slice(%4556, %33, %34, %fold.381, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4558 : Tensor = aten::slice(%4557, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4559 : Tensor = aten::slice(%4558, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4560 : Tensor = aten::slice(%center.686, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4561 : int = aten::mul(%fold.381, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %4562 : Tensor = aten::slice(%4560, %33, %4561, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4563 : Tensor = aten::slice(%4562, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4564 : Tensor = aten::slice(%4563, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4565 : Tensor[] = prim::ListConstruct(%4559, %left_fold_2fold.400, %4564)
                %4566 : Tensor = aten::cat(%4565, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.243 : Tensor = aten::conv2d(%4566, %self.temp2.upc1.memconv.c2.op.conv.weight, %self.temp2.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.533, %output.243)
              block1():
                %input_right.541 : Tensor = prim::unchecked_cast(%input_right.533)
                %left_fold_2fold.402 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.37)
                %center.690 : Tensor? = prim::GetAttr[name="center"](%c2.37)
                %4578 : bool = aten::__is__(%center.690, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %4579 : bool = aten::__not__(%4578) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.692 : Tensor, %left_fold_2fold.404 : Tensor = prim::If(%4579) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.694 : Tensor = prim::unchecked_cast(%center.690)
                    -> (%center.694, %left_fold_2fold.402)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %4583 : int[] = aten::size(%center.692) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.310 : int, %c.232 : int, %h.310 : int, %w.310 : int = prim::ListUnpack(%4583)
                %fold.383 : int = aten::floordiv(%c.232, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %4589 : int[] = aten::size(%left_fold_2fold.404) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4590 : int = aten::__getitem__(%4589, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4591 : bool = aten::eq(%4590, %fold.383) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%4591) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %4593 : Tensor = aten::slice(%input_right.541, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4594 : Tensor = aten::slice(%4593, %33, %34, %fold.383, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4595 : Tensor = aten::slice(%4594, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4596 : Tensor = aten::slice(%4595, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4597 : Tensor = aten::slice(%center.692, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4598 : int = aten::mul(%fold.383, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %4599 : Tensor = aten::slice(%4597, %33, %4598, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4600 : Tensor = aten::slice(%4599, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4601 : Tensor = aten::slice(%4600, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4602 : Tensor[] = prim::ListConstruct(%4596, %left_fold_2fold.404, %4601)
                %4603 : Tensor = aten::cat(%4602, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.245 : Tensor = aten::conv2d(%4603, %self.temp2.upc1.memconv.c2.op.conv.weight, %self.temp2.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input_right.541, %output.245)
            %center.696 : Tensor? = prim::GetAttr[name="center"](%c2.37)
            %fold.385 : int = prim::GetAttr[name="fold"](%c2.37)
            %4613 : bool = aten::__isnot__(%center.696, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
            %x.592 : Tensor = prim::If(%4613) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
              block0():
                %x.594 : Tensor = prim::unchecked_cast(%center.696)
                -> (%x.594)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                -> (%37)
            %4616 : Tensor = aten::slice(%x.592, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4617 : int = aten::mul(%fold.385, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
            %4618 : Tensor = aten::slice(%4616, %33, %fold.385, %4617, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4619 : Tensor = aten::slice(%4618, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
            %4620 : Tensor = aten::slice(%4619, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
             = prim::SetAttr[name="left_fold_2fold"](%c2.37, %4620)
            %4621 : bool = aten::__isnot__(%input_right.539, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
             = prim::If(%4621) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
              block0():
                %input_right.543 : Tensor = prim::unchecked_cast(%input_right.539)
                 = prim::SetAttr[name="center"](%c2.37, %input_right.543)
                -> ()
              block1():
                 = prim::SetAttr[name="center"](%c2.37, %34)
                -> ()
            -> (%output.241)
        %4623 : bool = aten::__isnot__(%x.590, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
        %x.596 : Tensor? = prim::If(%4623) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
          block0():
            %x.598 : Tensor = prim::unchecked_cast(%x.590)
            %x.600 : Tensor = aten::hardtanh_(%x.598, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            -> (%x.600)
          block1():
            -> (%x.590)
        %4627 : bool = aten::__isnot__(%x.596, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
        %x1.106 : Tensor? = prim::If(%4627) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
          block0():
            %x.602 : Tensor = prim::unchecked_cast(%x.596)
            %input.101 : Tensor = aten::conv2d(%x.602, %self.temp2.upc1.convblock.0.weight, %self.temp2.upc1.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %x.604 : Tensor = aten::pixel_shuffle(%input.101, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
            -> (%x.604)
          block1():
            -> (%x.596)
        %4641 : bool = aten::__isnot__(%x1.106, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
        %4642 : Tensor? = prim::If(%4641) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
          block0():
            %mem_list.55 : Tensor[] = prim::GetAttr[name="mem_list"](%skip2.15)
            %4644 : Tensor = aten::pop(%mem_list.55, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
            -> (%4644)
          block1():
            -> (%34)
        %4645 : bool = aten::__is__(%x1.106, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
        %4646 : bool, %x1.108 : Tensor? = prim::If(%4645) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
          block0():
            -> (%35, %x1.106)
          block1():
            %x1.110 : Tensor = prim::unchecked_cast(%x1.106)
            %4649 : bool = aten::__is__(%4642, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
            -> (%4649, %x1.110)
        %4650 : Tensor? = prim::If(%4646) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
          block0():
            -> (%34)
          block1():
            %x1.112 : Tensor = prim::unchecked_cast(%x1.108)
            %x2.46 : Tensor = prim::unchecked_cast(%4642)
            %4653 : Tensor = aten::add(%x1.112, %x2.46, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
            -> (%4653)
        %4654 : bool = aten::__is__(%4650, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:11
        %x.606 : Tensor? = prim::If(%4654) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:8
          block0():
            -> (%34)
          block1():
            %x.608 : Tensor = prim::unchecked_cast(%4650)
            %input.103 : Tensor = aten::conv2d(%x.608, %self.temp2.outc.convblock.0.weight, %self.temp2.outc.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            %input.105 : Tensor = aten::hardtanh_(%input.103, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
            %input.107 : Tensor = aten::conv2d(%input.105, %self.temp2.outc.convblock.3.weight, %self.temp2.outc.convblock.3.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
            -> (%input.107)
        %4674 : bool = aten::__isnot__(%x.606, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
        %4675 : Tensor? = prim::If(%4674) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
          block0():
            %mem_list.57 : Tensor[] = prim::GetAttr[name="mem_list"](%skip1.15)
            %4677 : Tensor = aten::pop(%mem_list.57, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
            -> (%4677)
          block1():
            -> (%34)
        %4678 : bool = aten::__is__(%4675, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
        %4679 : bool, %x1.114 : Tensor? = prim::If(%4678) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
          block0():
            -> (%35, %4675)
          block1():
            %x1.116 : Tensor = prim::unchecked_cast(%4675)
            %4682 : bool = aten::__is__(%x.606, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:25
            -> (%4682, %x1.116)
        %end_out.1 : Tensor? = prim::If(%4679) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:8
          block0():
            -> (%34)
          block1():
            %x1.118 : Tensor = prim::unchecked_cast(%x1.114)
            %x2.48 : Tensor = prim::unchecked_cast(%x.606)
            %4686 : Tensor = aten::slice(%x1.118, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
            %4687 : Tensor = aten::slice(%4686, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
            %4688 : Tensor = aten::slice(%4687, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
            %4689 : Tensor = aten::slice(%4688, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
            %4690 : Tensor = aten::slice(%x2.48, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
            %4691 : Tensor = aten::slice(%4690, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
            %4692 : Tensor = aten::slice(%4691, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
            %4693 : Tensor = aten::slice(%4692, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
            %4694 : Tensor = aten::sub(%4689, %4693, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
            %4695 : Tensor = aten::slice(%x2.48, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
            %4696 : Tensor = aten::slice(%4695, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
            %4697 : Tensor = aten::slice(%4696, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
            %4698 : Tensor = aten::slice(%4697, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
            %4699 : Tensor = aten::copy_(%4698, %4694, %30) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
            -> (%x2.48)
        %4700 : Tensor?[] = aten::append(%out_seq.1, %end_out.1) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:558:12
         = prim::Loop(%31, %35) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:561:12
          block0(%4701 : int):
            %temp1.5 : __torch__.upscale.model.bsvd.model.___torch_mangle_24.DenBlock = prim::GetAttr[name="temp1"](%self)
            %downc0.10 : __torch__.upscale.model.bsvd.model.___torch_mangle_31.DownBlock = prim::GetAttr[name="downc0"](%temp1.5)
            %memconv.39 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%downc0.10)
            %c1.39 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.39)
            %center.23 : Tensor? = prim::GetAttr[name="center"](%c1.39)
            %4707 : bool = aten::__is__(%center.23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.42 : Tensor? = prim::If(%4707) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                 = prim::SetAttr[name="center"](%c1.39, %34)
                -> (%34)
              block1():
                %center.25 : Tensor? = prim::GetAttr[name="center"](%c1.39)
                %4710 : bool = aten::__isnot__(%center.25, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                 = prim::If(%4710) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                    -> ()
                %left_fold_2fold.10 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.39)
                %center.27 : Tensor? = prim::GetAttr[name="center"](%c1.39)
                %n.13 : int = prim::GetAttr[name="n"](%c1.39)
                %fold.18 : int = prim::GetAttr[name="fold"](%c1.39)
                %h.13 : int = prim::GetAttr[name="h"](%c1.39)
                %w.13 : int = prim::GetAttr[name="w"](%c1.39)
                %4718 : int[] = prim::ListConstruct(%n.13, %fold.18, %h.13, %w.13)
                %4719 : Tensor = aten::zeros(%4718, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                %4721 : bool = aten::__is__(%center.27, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                %4722 : bool = aten::__not__(%4721) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                %center.29 : Tensor, %left_fold_2fold.39 : Tensor = prim::If(%4722) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                  block0():
                    %center.31 : Tensor = prim::unchecked_cast(%center.27)
                    -> (%center.31, %left_fold_2fold.10)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                    -> (%37, %37)
                %4726 : int[] = aten::size(%center.29) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                %n.15 : int, %c.11 : int, %h.15 : int, %w.15 : int = prim::ListUnpack(%4726)
                %fold.20 : int = aten::floordiv(%c.11, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                %4732 : int[] = aten::size(%left_fold_2fold.39) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4733 : int = aten::__getitem__(%4732, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                %4734 : bool = aten::eq(%4733, %fold.20) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                 = prim::If(%4734) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                  block0():
                    -> ()
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                    -> ()
                %4736 : Tensor = aten::slice(%4719, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4737 : Tensor = aten::slice(%4736, %33, %34, %fold.20, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4738 : Tensor = aten::slice(%4737, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4739 : Tensor = aten::slice(%4738, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                %4740 : Tensor = aten::slice(%center.29, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4741 : int = aten::mul(%fold.20, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                %4742 : Tensor = aten::slice(%4740, %33, %4741, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4743 : Tensor = aten::slice(%4742, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4744 : Tensor = aten::slice(%4743, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                %4745 : Tensor[] = prim::ListConstruct(%4739, %left_fold_2fold.39, %4744)
                %4746 : Tensor = aten::cat(%4745, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                %output.26 : Tensor = aten::conv2d(%4746, %self.temp1.downc0.memconv.c1.op.conv.weight, %self.temp1.downc0.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %center.39 : Tensor? = prim::GetAttr[name="center"](%c1.39)
                %fold.24 : int = prim::GetAttr[name="fold"](%c1.39)
                %4756 : bool = aten::__isnot__(%center.39, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.44 : Tensor = prim::If(%4756) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.46 : Tensor = prim::unchecked_cast(%center.39)
                    -> (%x.46)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %4759 : Tensor = aten::slice(%x.44, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %4760 : int = aten::mul(%fold.24, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %4761 : Tensor = aten::slice(%4759, %33, %fold.24, %4760, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %4762 : Tensor = aten::slice(%4761, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %4763 : Tensor = aten::slice(%4762, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.39, %4763)
                 = prim::SetAttr[name="center"](%c1.39, %34)
                -> (%output.26)
            %4764 : bool = aten::__isnot__(%x.42, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.71 : Tensor? = prim::If(%4764) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.73 : Tensor = prim::unchecked_cast(%x.42)
                %x.75 : Tensor = aten::hardtanh_(%x.73, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.75)
              block1():
                -> (%x.42)
            %c2.39 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.39)
            %4769 : bool = aten::__isnot__(%x.71, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.108 : Tensor? = prim::If(%4769) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.110 : Tensor = prim::unchecked_cast(%x.71)
                %4772 : int[] = aten::size(%input_right.110) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %4773 : int, %4774 : int, %4775 : int, %4776 : int = prim::ListUnpack(%4772)
                 = prim::SetAttr[name="n"](%c2.39, %4773)
                 = prim::SetAttr[name="c"](%c2.39, %4774)
                 = prim::SetAttr[name="h"](%c2.39, %4775)
                 = prim::SetAttr[name="w"](%c2.39, %4776)
                %c.15 : int = prim::GetAttr[name="c"](%c2.39)
                %4778 : int = aten::floordiv(%c.15, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.39, %4778)
                -> (%input_right.110)
              block1():
                -> (%x.71)
            %center.41 : Tensor? = prim::GetAttr[name="center"](%c2.39)
            %4780 : bool = aten::__is__(%center.41, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.77 : Tensor? = prim::If(%4780) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %4782 : bool = aten::__isnot__(%input_right.108, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%4782) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.112 : Tensor = prim::unchecked_cast(%input_right.108)
                    %left_fold_2fold.45 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.39)
                    %4785 : int[] = aten::size(%left_fold_2fold.45) # <string>:13:9
                    %4786 : int = aten::__getitem__(%4785, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %4787 : bool = aten::eq(%4786, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%4787) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.19 : int = prim::GetAttr[name="n"](%c2.39)
                        %fold.26 : int = prim::GetAttr[name="fold"](%c2.39)
                        %h.19 : int = prim::GetAttr[name="h"](%c2.39)
                        %w.19 : int = prim::GetAttr[name="w"](%c2.39)
                        %4792 : int[] = prim::ListConstruct(%n.19, %fold.26, %h.19, %w.19)
                        %4793 : Tensor = aten::zeros(%4792, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.39, %4793)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.39, %input_right.112)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.39, %34)
                    -> ()
                -> (%34)
              block1():
                %4794 : bool = aten::__is__(%input_right.108, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.114 : Tensor?, %output.30 : Tensor = prim::If(%4794) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.43 : Tensor? = prim::GetAttr[name="center"](%c2.39)
                    %4798 : bool = aten::__isnot__(%center.43, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%4798) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.47 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.39)
                    %center.45 : Tensor? = prim::GetAttr[name="center"](%c2.39)
                    %n.21 : int = prim::GetAttr[name="n"](%c2.39)
                    %fold.28 : int = prim::GetAttr[name="fold"](%c2.39)
                    %h.21 : int = prim::GetAttr[name="h"](%c2.39)
                    %w.21 : int = prim::GetAttr[name="w"](%c2.39)
                    %4806 : int[] = prim::ListConstruct(%n.21, %fold.28, %h.21, %w.21)
                    %4807 : Tensor = aten::zeros(%4806, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %4809 : bool = aten::__is__(%center.45, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %4810 : bool = aten::__not__(%4809) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.47 : Tensor, %left_fold_2fold.49 : Tensor = prim::If(%4810) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.49 : Tensor = prim::unchecked_cast(%center.45)
                        -> (%center.49, %left_fold_2fold.47)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %4814 : int[] = aten::size(%center.47) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.23 : int, %c.17 : int, %h.23 : int, %w.23 : int = prim::ListUnpack(%4814)
                    %fold.30 : int = aten::floordiv(%c.17, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %4820 : int[] = aten::size(%left_fold_2fold.49) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %4821 : int = aten::__getitem__(%4820, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %4822 : bool = aten::eq(%4821, %fold.30) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%4822) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %4824 : Tensor = aten::slice(%4807, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4825 : Tensor = aten::slice(%4824, %33, %34, %fold.30, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4826 : Tensor = aten::slice(%4825, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4827 : Tensor = aten::slice(%4826, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4828 : Tensor = aten::slice(%center.47, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4829 : int = aten::mul(%fold.30, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %4830 : Tensor = aten::slice(%4828, %33, %4829, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4831 : Tensor = aten::slice(%4830, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4832 : Tensor = aten::slice(%4831, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4833 : Tensor[] = prim::ListConstruct(%4827, %left_fold_2fold.49, %4832)
                    %4834 : Tensor = aten::cat(%4833, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.32 : Tensor = aten::conv2d(%4834, %self.temp1.downc0.memconv.c2.op.conv.weight, %self.temp1.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.108, %output.32)
                  block1():
                    %input_right.116 : Tensor = prim::unchecked_cast(%input_right.108)
                    %left_fold_2fold.51 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.39)
                    %center.51 : Tensor? = prim::GetAttr[name="center"](%c2.39)
                    %4846 : bool = aten::__is__(%center.51, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %4847 : bool = aten::__not__(%4846) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.53 : Tensor, %left_fold_2fold.53 : Tensor = prim::If(%4847) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.55 : Tensor = prim::unchecked_cast(%center.51)
                        -> (%center.55, %left_fold_2fold.51)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %4851 : int[] = aten::size(%center.53) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.25 : int, %c.19 : int, %h.25 : int, %w.25 : int = prim::ListUnpack(%4851)
                    %fold.32 : int = aten::floordiv(%c.19, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %4857 : int[] = aten::size(%left_fold_2fold.53) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %4858 : int = aten::__getitem__(%4857, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %4859 : bool = aten::eq(%4858, %fold.32) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%4859) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %4861 : Tensor = aten::slice(%input_right.116, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4862 : Tensor = aten::slice(%4861, %33, %34, %fold.32, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4863 : Tensor = aten::slice(%4862, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4864 : Tensor = aten::slice(%4863, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4865 : Tensor = aten::slice(%center.53, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4866 : int = aten::mul(%fold.32, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %4867 : Tensor = aten::slice(%4865, %33, %4866, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4868 : Tensor = aten::slice(%4867, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4869 : Tensor = aten::slice(%4868, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4870 : Tensor[] = prim::ListConstruct(%4864, %left_fold_2fold.53, %4869)
                    %4871 : Tensor = aten::cat(%4870, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.34 : Tensor = aten::conv2d(%4871, %self.temp1.downc0.memconv.c2.op.conv.weight, %self.temp1.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.116, %output.34)
                %center.57 : Tensor? = prim::GetAttr[name="center"](%c2.39)
                %fold.34 : int = prim::GetAttr[name="fold"](%c2.39)
                %4881 : bool = aten::__isnot__(%center.57, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.79 : Tensor = prim::If(%4881) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.81 : Tensor = prim::unchecked_cast(%center.57)
                    -> (%x.81)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %4884 : Tensor = aten::slice(%x.79, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %4885 : int = aten::mul(%fold.34, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %4886 : Tensor = aten::slice(%4884, %33, %fold.34, %4885, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %4887 : Tensor = aten::slice(%4886, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %4888 : Tensor = aten::slice(%4887, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.39, %4888)
                %4889 : bool = aten::__isnot__(%input_right.114, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%4889) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.118 : Tensor = prim::unchecked_cast(%input_right.114)
                     = prim::SetAttr[name="center"](%c2.39, %input_right.118)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.39, %34)
                    -> ()
                -> (%output.30)
            %4891 : bool = aten::__isnot__(%x.77, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x1.2 : Tensor? = prim::If(%4891) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.83 : Tensor = prim::unchecked_cast(%x.77)
                %x.85 : Tensor = aten::hardtanh_(%x.83, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.85)
              block1():
                -> (%x.77)
            %skip3.2 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip3"](%temp1.5)
            %4896 : bool = aten::__isnot__(%x1.2, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
             = prim::If(%4896) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
              block0():
                %x.87 : Tensor = prim::unchecked_cast(%x1.2)
                %mem_list.6 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.2)
                 = aten::insert(%mem_list.6, %32, %x.87) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
                -> ()
              block1():
                -> ()
            %downc1.10 : __torch__.upscale.model.bsvd.model.___torch_mangle_38.DownBlock = prim::GetAttr[name="downc1"](%temp1.5)
            %4900 : bool = aten::__isnot__(%x1.2, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:11
            %x.89 : Tensor? = prim::If(%4900) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:8
              block0():
                %x.109 : Tensor = prim::unchecked_cast(%x1.2)
                %input.30 : Tensor = aten::conv2d(%x.109, %self.temp1.downc1.convblock.0.weight, %self.temp1.downc1.convblock.0.bias, %7565, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.111 : Tensor = aten::hardtanh_(%input.30, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.111)
              block1():
                -> (%x1.2)
            %memconv.41 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%downc1.10)
            %c1.41 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.41)
            %4914 : bool = aten::__isnot__(%x.89, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.120 : Tensor? = prim::If(%4914) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.122 : Tensor = prim::unchecked_cast(%x.89)
                %4917 : int[] = aten::size(%input_right.122) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %4918 : int, %4919 : int, %4920 : int, %4921 : int = prim::ListUnpack(%4917)
                 = prim::SetAttr[name="n"](%c1.41, %4918)
                 = prim::SetAttr[name="c"](%c1.41, %4919)
                 = prim::SetAttr[name="h"](%c1.41, %4920)
                 = prim::SetAttr[name="w"](%c1.41, %4921)
                %c.21 : int = prim::GetAttr[name="c"](%c1.41)
                %4923 : int = aten::floordiv(%c.21, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.41, %4923)
                -> (%input_right.122)
              block1():
                -> (%x.89)
            %center.59 : Tensor? = prim::GetAttr[name="center"](%c1.41)
            %4925 : bool = aten::__is__(%center.59, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.113 : Tensor? = prim::If(%4925) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %4927 : bool = aten::__isnot__(%input_right.120, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%4927) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.124 : Tensor = prim::unchecked_cast(%input_right.120)
                    %left_fold_2fold.55 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.41)
                    %4930 : int[] = aten::size(%left_fold_2fold.55) # <string>:13:9
                    %4931 : int = aten::__getitem__(%4930, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %4932 : bool = aten::eq(%4931, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%4932) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.27 : int = prim::GetAttr[name="n"](%c1.41)
                        %fold.36 : int = prim::GetAttr[name="fold"](%c1.41)
                        %h.27 : int = prim::GetAttr[name="h"](%c1.41)
                        %w.27 : int = prim::GetAttr[name="w"](%c1.41)
                        %4937 : int[] = prim::ListConstruct(%n.27, %fold.36, %h.27, %w.27)
                        %4938 : Tensor = aten::zeros(%4937, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.41, %4938)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.41, %input_right.124)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.41, %34)
                    -> ()
                -> (%34)
              block1():
                %4939 : bool = aten::__is__(%input_right.120, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.126 : Tensor?, %output.36 : Tensor = prim::If(%4939) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.61 : Tensor? = prim::GetAttr[name="center"](%c1.41)
                    %4943 : bool = aten::__isnot__(%center.61, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%4943) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.57 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.41)
                    %center.63 : Tensor? = prim::GetAttr[name="center"](%c1.41)
                    %n.29 : int = prim::GetAttr[name="n"](%c1.41)
                    %fold.38 : int = prim::GetAttr[name="fold"](%c1.41)
                    %h.29 : int = prim::GetAttr[name="h"](%c1.41)
                    %w.29 : int = prim::GetAttr[name="w"](%c1.41)
                    %4951 : int[] = prim::ListConstruct(%n.29, %fold.38, %h.29, %w.29)
                    %4952 : Tensor = aten::zeros(%4951, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %4954 : bool = aten::__is__(%center.63, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %4955 : bool = aten::__not__(%4954) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.65 : Tensor, %left_fold_2fold.59 : Tensor = prim::If(%4955) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.67 : Tensor = prim::unchecked_cast(%center.63)
                        -> (%center.67, %left_fold_2fold.57)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %4959 : int[] = aten::size(%center.65) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.31 : int, %c.23 : int, %h.31 : int, %w.31 : int = prim::ListUnpack(%4959)
                    %fold.40 : int = aten::floordiv(%c.23, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %4965 : int[] = aten::size(%left_fold_2fold.59) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %4966 : int = aten::__getitem__(%4965, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %4967 : bool = aten::eq(%4966, %fold.40) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%4967) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %4969 : Tensor = aten::slice(%4952, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4970 : Tensor = aten::slice(%4969, %33, %34, %fold.40, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4971 : Tensor = aten::slice(%4970, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4972 : Tensor = aten::slice(%4971, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %4973 : Tensor = aten::slice(%center.65, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4974 : int = aten::mul(%fold.40, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %4975 : Tensor = aten::slice(%4973, %33, %4974, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4976 : Tensor = aten::slice(%4975, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4977 : Tensor = aten::slice(%4976, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %4978 : Tensor[] = prim::ListConstruct(%4972, %left_fold_2fold.59, %4977)
                    %4979 : Tensor = aten::cat(%4978, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.38 : Tensor = aten::conv2d(%4979, %self.temp1.downc1.memconv.c1.op.conv.weight, %self.temp1.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.120, %output.38)
                  block1():
                    %input_right.128 : Tensor = prim::unchecked_cast(%input_right.120)
                    %left_fold_2fold.61 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.41)
                    %center.69 : Tensor? = prim::GetAttr[name="center"](%c1.41)
                    %4991 : bool = aten::__is__(%center.69, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %4992 : bool = aten::__not__(%4991) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.71 : Tensor, %left_fold_2fold.63 : Tensor = prim::If(%4992) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.73 : Tensor = prim::unchecked_cast(%center.69)
                        -> (%center.73, %left_fold_2fold.61)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %4996 : int[] = aten::size(%center.71) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.33 : int, %c.25 : int, %h.33 : int, %w.33 : int = prim::ListUnpack(%4996)
                    %fold.42 : int = aten::floordiv(%c.25, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5002 : int[] = aten::size(%left_fold_2fold.63) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5003 : int = aten::__getitem__(%5002, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5004 : bool = aten::eq(%5003, %fold.42) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5004) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5006 : Tensor = aten::slice(%input_right.128, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5007 : Tensor = aten::slice(%5006, %33, %34, %fold.42, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5008 : Tensor = aten::slice(%5007, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5009 : Tensor = aten::slice(%5008, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5010 : Tensor = aten::slice(%center.71, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5011 : int = aten::mul(%fold.42, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5012 : Tensor = aten::slice(%5010, %33, %5011, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5013 : Tensor = aten::slice(%5012, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5014 : Tensor = aten::slice(%5013, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5015 : Tensor[] = prim::ListConstruct(%5009, %left_fold_2fold.63, %5014)
                    %5016 : Tensor = aten::cat(%5015, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.40 : Tensor = aten::conv2d(%5016, %self.temp1.downc1.memconv.c1.op.conv.weight, %self.temp1.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.128, %output.40)
                %center.75 : Tensor? = prim::GetAttr[name="center"](%c1.41)
                %fold.44 : int = prim::GetAttr[name="fold"](%c1.41)
                %5026 : bool = aten::__isnot__(%center.75, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.115 : Tensor = prim::If(%5026) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.117 : Tensor = prim::unchecked_cast(%center.75)
                    -> (%x.117)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %5029 : Tensor = aten::slice(%x.115, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5030 : int = aten::mul(%fold.44, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %5031 : Tensor = aten::slice(%5029, %33, %fold.44, %5030, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5032 : Tensor = aten::slice(%5031, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5033 : Tensor = aten::slice(%5032, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.41, %5033)
                %5034 : bool = aten::__isnot__(%input_right.126, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%5034) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.130 : Tensor = prim::unchecked_cast(%input_right.126)
                     = prim::SetAttr[name="center"](%c1.41, %input_right.130)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.41, %34)
                    -> ()
                -> (%output.36)
            %5036 : bool = aten::__isnot__(%x.113, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.119 : Tensor? = prim::If(%5036) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.121 : Tensor = prim::unchecked_cast(%x.113)
                %x.123 : Tensor = aten::hardtanh_(%x.121, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.123)
              block1():
                -> (%x.113)
            %c2.41 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.41)
            %5041 : bool = aten::__isnot__(%x.119, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.132 : Tensor? = prim::If(%5041) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.134 : Tensor = prim::unchecked_cast(%x.119)
                %5044 : int[] = aten::size(%input_right.134) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %5045 : int, %5046 : int, %5047 : int, %5048 : int = prim::ListUnpack(%5044)
                 = prim::SetAttr[name="n"](%c2.41, %5045)
                 = prim::SetAttr[name="c"](%c2.41, %5046)
                 = prim::SetAttr[name="h"](%c2.41, %5047)
                 = prim::SetAttr[name="w"](%c2.41, %5048)
                %c.27 : int = prim::GetAttr[name="c"](%c2.41)
                %5050 : int = aten::floordiv(%c.27, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.41, %5050)
                -> (%input_right.134)
              block1():
                -> (%x.119)
            %center.77 : Tensor? = prim::GetAttr[name="center"](%c2.41)
            %5052 : bool = aten::__is__(%center.77, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.125 : Tensor? = prim::If(%5052) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %5054 : bool = aten::__isnot__(%input_right.132, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%5054) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.136 : Tensor = prim::unchecked_cast(%input_right.132)
                    %left_fold_2fold.65 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.41)
                    %5057 : int[] = aten::size(%left_fold_2fold.65) # <string>:13:9
                    %5058 : int = aten::__getitem__(%5057, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %5059 : bool = aten::eq(%5058, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%5059) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.35 : int = prim::GetAttr[name="n"](%c2.41)
                        %fold.46 : int = prim::GetAttr[name="fold"](%c2.41)
                        %h.35 : int = prim::GetAttr[name="h"](%c2.41)
                        %w.35 : int = prim::GetAttr[name="w"](%c2.41)
                        %5064 : int[] = prim::ListConstruct(%n.35, %fold.46, %h.35, %w.35)
                        %5065 : Tensor = aten::zeros(%5064, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.41, %5065)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.41, %input_right.136)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.41, %34)
                    -> ()
                -> (%34)
              block1():
                %5066 : bool = aten::__is__(%input_right.132, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.138 : Tensor?, %output.42 : Tensor = prim::If(%5066) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.79 : Tensor? = prim::GetAttr[name="center"](%c2.41)
                    %5070 : bool = aten::__isnot__(%center.79, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%5070) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.67 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.41)
                    %center.81 : Tensor? = prim::GetAttr[name="center"](%c2.41)
                    %n.37 : int = prim::GetAttr[name="n"](%c2.41)
                    %fold.48 : int = prim::GetAttr[name="fold"](%c2.41)
                    %h.37 : int = prim::GetAttr[name="h"](%c2.41)
                    %w.37 : int = prim::GetAttr[name="w"](%c2.41)
                    %5078 : int[] = prim::ListConstruct(%n.37, %fold.48, %h.37, %w.37)
                    %5079 : Tensor = aten::zeros(%5078, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %5081 : bool = aten::__is__(%center.81, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5082 : bool = aten::__not__(%5081) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.83 : Tensor, %left_fold_2fold.69 : Tensor = prim::If(%5082) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.85 : Tensor = prim::unchecked_cast(%center.81)
                        -> (%center.85, %left_fold_2fold.67)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5086 : int[] = aten::size(%center.83) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.39 : int, %c.29 : int, %h.39 : int, %w.39 : int = prim::ListUnpack(%5086)
                    %fold.50 : int = aten::floordiv(%c.29, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5092 : int[] = aten::size(%left_fold_2fold.69) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5093 : int = aten::__getitem__(%5092, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5094 : bool = aten::eq(%5093, %fold.50) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5094) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5096 : Tensor = aten::slice(%5079, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5097 : Tensor = aten::slice(%5096, %33, %34, %fold.50, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5098 : Tensor = aten::slice(%5097, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5099 : Tensor = aten::slice(%5098, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5100 : Tensor = aten::slice(%center.83, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5101 : int = aten::mul(%fold.50, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5102 : Tensor = aten::slice(%5100, %33, %5101, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5103 : Tensor = aten::slice(%5102, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5104 : Tensor = aten::slice(%5103, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5105 : Tensor[] = prim::ListConstruct(%5099, %left_fold_2fold.69, %5104)
                    %5106 : Tensor = aten::cat(%5105, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.44 : Tensor = aten::conv2d(%5106, %self.temp1.downc1.memconv.c2.op.conv.weight, %self.temp1.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.132, %output.44)
                  block1():
                    %input_right.140 : Tensor = prim::unchecked_cast(%input_right.132)
                    %left_fold_2fold.71 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.41)
                    %center.87 : Tensor? = prim::GetAttr[name="center"](%c2.41)
                    %5118 : bool = aten::__is__(%center.87, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5119 : bool = aten::__not__(%5118) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.89 : Tensor, %left_fold_2fold.73 : Tensor = prim::If(%5119) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.91 : Tensor = prim::unchecked_cast(%center.87)
                        -> (%center.91, %left_fold_2fold.71)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5123 : int[] = aten::size(%center.89) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.41 : int, %c.31 : int, %h.41 : int, %w.41 : int = prim::ListUnpack(%5123)
                    %fold.52 : int = aten::floordiv(%c.31, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5129 : int[] = aten::size(%left_fold_2fold.73) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5130 : int = aten::__getitem__(%5129, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5131 : bool = aten::eq(%5130, %fold.52) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5131) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5133 : Tensor = aten::slice(%input_right.140, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5134 : Tensor = aten::slice(%5133, %33, %34, %fold.52, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5135 : Tensor = aten::slice(%5134, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5136 : Tensor = aten::slice(%5135, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5137 : Tensor = aten::slice(%center.89, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5138 : int = aten::mul(%fold.52, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5139 : Tensor = aten::slice(%5137, %33, %5138, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5140 : Tensor = aten::slice(%5139, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5141 : Tensor = aten::slice(%5140, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5142 : Tensor[] = prim::ListConstruct(%5136, %left_fold_2fold.73, %5141)
                    %5143 : Tensor = aten::cat(%5142, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.46 : Tensor = aten::conv2d(%5143, %self.temp1.downc1.memconv.c2.op.conv.weight, %self.temp1.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.140, %output.46)
                %center.93 : Tensor? = prim::GetAttr[name="center"](%c2.41)
                %fold.54 : int = prim::GetAttr[name="fold"](%c2.41)
                %5153 : bool = aten::__isnot__(%center.93, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.127 : Tensor = prim::If(%5153) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.129 : Tensor = prim::unchecked_cast(%center.93)
                    -> (%x.129)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %5156 : Tensor = aten::slice(%x.127, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5157 : int = aten::mul(%fold.54, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %5158 : Tensor = aten::slice(%5156, %33, %fold.54, %5157, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5159 : Tensor = aten::slice(%5158, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5160 : Tensor = aten::slice(%5159, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.41, %5160)
                %5161 : bool = aten::__isnot__(%input_right.138, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%5161) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.142 : Tensor = prim::unchecked_cast(%input_right.138)
                     = prim::SetAttr[name="center"](%c2.41, %input_right.142)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.41, %34)
                    -> ()
                -> (%output.42)
            %5163 : bool = aten::__isnot__(%x.125, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x2.2 : Tensor? = prim::If(%5163) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.131 : Tensor = prim::unchecked_cast(%x.125)
                %x.133 : Tensor = aten::hardtanh_(%x.131, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.133)
              block1():
                -> (%x.125)
            %upc2.10 : __torch__.upscale.model.bsvd.model.___torch_mangle_45.UpBlock = prim::GetAttr[name="upc2"](%temp1.5)
            %memconv.43 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%upc2.10)
            %c1.43 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.43)
            %5170 : bool = aten::__isnot__(%x2.2, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.144 : Tensor? = prim::If(%5170) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.146 : Tensor = prim::unchecked_cast(%x2.2)
                %5173 : int[] = aten::size(%input_right.146) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %5174 : int, %5175 : int, %5176 : int, %5177 : int = prim::ListUnpack(%5173)
                 = prim::SetAttr[name="n"](%c1.43, %5174)
                 = prim::SetAttr[name="c"](%c1.43, %5175)
                 = prim::SetAttr[name="h"](%c1.43, %5176)
                 = prim::SetAttr[name="w"](%c1.43, %5177)
                %c.33 : int = prim::GetAttr[name="c"](%c1.43)
                %5179 : int = aten::floordiv(%c.33, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.43, %5179)
                -> (%input_right.146)
              block1():
                -> (%x2.2)
            %center.95 : Tensor? = prim::GetAttr[name="center"](%c1.43)
            %5181 : bool = aten::__is__(%center.95, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.135 : Tensor? = prim::If(%5181) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %5183 : bool = aten::__isnot__(%input_right.144, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%5183) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.148 : Tensor = prim::unchecked_cast(%input_right.144)
                    %left_fold_2fold.75 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.43)
                    %5186 : int[] = aten::size(%left_fold_2fold.75) # <string>:13:9
                    %5187 : int = aten::__getitem__(%5186, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %5188 : bool = aten::eq(%5187, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%5188) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.43 : int = prim::GetAttr[name="n"](%c1.43)
                        %fold.56 : int = prim::GetAttr[name="fold"](%c1.43)
                        %h.43 : int = prim::GetAttr[name="h"](%c1.43)
                        %w.43 : int = prim::GetAttr[name="w"](%c1.43)
                        %5193 : int[] = prim::ListConstruct(%n.43, %fold.56, %h.43, %w.43)
                        %5194 : Tensor = aten::zeros(%5193, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.43, %5194)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.43, %input_right.148)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.43, %34)
                    -> ()
                -> (%34)
              block1():
                %5195 : bool = aten::__is__(%input_right.144, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.150 : Tensor?, %output.48 : Tensor = prim::If(%5195) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.97 : Tensor? = prim::GetAttr[name="center"](%c1.43)
                    %5199 : bool = aten::__isnot__(%center.97, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%5199) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.77 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.43)
                    %center.99 : Tensor? = prim::GetAttr[name="center"](%c1.43)
                    %n.45 : int = prim::GetAttr[name="n"](%c1.43)
                    %fold.58 : int = prim::GetAttr[name="fold"](%c1.43)
                    %h.45 : int = prim::GetAttr[name="h"](%c1.43)
                    %w.45 : int = prim::GetAttr[name="w"](%c1.43)
                    %5207 : int[] = prim::ListConstruct(%n.45, %fold.58, %h.45, %w.45)
                    %5208 : Tensor = aten::zeros(%5207, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %5210 : bool = aten::__is__(%center.99, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5211 : bool = aten::__not__(%5210) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.101 : Tensor, %left_fold_2fold.79 : Tensor = prim::If(%5211) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.103 : Tensor = prim::unchecked_cast(%center.99)
                        -> (%center.103, %left_fold_2fold.77)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5215 : int[] = aten::size(%center.101) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.47 : int, %c.35 : int, %h.47 : int, %w.47 : int = prim::ListUnpack(%5215)
                    %fold.60 : int = aten::floordiv(%c.35, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5221 : int[] = aten::size(%left_fold_2fold.79) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5222 : int = aten::__getitem__(%5221, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5223 : bool = aten::eq(%5222, %fold.60) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5223) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5225 : Tensor = aten::slice(%5208, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5226 : Tensor = aten::slice(%5225, %33, %34, %fold.60, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5227 : Tensor = aten::slice(%5226, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5228 : Tensor = aten::slice(%5227, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5229 : Tensor = aten::slice(%center.101, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5230 : int = aten::mul(%fold.60, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5231 : Tensor = aten::slice(%5229, %33, %5230, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5232 : Tensor = aten::slice(%5231, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5233 : Tensor = aten::slice(%5232, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5234 : Tensor[] = prim::ListConstruct(%5228, %left_fold_2fold.79, %5233)
                    %5235 : Tensor = aten::cat(%5234, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.50 : Tensor = aten::conv2d(%5235, %self.temp1.upc2.memconv.c1.op.conv.weight, %self.temp1.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.144, %output.50)
                  block1():
                    %input_right.152 : Tensor = prim::unchecked_cast(%input_right.144)
                    %left_fold_2fold.81 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.43)
                    %center.105 : Tensor? = prim::GetAttr[name="center"](%c1.43)
                    %5247 : bool = aten::__is__(%center.105, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5248 : bool = aten::__not__(%5247) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.107 : Tensor, %left_fold_2fold.83 : Tensor = prim::If(%5248) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.109 : Tensor = prim::unchecked_cast(%center.105)
                        -> (%center.109, %left_fold_2fold.81)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5252 : int[] = aten::size(%center.107) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.49 : int, %c.37 : int, %h.49 : int, %w.49 : int = prim::ListUnpack(%5252)
                    %fold.62 : int = aten::floordiv(%c.37, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5258 : int[] = aten::size(%left_fold_2fold.83) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5259 : int = aten::__getitem__(%5258, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5260 : bool = aten::eq(%5259, %fold.62) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5260) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5262 : Tensor = aten::slice(%input_right.152, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5263 : Tensor = aten::slice(%5262, %33, %34, %fold.62, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5264 : Tensor = aten::slice(%5263, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5265 : Tensor = aten::slice(%5264, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5266 : Tensor = aten::slice(%center.107, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5267 : int = aten::mul(%fold.62, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5268 : Tensor = aten::slice(%5266, %33, %5267, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5269 : Tensor = aten::slice(%5268, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5270 : Tensor = aten::slice(%5269, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5271 : Tensor[] = prim::ListConstruct(%5265, %left_fold_2fold.83, %5270)
                    %5272 : Tensor = aten::cat(%5271, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.52 : Tensor = aten::conv2d(%5272, %self.temp1.upc2.memconv.c1.op.conv.weight, %self.temp1.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.152, %output.52)
                %center.111 : Tensor? = prim::GetAttr[name="center"](%c1.43)
                %fold.64 : int = prim::GetAttr[name="fold"](%c1.43)
                %5282 : bool = aten::__isnot__(%center.111, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.137 : Tensor = prim::If(%5282) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.139 : Tensor = prim::unchecked_cast(%center.111)
                    -> (%x.139)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %5285 : Tensor = aten::slice(%x.137, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5286 : int = aten::mul(%fold.64, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %5287 : Tensor = aten::slice(%5285, %33, %fold.64, %5286, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5288 : Tensor = aten::slice(%5287, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5289 : Tensor = aten::slice(%5288, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.43, %5289)
                %5290 : bool = aten::__isnot__(%input_right.150, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%5290) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.154 : Tensor = prim::unchecked_cast(%input_right.150)
                     = prim::SetAttr[name="center"](%c1.43, %input_right.154)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.43, %34)
                    -> ()
                -> (%output.48)
            %5292 : bool = aten::__isnot__(%x.135, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.141 : Tensor? = prim::If(%5292) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.143 : Tensor = prim::unchecked_cast(%x.135)
                %x.145 : Tensor = aten::hardtanh_(%x.143, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.145)
              block1():
                -> (%x.135)
            %c2.43 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.43)
            %5297 : bool = aten::__isnot__(%x.141, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.156 : Tensor? = prim::If(%5297) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.158 : Tensor = prim::unchecked_cast(%x.141)
                %5300 : int[] = aten::size(%input_right.158) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %5301 : int, %5302 : int, %5303 : int, %5304 : int = prim::ListUnpack(%5300)
                 = prim::SetAttr[name="n"](%c2.43, %5301)
                 = prim::SetAttr[name="c"](%c2.43, %5302)
                 = prim::SetAttr[name="h"](%c2.43, %5303)
                 = prim::SetAttr[name="w"](%c2.43, %5304)
                %c.39 : int = prim::GetAttr[name="c"](%c2.43)
                %5306 : int = aten::floordiv(%c.39, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.43, %5306)
                -> (%input_right.158)
              block1():
                -> (%x.141)
            %center.113 : Tensor? = prim::GetAttr[name="center"](%c2.43)
            %5308 : bool = aten::__is__(%center.113, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.147 : Tensor? = prim::If(%5308) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %5310 : bool = aten::__isnot__(%input_right.156, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%5310) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.160 : Tensor = prim::unchecked_cast(%input_right.156)
                    %left_fold_2fold.85 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.43)
                    %5313 : int[] = aten::size(%left_fold_2fold.85) # <string>:13:9
                    %5314 : int = aten::__getitem__(%5313, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %5315 : bool = aten::eq(%5314, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%5315) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.51 : int = prim::GetAttr[name="n"](%c2.43)
                        %fold.66 : int = prim::GetAttr[name="fold"](%c2.43)
                        %h.51 : int = prim::GetAttr[name="h"](%c2.43)
                        %w.51 : int = prim::GetAttr[name="w"](%c2.43)
                        %5320 : int[] = prim::ListConstruct(%n.51, %fold.66, %h.51, %w.51)
                        %5321 : Tensor = aten::zeros(%5320, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.43, %5321)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.43, %input_right.160)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.43, %34)
                    -> ()
                -> (%34)
              block1():
                %5322 : bool = aten::__is__(%input_right.156, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.162 : Tensor?, %output.54 : Tensor = prim::If(%5322) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.115 : Tensor? = prim::GetAttr[name="center"](%c2.43)
                    %5326 : bool = aten::__isnot__(%center.115, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%5326) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.87 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.43)
                    %center.117 : Tensor? = prim::GetAttr[name="center"](%c2.43)
                    %n.53 : int = prim::GetAttr[name="n"](%c2.43)
                    %fold.68 : int = prim::GetAttr[name="fold"](%c2.43)
                    %h.53 : int = prim::GetAttr[name="h"](%c2.43)
                    %w.53 : int = prim::GetAttr[name="w"](%c2.43)
                    %5334 : int[] = prim::ListConstruct(%n.53, %fold.68, %h.53, %w.53)
                    %5335 : Tensor = aten::zeros(%5334, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %5337 : bool = aten::__is__(%center.117, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5338 : bool = aten::__not__(%5337) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.119 : Tensor, %left_fold_2fold.89 : Tensor = prim::If(%5338) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.121 : Tensor = prim::unchecked_cast(%center.117)
                        -> (%center.121, %left_fold_2fold.87)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5342 : int[] = aten::size(%center.119) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.55 : int, %c.41 : int, %h.55 : int, %w.55 : int = prim::ListUnpack(%5342)
                    %fold.70 : int = aten::floordiv(%c.41, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5348 : int[] = aten::size(%left_fold_2fold.89) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5349 : int = aten::__getitem__(%5348, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5350 : bool = aten::eq(%5349, %fold.70) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5350) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5352 : Tensor = aten::slice(%5335, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5353 : Tensor = aten::slice(%5352, %33, %34, %fold.70, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5354 : Tensor = aten::slice(%5353, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5355 : Tensor = aten::slice(%5354, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5356 : Tensor = aten::slice(%center.119, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5357 : int = aten::mul(%fold.70, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5358 : Tensor = aten::slice(%5356, %33, %5357, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5359 : Tensor = aten::slice(%5358, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5360 : Tensor = aten::slice(%5359, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5361 : Tensor[] = prim::ListConstruct(%5355, %left_fold_2fold.89, %5360)
                    %5362 : Tensor = aten::cat(%5361, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.56 : Tensor = aten::conv2d(%5362, %self.temp1.upc2.memconv.c2.op.conv.weight, %self.temp1.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.156, %output.56)
                  block1():
                    %input_right.164 : Tensor = prim::unchecked_cast(%input_right.156)
                    %left_fold_2fold.91 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.43)
                    %center.123 : Tensor? = prim::GetAttr[name="center"](%c2.43)
                    %5374 : bool = aten::__is__(%center.123, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5375 : bool = aten::__not__(%5374) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.125 : Tensor, %left_fold_2fold.93 : Tensor = prim::If(%5375) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.127 : Tensor = prim::unchecked_cast(%center.123)
                        -> (%center.127, %left_fold_2fold.91)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5379 : int[] = aten::size(%center.125) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.57 : int, %c.43 : int, %h.57 : int, %w.57 : int = prim::ListUnpack(%5379)
                    %fold.72 : int = aten::floordiv(%c.43, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5385 : int[] = aten::size(%left_fold_2fold.93) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5386 : int = aten::__getitem__(%5385, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5387 : bool = aten::eq(%5386, %fold.72) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5387) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5389 : Tensor = aten::slice(%input_right.164, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5390 : Tensor = aten::slice(%5389, %33, %34, %fold.72, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5391 : Tensor = aten::slice(%5390, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5392 : Tensor = aten::slice(%5391, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5393 : Tensor = aten::slice(%center.125, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5394 : int = aten::mul(%fold.72, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5395 : Tensor = aten::slice(%5393, %33, %5394, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5396 : Tensor = aten::slice(%5395, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5397 : Tensor = aten::slice(%5396, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5398 : Tensor[] = prim::ListConstruct(%5392, %left_fold_2fold.93, %5397)
                    %5399 : Tensor = aten::cat(%5398, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.58 : Tensor = aten::conv2d(%5399, %self.temp1.upc2.memconv.c2.op.conv.weight, %self.temp1.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.164, %output.58)
                %center.129 : Tensor? = prim::GetAttr[name="center"](%c2.43)
                %fold.74 : int = prim::GetAttr[name="fold"](%c2.43)
                %5409 : bool = aten::__isnot__(%center.129, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.149 : Tensor = prim::If(%5409) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.151 : Tensor = prim::unchecked_cast(%center.129)
                    -> (%x.151)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %5412 : Tensor = aten::slice(%x.149, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5413 : int = aten::mul(%fold.74, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %5414 : Tensor = aten::slice(%5412, %33, %fold.74, %5413, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5415 : Tensor = aten::slice(%5414, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5416 : Tensor = aten::slice(%5415, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.43, %5416)
                %5417 : bool = aten::__isnot__(%input_right.162, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%5417) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.166 : Tensor = prim::unchecked_cast(%input_right.162)
                     = prim::SetAttr[name="center"](%c2.43, %input_right.166)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.43, %34)
                    -> ()
                -> (%output.54)
            %5419 : bool = aten::__isnot__(%x.147, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x.153 : Tensor? = prim::If(%5419) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.155 : Tensor = prim::unchecked_cast(%x.147)
                %x.157 : Tensor = aten::hardtanh_(%x.155, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.157)
              block1():
                -> (%x.147)
            %5423 : bool = aten::__isnot__(%x.153, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
            %x2.6 : Tensor? = prim::If(%5423) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
              block0():
                %x.159 : Tensor = prim::unchecked_cast(%x.153)
                %input.32 : Tensor = aten::conv2d(%x.159, %self.temp1.upc2.convblock.0.weight, %self.temp1.upc2.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.161 : Tensor = aten::pixel_shuffle(%input.32, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
                -> (%x.161)
              block1():
                -> (%x.153)
            %upc1.10 : __torch__.upscale.model.bsvd.model.___torch_mangle_49.UpBlock = prim::GetAttr[name="upc1"](%temp1.5)
            %5437 : bool = aten::__isnot__(%x2.6, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %5438 : Tensor? = prim::If(%5437) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list.8 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.2)
                %5440 : Tensor = aten::pop(%mem_list.8, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%5440)
              block1():
                -> (%34)
            %5441 : bool = aten::__is__(%x2.6, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
            %5442 : bool, %x1.23 : Tensor? = prim::If(%5441) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
              block0():
                -> (%35, %x2.6)
              block1():
                %x1.25 : Tensor = prim::unchecked_cast(%x2.6)
                %5445 : bool = aten::__is__(%5438, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
                -> (%5445, %x1.25)
            %5446 : Tensor? = prim::If(%5442) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
              block0():
                -> (%34)
              block1():
                %x1.27 : Tensor = prim::unchecked_cast(%x1.23)
                %x2.9 : Tensor = prim::unchecked_cast(%5438)
                %5449 : Tensor = aten::add(%x1.27, %x2.9, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
                -> (%5449)
            %memconv.45 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%upc1.10)
            %c1.45 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.45)
            %5452 : bool = aten::__isnot__(%5446, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.168 : Tensor? = prim::If(%5452) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.170 : Tensor = prim::unchecked_cast(%5446)
                %5455 : int[] = aten::size(%input_right.170) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %5456 : int, %5457 : int, %5458 : int, %5459 : int = prim::ListUnpack(%5455)
                 = prim::SetAttr[name="n"](%c1.45, %5456)
                 = prim::SetAttr[name="c"](%c1.45, %5457)
                 = prim::SetAttr[name="h"](%c1.45, %5458)
                 = prim::SetAttr[name="w"](%c1.45, %5459)
                %c.45 : int = prim::GetAttr[name="c"](%c1.45)
                %5461 : int = aten::floordiv(%c.45, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.45, %5461)
                -> (%input_right.170)
              block1():
                -> (%5446)
            %center.131 : Tensor? = prim::GetAttr[name="center"](%c1.45)
            %5463 : bool = aten::__is__(%center.131, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.163 : Tensor? = prim::If(%5463) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %5465 : bool = aten::__isnot__(%input_right.168, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%5465) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.172 : Tensor = prim::unchecked_cast(%input_right.168)
                    %left_fold_2fold.95 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.45)
                    %5468 : int[] = aten::size(%left_fold_2fold.95) # <string>:13:9
                    %5469 : int = aten::__getitem__(%5468, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %5470 : bool = aten::eq(%5469, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%5470) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.59 : int = prim::GetAttr[name="n"](%c1.45)
                        %fold.76 : int = prim::GetAttr[name="fold"](%c1.45)
                        %h.59 : int = prim::GetAttr[name="h"](%c1.45)
                        %w.59 : int = prim::GetAttr[name="w"](%c1.45)
                        %5475 : int[] = prim::ListConstruct(%n.59, %fold.76, %h.59, %w.59)
                        %5476 : Tensor = aten::zeros(%5475, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.45, %5476)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.45, %input_right.172)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.45, %34)
                    -> ()
                -> (%34)
              block1():
                %5477 : bool = aten::__is__(%input_right.168, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.174 : Tensor?, %output.60 : Tensor = prim::If(%5477) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.133 : Tensor? = prim::GetAttr[name="center"](%c1.45)
                    %5481 : bool = aten::__isnot__(%center.133, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%5481) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.97 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.45)
                    %center.135 : Tensor? = prim::GetAttr[name="center"](%c1.45)
                    %n.61 : int = prim::GetAttr[name="n"](%c1.45)
                    %fold.78 : int = prim::GetAttr[name="fold"](%c1.45)
                    %h.61 : int = prim::GetAttr[name="h"](%c1.45)
                    %w.61 : int = prim::GetAttr[name="w"](%c1.45)
                    %5489 : int[] = prim::ListConstruct(%n.61, %fold.78, %h.61, %w.61)
                    %5490 : Tensor = aten::zeros(%5489, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %5492 : bool = aten::__is__(%center.135, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5493 : bool = aten::__not__(%5492) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.137 : Tensor, %left_fold_2fold.99 : Tensor = prim::If(%5493) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.139 : Tensor = prim::unchecked_cast(%center.135)
                        -> (%center.139, %left_fold_2fold.97)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5497 : int[] = aten::size(%center.137) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.63 : int, %c.47 : int, %h.63 : int, %w.63 : int = prim::ListUnpack(%5497)
                    %fold.80 : int = aten::floordiv(%c.47, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5503 : int[] = aten::size(%left_fold_2fold.99) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5504 : int = aten::__getitem__(%5503, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5505 : bool = aten::eq(%5504, %fold.80) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5505) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5507 : Tensor = aten::slice(%5490, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5508 : Tensor = aten::slice(%5507, %33, %34, %fold.80, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5509 : Tensor = aten::slice(%5508, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5510 : Tensor = aten::slice(%5509, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5511 : Tensor = aten::slice(%center.137, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5512 : int = aten::mul(%fold.80, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5513 : Tensor = aten::slice(%5511, %33, %5512, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5514 : Tensor = aten::slice(%5513, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5515 : Tensor = aten::slice(%5514, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5516 : Tensor[] = prim::ListConstruct(%5510, %left_fold_2fold.99, %5515)
                    %5517 : Tensor = aten::cat(%5516, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.62 : Tensor = aten::conv2d(%5517, %self.temp1.upc1.memconv.c1.op.conv.weight, %self.temp1.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.168, %output.62)
                  block1():
                    %input_right.176 : Tensor = prim::unchecked_cast(%input_right.168)
                    %left_fold_2fold.101 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.45)
                    %center.141 : Tensor? = prim::GetAttr[name="center"](%c1.45)
                    %5529 : bool = aten::__is__(%center.141, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5530 : bool = aten::__not__(%5529) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.143 : Tensor, %left_fold_2fold.103 : Tensor = prim::If(%5530) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.145 : Tensor = prim::unchecked_cast(%center.141)
                        -> (%center.145, %left_fold_2fold.101)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5534 : int[] = aten::size(%center.143) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.65 : int, %c.49 : int, %h.65 : int, %w.65 : int = prim::ListUnpack(%5534)
                    %fold.82 : int = aten::floordiv(%c.49, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5540 : int[] = aten::size(%left_fold_2fold.103) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5541 : int = aten::__getitem__(%5540, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5542 : bool = aten::eq(%5541, %fold.82) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5542) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5544 : Tensor = aten::slice(%input_right.176, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5545 : Tensor = aten::slice(%5544, %33, %34, %fold.82, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5546 : Tensor = aten::slice(%5545, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5547 : Tensor = aten::slice(%5546, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5548 : Tensor = aten::slice(%center.143, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5549 : int = aten::mul(%fold.82, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5550 : Tensor = aten::slice(%5548, %33, %5549, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5551 : Tensor = aten::slice(%5550, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5552 : Tensor = aten::slice(%5551, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5553 : Tensor[] = prim::ListConstruct(%5547, %left_fold_2fold.103, %5552)
                    %5554 : Tensor = aten::cat(%5553, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.64 : Tensor = aten::conv2d(%5554, %self.temp1.upc1.memconv.c1.op.conv.weight, %self.temp1.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.176, %output.64)
                %center.147 : Tensor? = prim::GetAttr[name="center"](%c1.45)
                %fold.84 : int = prim::GetAttr[name="fold"](%c1.45)
                %5564 : bool = aten::__isnot__(%center.147, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.165 : Tensor = prim::If(%5564) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.167 : Tensor = prim::unchecked_cast(%center.147)
                    -> (%x.167)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %5567 : Tensor = aten::slice(%x.165, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5568 : int = aten::mul(%fold.84, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %5569 : Tensor = aten::slice(%5567, %33, %fold.84, %5568, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5570 : Tensor = aten::slice(%5569, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5571 : Tensor = aten::slice(%5570, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.45, %5571)
                %5572 : bool = aten::__isnot__(%input_right.174, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%5572) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.178 : Tensor = prim::unchecked_cast(%input_right.174)
                     = prim::SetAttr[name="center"](%c1.45, %input_right.178)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.45, %34)
                    -> ()
                -> (%output.60)
            %5574 : bool = aten::__isnot__(%x.163, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.169 : Tensor? = prim::If(%5574) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.171 : Tensor = prim::unchecked_cast(%x.163)
                %x.173 : Tensor = aten::hardtanh_(%x.171, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.173)
              block1():
                -> (%x.163)
            %c2.45 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.45)
            %5579 : bool = aten::__isnot__(%x.169, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.180 : Tensor? = prim::If(%5579) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.182 : Tensor = prim::unchecked_cast(%x.169)
                %5582 : int[] = aten::size(%input_right.182) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %5583 : int, %5584 : int, %5585 : int, %5586 : int = prim::ListUnpack(%5582)
                 = prim::SetAttr[name="n"](%c2.45, %5583)
                 = prim::SetAttr[name="c"](%c2.45, %5584)
                 = prim::SetAttr[name="h"](%c2.45, %5585)
                 = prim::SetAttr[name="w"](%c2.45, %5586)
                %c.51 : int = prim::GetAttr[name="c"](%c2.45)
                %5588 : int = aten::floordiv(%c.51, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.45, %5588)
                -> (%input_right.182)
              block1():
                -> (%x.169)
            %center.149 : Tensor? = prim::GetAttr[name="center"](%c2.45)
            %5590 : bool = aten::__is__(%center.149, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.175 : Tensor? = prim::If(%5590) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %5592 : bool = aten::__isnot__(%input_right.180, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%5592) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.184 : Tensor = prim::unchecked_cast(%input_right.180)
                    %left_fold_2fold.105 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.45)
                    %5595 : int[] = aten::size(%left_fold_2fold.105) # <string>:13:9
                    %5596 : int = aten::__getitem__(%5595, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %5597 : bool = aten::eq(%5596, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%5597) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.67 : int = prim::GetAttr[name="n"](%c2.45)
                        %fold.86 : int = prim::GetAttr[name="fold"](%c2.45)
                        %h.67 : int = prim::GetAttr[name="h"](%c2.45)
                        %w.67 : int = prim::GetAttr[name="w"](%c2.45)
                        %5602 : int[] = prim::ListConstruct(%n.67, %fold.86, %h.67, %w.67)
                        %5603 : Tensor = aten::zeros(%5602, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.45, %5603)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.45, %input_right.184)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.45, %34)
                    -> ()
                -> (%34)
              block1():
                %5604 : bool = aten::__is__(%input_right.180, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.186 : Tensor?, %output.66 : Tensor = prim::If(%5604) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.151 : Tensor? = prim::GetAttr[name="center"](%c2.45)
                    %5608 : bool = aten::__isnot__(%center.151, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%5608) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.107 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.45)
                    %center.153 : Tensor? = prim::GetAttr[name="center"](%c2.45)
                    %n.69 : int = prim::GetAttr[name="n"](%c2.45)
                    %fold.88 : int = prim::GetAttr[name="fold"](%c2.45)
                    %h.69 : int = prim::GetAttr[name="h"](%c2.45)
                    %w.69 : int = prim::GetAttr[name="w"](%c2.45)
                    %5616 : int[] = prim::ListConstruct(%n.69, %fold.88, %h.69, %w.69)
                    %5617 : Tensor = aten::zeros(%5616, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %5619 : bool = aten::__is__(%center.153, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5620 : bool = aten::__not__(%5619) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.155 : Tensor, %left_fold_2fold.109 : Tensor = prim::If(%5620) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.157 : Tensor = prim::unchecked_cast(%center.153)
                        -> (%center.157, %left_fold_2fold.107)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5624 : int[] = aten::size(%center.155) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.71 : int, %c.53 : int, %h.71 : int, %w.71 : int = prim::ListUnpack(%5624)
                    %fold.90 : int = aten::floordiv(%c.53, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5630 : int[] = aten::size(%left_fold_2fold.109) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5631 : int = aten::__getitem__(%5630, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5632 : bool = aten::eq(%5631, %fold.90) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5632) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5634 : Tensor = aten::slice(%5617, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5635 : Tensor = aten::slice(%5634, %33, %34, %fold.90, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5636 : Tensor = aten::slice(%5635, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5637 : Tensor = aten::slice(%5636, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5638 : Tensor = aten::slice(%center.155, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5639 : int = aten::mul(%fold.90, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5640 : Tensor = aten::slice(%5638, %33, %5639, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5641 : Tensor = aten::slice(%5640, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5642 : Tensor = aten::slice(%5641, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5643 : Tensor[] = prim::ListConstruct(%5637, %left_fold_2fold.109, %5642)
                    %5644 : Tensor = aten::cat(%5643, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.68 : Tensor = aten::conv2d(%5644, %self.temp1.upc1.memconv.c2.op.conv.weight, %self.temp1.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.180, %output.68)
                  block1():
                    %input_right.188 : Tensor = prim::unchecked_cast(%input_right.180)
                    %left_fold_2fold.111 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.45)
                    %center.159 : Tensor? = prim::GetAttr[name="center"](%c2.45)
                    %5656 : bool = aten::__is__(%center.159, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5657 : bool = aten::__not__(%5656) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.161 : Tensor, %left_fold_2fold.113 : Tensor = prim::If(%5657) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.163 : Tensor = prim::unchecked_cast(%center.159)
                        -> (%center.163, %left_fold_2fold.111)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5661 : int[] = aten::size(%center.161) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.73 : int, %c.55 : int, %h.73 : int, %w.73 : int = prim::ListUnpack(%5661)
                    %fold.92 : int = aten::floordiv(%c.55, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5667 : int[] = aten::size(%left_fold_2fold.113) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5668 : int = aten::__getitem__(%5667, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5669 : bool = aten::eq(%5668, %fold.92) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5669) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5671 : Tensor = aten::slice(%input_right.188, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5672 : Tensor = aten::slice(%5671, %33, %34, %fold.92, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5673 : Tensor = aten::slice(%5672, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5674 : Tensor = aten::slice(%5673, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5675 : Tensor = aten::slice(%center.161, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5676 : int = aten::mul(%fold.92, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5677 : Tensor = aten::slice(%5675, %33, %5676, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5678 : Tensor = aten::slice(%5677, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5679 : Tensor = aten::slice(%5678, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5680 : Tensor[] = prim::ListConstruct(%5674, %left_fold_2fold.113, %5679)
                    %5681 : Tensor = aten::cat(%5680, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.70 : Tensor = aten::conv2d(%5681, %self.temp1.upc1.memconv.c2.op.conv.weight, %self.temp1.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.188, %output.70)
                %center.165 : Tensor? = prim::GetAttr[name="center"](%c2.45)
                %fold.94 : int = prim::GetAttr[name="fold"](%c2.45)
                %5691 : bool = aten::__isnot__(%center.165, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.177 : Tensor = prim::If(%5691) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.179 : Tensor = prim::unchecked_cast(%center.165)
                    -> (%x.179)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %5694 : Tensor = aten::slice(%x.177, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5695 : int = aten::mul(%fold.94, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %5696 : Tensor = aten::slice(%5694, %33, %fold.94, %5695, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5697 : Tensor = aten::slice(%5696, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5698 : Tensor = aten::slice(%5697, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.45, %5698)
                %5699 : bool = aten::__isnot__(%input_right.186, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%5699) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.190 : Tensor = prim::unchecked_cast(%input_right.186)
                     = prim::SetAttr[name="center"](%c2.45, %input_right.190)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.45, %34)
                    -> ()
                -> (%output.66)
            %5701 : bool = aten::__isnot__(%x.175, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x.181 : Tensor? = prim::If(%5701) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.183 : Tensor = prim::unchecked_cast(%x.175)
                %x.185 : Tensor = aten::hardtanh_(%x.183, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.185)
              block1():
                -> (%x.175)
            %5705 : bool = aten::__isnot__(%x.181, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
            %x1.29 : Tensor? = prim::If(%5705) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
              block0():
                %x.187 : Tensor = prim::unchecked_cast(%x.181)
                %input.34 : Tensor = aten::conv2d(%x.187, %self.temp1.upc1.convblock.0.weight, %self.temp1.upc1.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.189 : Tensor = aten::pixel_shuffle(%input.34, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
                -> (%x.189)
              block1():
                -> (%x.181)
            %skip2.4 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip2"](%temp1.5)
            %5719 : bool = aten::__isnot__(%x1.29, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %5720 : Tensor? = prim::If(%5719) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list.10 : Tensor[] = prim::GetAttr[name="mem_list"](%skip2.4)
                %5722 : Tensor = aten::pop(%mem_list.10, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%5722)
              block1():
                -> (%34)
            %5723 : bool = aten::__is__(%x1.29, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
            %5724 : bool, %x1.31 : Tensor? = prim::If(%5723) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
              block0():
                -> (%35, %x1.29)
              block1():
                %x1.33 : Tensor = prim::unchecked_cast(%x1.29)
                %5727 : bool = aten::__is__(%5720, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
                -> (%5727, %x1.33)
            %5728 : Tensor? = prim::If(%5724) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
              block0():
                -> (%34)
              block1():
                %x1.35 : Tensor = prim::unchecked_cast(%x1.31)
                %x2.11 : Tensor = prim::unchecked_cast(%5720)
                %5731 : Tensor = aten::add(%x1.35, %x2.11, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
                -> (%5731)
            %5732 : bool = aten::__is__(%5728, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:11
            %x.191 : Tensor? = prim::If(%5732) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:8
              block0():
                -> (%34)
              block1():
                %x.193 : Tensor = prim::unchecked_cast(%5728)
                %input.36 : Tensor = aten::conv2d(%x.193, %self.temp1.outc.convblock.0.weight, %self.temp1.outc.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %input.38 : Tensor = aten::hardtanh_(%input.36, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                %input.40 : Tensor = aten::conv2d(%input.38, %self.temp1.outc.convblock.3.weight, %self.temp1.outc.convblock.3.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input.40)
            %skip1.4 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip1"](%temp1.5)
            %5752 : bool = aten::__isnot__(%x.191, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %5753 : Tensor? = prim::If(%5752) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list.12 : Tensor[] = prim::GetAttr[name="mem_list"](%skip1.4)
                %5755 : Tensor = aten::pop(%mem_list.12, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%5755)
              block1():
                -> (%34)
            %5756 : bool = aten::__is__(%5753, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
            %5757 : bool, %x1.37 : Tensor? = prim::If(%5756) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
              block0():
                -> (%35, %5753)
              block1():
                %x1.39 : Tensor = prim::unchecked_cast(%5753)
                %5760 : bool = aten::__is__(%x.191, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:25
                -> (%5760, %x1.39)
            %x.20 : Tensor? = prim::If(%5757) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:8
              block0():
                -> (%34)
              block1():
                %x1.41 : Tensor = prim::unchecked_cast(%x1.37)
                %x2.13 : Tensor = prim::unchecked_cast(%x.191)
                %5764 : Tensor = aten::slice(%x1.41, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %5765 : Tensor = aten::slice(%5764, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %5766 : Tensor = aten::slice(%5765, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %5767 : Tensor = aten::slice(%5766, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %5768 : Tensor = aten::slice(%x2.13, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %5769 : Tensor = aten::slice(%5768, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %5770 : Tensor = aten::slice(%5769, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %5771 : Tensor = aten::slice(%5770, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %5772 : Tensor = aten::sub(%5767, %5771, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %5773 : Tensor = aten::slice(%x2.13, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %5774 : Tensor = aten::slice(%5773, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %5775 : Tensor = aten::slice(%5774, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %5776 : Tensor = aten::slice(%5775, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %5777 : Tensor = aten::copy_(%5776, %5772, %30) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                -> (%x2.13)
            %temp2.5 : __torch__.upscale.model.bsvd.model.___torch_mangle_55.DenBlock = prim::GetAttr[name="temp2"](%self)
            %skip1.1 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip1"](%temp2.5)
            %5780 : bool = aten::__is__(%x.20, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:426:11
            %5781 : Tensor? = prim::If(%5780) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:426:8
              block0():
                -> (%34)
              block1():
                %x.10 : Tensor = prim::unchecked_cast(%x.20)
                %5783 : Tensor = aten::slice(%x.10, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
                %5784 : Tensor = aten::slice(%5783, %33, %32, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
                %5785 : Tensor = aten::slice(%5784, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
                %5786 : Tensor = aten::slice(%5785, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:429:19
                -> (%5786)
            %5787 : bool = aten::__isnot__(%5781, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
             = prim::If(%5787) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
              block0():
                %x.12 : Tensor = prim::unchecked_cast(%5781)
                %mem_list.1 : Tensor[] = prim::GetAttr[name="mem_list"](%skip1.1)
                 = aten::insert(%mem_list.1, %32, %x.12) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
                -> ()
              block1():
                -> ()
            %5791 : bool = aten::__is__(%x.20, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:245:11
            %x0.1 : Tensor? = prim::If(%5791) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:245:8
              block0():
                -> (%34)
              block1():
                %x.14 : Tensor = prim::unchecked_cast(%x.20)
                %input.10 : Tensor = aten::conv2d(%x.14, %self.temp2.inc.convblock.0.weight, %self.temp2.inc.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %input.18 : Tensor = aten::hardtanh_(%input.10, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                %input.21 : Tensor = aten::conv2d(%input.18, %self.temp2.inc.convblock.3.weight, %self.temp2.inc.convblock.3.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %input.25 : Tensor = aten::hardtanh_(%input.21, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%input.25)
            %skip2.1 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip2"](%temp2.5)
            %5812 : bool = aten::__isnot__(%x0.1, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
             = prim::If(%5812) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
              block0():
                %x.19 : Tensor = prim::unchecked_cast(%x0.1)
                %mem_list.3 : Tensor[] = prim::GetAttr[name="mem_list"](%skip2.1)
                 = aten::insert(%mem_list.3, %32, %x.19) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
                -> ()
              block1():
                -> ()
            %downc0.12 : __torch__.upscale.model.bsvd.model.___torch_mangle_31.DownBlock = prim::GetAttr[name="downc0"](%temp2.5)
            %5816 : bool = aten::__isnot__(%x0.1, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:11
            %x.24 : Tensor? = prim::If(%5816) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:8
              block0():
                %x.27 : Tensor = prim::unchecked_cast(%x0.1)
                %input.12 : Tensor = aten::conv2d(%x.27, %self.temp2.downc0.convblock.0.weight, %self.temp2.downc0.convblock.0.bias, %7565, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.29 : Tensor = aten::hardtanh_(%input.12, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.29)
              block1():
                -> (%x0.1)
            %memconv.47 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%downc0.12)
            %c1.47 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.47)
            %5830 : bool = aten::__isnot__(%x.24, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.85 : Tensor? = prim::If(%5830) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.89 : Tensor = prim::unchecked_cast(%x.24)
                %5833 : int[] = aten::size(%input_right.89) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %5834 : int, %5835 : int, %5836 : int, %5837 : int = prim::ListUnpack(%5833)
                 = prim::SetAttr[name="n"](%c1.47, %5834)
                 = prim::SetAttr[name="c"](%c1.47, %5835)
                 = prim::SetAttr[name="h"](%c1.47, %5836)
                 = prim::SetAttr[name="w"](%c1.47, %5837)
                %c.4 : int = prim::GetAttr[name="c"](%c1.47)
                %5839 : int = aten::floordiv(%c.4, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.47, %5839)
                -> (%input_right.89)
              block1():
                -> (%x.24)
            %center.14 : Tensor? = prim::GetAttr[name="center"](%c1.47)
            %5841 : bool = aten::__is__(%center.14, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.31 : Tensor? = prim::If(%5841) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %5843 : bool = aten::__isnot__(%input_right.85, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%5843) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.91 : Tensor = prim::unchecked_cast(%input_right.85)
                    %left_fold_2fold.7 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.47)
                    %5846 : int[] = aten::size(%left_fold_2fold.7) # <string>:13:9
                    %5847 : int = aten::__getitem__(%5846, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %5848 : bool = aten::eq(%5847, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%5848) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.6 : int = prim::GetAttr[name="n"](%c1.47)
                        %fold.7 : int = prim::GetAttr[name="fold"](%c1.47)
                        %h.6 : int = prim::GetAttr[name="h"](%c1.47)
                        %w.6 : int = prim::GetAttr[name="w"](%c1.47)
                        %5853 : int[] = prim::ListConstruct(%n.6, %fold.7, %h.6, %w.6)
                        %5854 : Tensor = aten::zeros(%5853, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.47, %5854)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.47, %input_right.91)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.47, %34)
                    -> ()
                -> (%34)
              block1():
                %5855 : bool = aten::__is__(%input_right.85, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.95 : Tensor?, %output.19 : Tensor = prim::If(%5855) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.16 : Tensor? = prim::GetAttr[name="center"](%c1.47)
                    %5859 : bool = aten::__isnot__(%center.16, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%5859) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.9 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.47)
                    %center.18 : Tensor? = prim::GetAttr[name="center"](%c1.47)
                    %n.8 : int = prim::GetAttr[name="n"](%c1.47)
                    %fold.9 : int = prim::GetAttr[name="fold"](%c1.47)
                    %h.8 : int = prim::GetAttr[name="h"](%c1.47)
                    %w.8 : int = prim::GetAttr[name="w"](%c1.47)
                    %5867 : int[] = prim::ListConstruct(%n.8, %fold.9, %h.8, %w.8)
                    %5868 : Tensor = aten::zeros(%5867, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %5870 : bool = aten::__is__(%center.18, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5871 : bool = aten::__not__(%5870) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.20 : Tensor, %left_fold_2fold.34 : Tensor = prim::If(%5871) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.22 : Tensor = prim::unchecked_cast(%center.18)
                        -> (%center.22, %left_fold_2fold.9)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5875 : int[] = aten::size(%center.20) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.10 : int, %c.6 : int, %h.10 : int, %w.10 : int = prim::ListUnpack(%5875)
                    %fold.11 : int = aten::floordiv(%c.6, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5881 : int[] = aten::size(%left_fold_2fold.34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5882 : int = aten::__getitem__(%5881, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5883 : bool = aten::eq(%5882, %fold.11) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5883) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5885 : Tensor = aten::slice(%5868, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5886 : Tensor = aten::slice(%5885, %33, %34, %fold.11, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5887 : Tensor = aten::slice(%5886, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5888 : Tensor = aten::slice(%5887, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5889 : Tensor = aten::slice(%center.20, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5890 : int = aten::mul(%fold.11, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5891 : Tensor = aten::slice(%5889, %33, %5890, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5892 : Tensor = aten::slice(%5891, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5893 : Tensor = aten::slice(%5892, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5894 : Tensor[] = prim::ListConstruct(%5888, %left_fold_2fold.34, %5893)
                    %5895 : Tensor = aten::cat(%5894, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.21 : Tensor = aten::conv2d(%5895, %self.temp2.downc0.memconv.c1.op.conv.weight, %self.temp2.downc0.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.85, %output.21)
                  block1():
                    %input_right.97 : Tensor = prim::unchecked_cast(%input_right.85)
                    %left_fold_2fold.36 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.47)
                    %center.24 : Tensor? = prim::GetAttr[name="center"](%c1.47)
                    %5907 : bool = aten::__is__(%center.24, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5908 : bool = aten::__not__(%5907) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.26 : Tensor, %left_fold_2fold.38 : Tensor = prim::If(%5908) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.28 : Tensor = prim::unchecked_cast(%center.24)
                        -> (%center.28, %left_fold_2fold.36)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %5912 : int[] = aten::size(%center.26) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.12 : int, %c.8 : int, %h.12 : int, %w.12 : int = prim::ListUnpack(%5912)
                    %fold.13 : int = aten::floordiv(%c.8, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %5918 : int[] = aten::size(%left_fold_2fold.38) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5919 : int = aten::__getitem__(%5918, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %5920 : bool = aten::eq(%5919, %fold.13) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%5920) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %5922 : Tensor = aten::slice(%input_right.97, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5923 : Tensor = aten::slice(%5922, %33, %34, %fold.13, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5924 : Tensor = aten::slice(%5923, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5925 : Tensor = aten::slice(%5924, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %5926 : Tensor = aten::slice(%center.26, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5927 : int = aten::mul(%fold.13, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %5928 : Tensor = aten::slice(%5926, %33, %5927, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5929 : Tensor = aten::slice(%5928, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5930 : Tensor = aten::slice(%5929, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %5931 : Tensor[] = prim::ListConstruct(%5925, %left_fold_2fold.38, %5930)
                    %5932 : Tensor = aten::cat(%5931, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.23 : Tensor = aten::conv2d(%5932, %self.temp2.downc0.memconv.c1.op.conv.weight, %self.temp2.downc0.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.97, %output.23)
                %center.30 : Tensor? = prim::GetAttr[name="center"](%c1.47)
                %fold.15 : int = prim::GetAttr[name="fold"](%c1.47)
                %5942 : bool = aten::__isnot__(%center.30, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.33 : Tensor = prim::If(%5942) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.35 : Tensor = prim::unchecked_cast(%center.30)
                    -> (%x.35)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %5945 : Tensor = aten::slice(%x.33, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5946 : int = aten::mul(%fold.15, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %5947 : Tensor = aten::slice(%5945, %33, %fold.15, %5946, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5948 : Tensor = aten::slice(%5947, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %5949 : Tensor = aten::slice(%5948, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.47, %5949)
                %5950 : bool = aten::__isnot__(%input_right.95, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%5950) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.99 : Tensor = prim::unchecked_cast(%input_right.95)
                     = prim::SetAttr[name="center"](%c1.47, %input_right.99)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.47, %34)
                    -> ()
                -> (%output.19)
            %5952 : bool = aten::__isnot__(%x.31, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.70 : Tensor? = prim::If(%5952) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.72 : Tensor = prim::unchecked_cast(%x.31)
                %x.74 : Tensor = aten::hardtanh_(%x.72, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.74)
              block1():
                -> (%x.31)
            %c2.47 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.47)
            %5957 : bool = aten::__isnot__(%x.70, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.101 : Tensor? = prim::If(%5957) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.103 : Tensor = prim::unchecked_cast(%x.70)
                %5960 : int[] = aten::size(%input_right.103) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %5961 : int, %5962 : int, %5963 : int, %5964 : int = prim::ListUnpack(%5960)
                 = prim::SetAttr[name="n"](%c2.47, %5961)
                 = prim::SetAttr[name="c"](%c2.47, %5962)
                 = prim::SetAttr[name="h"](%c2.47, %5963)
                 = prim::SetAttr[name="w"](%c2.47, %5964)
                %c.10 : int = prim::GetAttr[name="c"](%c2.47)
                %5966 : int = aten::floordiv(%c.10, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.47, %5966)
                -> (%input_right.103)
              block1():
                -> (%x.70)
            %center.32 : Tensor? = prim::GetAttr[name="center"](%c2.47)
            %5968 : bool = aten::__is__(%center.32, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.76 : Tensor? = prim::If(%5968) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %5970 : bool = aten::__isnot__(%input_right.101, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%5970) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.105 : Tensor = prim::unchecked_cast(%input_right.101)
                    %left_fold_2fold.40 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.47)
                    %5973 : int[] = aten::size(%left_fold_2fold.40) # <string>:13:9
                    %5974 : int = aten::__getitem__(%5973, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %5975 : bool = aten::eq(%5974, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%5975) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.14 : int = prim::GetAttr[name="n"](%c2.47)
                        %fold.17 : int = prim::GetAttr[name="fold"](%c2.47)
                        %h.14 : int = prim::GetAttr[name="h"](%c2.47)
                        %w.14 : int = prim::GetAttr[name="w"](%c2.47)
                        %5980 : int[] = prim::ListConstruct(%n.14, %fold.17, %h.14, %w.14)
                        %5981 : Tensor = aten::zeros(%5980, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.47, %5981)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.47, %input_right.105)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.47, %34)
                    -> ()
                -> (%34)
              block1():
                %5982 : bool = aten::__is__(%input_right.101, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.107 : Tensor?, %output.25 : Tensor = prim::If(%5982) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.34 : Tensor? = prim::GetAttr[name="center"](%c2.47)
                    %5986 : bool = aten::__isnot__(%center.34, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%5986) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.42 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.47)
                    %center.36 : Tensor? = prim::GetAttr[name="center"](%c2.47)
                    %n.16 : int = prim::GetAttr[name="n"](%c2.47)
                    %fold.19 : int = prim::GetAttr[name="fold"](%c2.47)
                    %h.16 : int = prim::GetAttr[name="h"](%c2.47)
                    %w.16 : int = prim::GetAttr[name="w"](%c2.47)
                    %5994 : int[] = prim::ListConstruct(%n.16, %fold.19, %h.16, %w.16)
                    %5995 : Tensor = aten::zeros(%5994, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %5997 : bool = aten::__is__(%center.36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %5998 : bool = aten::__not__(%5997) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.38 : Tensor, %left_fold_2fold.44 : Tensor = prim::If(%5998) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.40 : Tensor = prim::unchecked_cast(%center.36)
                        -> (%center.40, %left_fold_2fold.42)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6002 : int[] = aten::size(%center.38) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.18 : int, %c.12 : int, %h.18 : int, %w.18 : int = prim::ListUnpack(%6002)
                    %fold.21 : int = aten::floordiv(%c.12, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6008 : int[] = aten::size(%left_fold_2fold.44) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6009 : int = aten::__getitem__(%6008, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6010 : bool = aten::eq(%6009, %fold.21) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6010) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6012 : Tensor = aten::slice(%5995, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6013 : Tensor = aten::slice(%6012, %33, %34, %fold.21, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6014 : Tensor = aten::slice(%6013, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6015 : Tensor = aten::slice(%6014, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6016 : Tensor = aten::slice(%center.38, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6017 : int = aten::mul(%fold.21, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6018 : Tensor = aten::slice(%6016, %33, %6017, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6019 : Tensor = aten::slice(%6018, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6020 : Tensor = aten::slice(%6019, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6021 : Tensor[] = prim::ListConstruct(%6015, %left_fold_2fold.44, %6020)
                    %6022 : Tensor = aten::cat(%6021, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.27 : Tensor = aten::conv2d(%6022, %self.temp2.downc0.memconv.c2.op.conv.weight, %self.temp2.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.101, %output.27)
                  block1():
                    %input_right.109 : Tensor = prim::unchecked_cast(%input_right.101)
                    %left_fold_2fold.46 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.47)
                    %center.42 : Tensor? = prim::GetAttr[name="center"](%c2.47)
                    %6034 : bool = aten::__is__(%center.42, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6035 : bool = aten::__not__(%6034) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.44 : Tensor, %left_fold_2fold.48 : Tensor = prim::If(%6035) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.46 : Tensor = prim::unchecked_cast(%center.42)
                        -> (%center.46, %left_fold_2fold.46)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6039 : int[] = aten::size(%center.44) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.20 : int, %c.14 : int, %h.20 : int, %w.20 : int = prim::ListUnpack(%6039)
                    %fold.23 : int = aten::floordiv(%c.14, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6045 : int[] = aten::size(%left_fold_2fold.48) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6046 : int = aten::__getitem__(%6045, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6047 : bool = aten::eq(%6046, %fold.23) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6047) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6049 : Tensor = aten::slice(%input_right.109, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6050 : Tensor = aten::slice(%6049, %33, %34, %fold.23, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6051 : Tensor = aten::slice(%6050, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6052 : Tensor = aten::slice(%6051, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6053 : Tensor = aten::slice(%center.44, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6054 : int = aten::mul(%fold.23, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6055 : Tensor = aten::slice(%6053, %33, %6054, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6056 : Tensor = aten::slice(%6055, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6057 : Tensor = aten::slice(%6056, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6058 : Tensor[] = prim::ListConstruct(%6052, %left_fold_2fold.48, %6057)
                    %6059 : Tensor = aten::cat(%6058, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.29 : Tensor = aten::conv2d(%6059, %self.temp2.downc0.memconv.c2.op.conv.weight, %self.temp2.downc0.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.109, %output.29)
                %center.48 : Tensor? = prim::GetAttr[name="center"](%c2.47)
                %fold.25 : int = prim::GetAttr[name="fold"](%c2.47)
                %6069 : bool = aten::__isnot__(%center.48, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.78 : Tensor = prim::If(%6069) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.21 : Tensor = prim::unchecked_cast(%center.48)
                    -> (%x.21)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %6072 : Tensor = aten::slice(%x.78, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6073 : int = aten::mul(%fold.25, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %6074 : Tensor = aten::slice(%6072, %33, %fold.25, %6073, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6075 : Tensor = aten::slice(%6074, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6076 : Tensor = aten::slice(%6075, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.47, %6076)
                %6077 : bool = aten::__isnot__(%input_right.107, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%6077) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.111 : Tensor = prim::unchecked_cast(%input_right.107)
                     = prim::SetAttr[name="center"](%c2.47, %input_right.111)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.47, %34)
                    -> ()
                -> (%output.25)
            %6079 : bool = aten::__isnot__(%x.76, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x1.1 : Tensor? = prim::If(%6079) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.82 : Tensor = prim::unchecked_cast(%x.76)
                %x.84 : Tensor = aten::hardtanh_(%x.82, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.84)
              block1():
                -> (%x.76)
            %skip3.1 : __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip = prim::GetAttr[name="skip3"](%temp2.5)
            %6084 : bool = aten::__isnot__(%x1.1, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:11
             = prim::If(%6084) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:340:8
              block0():
                %x.80 : Tensor = prim::unchecked_cast(%x1.1)
                %mem_list.5 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.1)
                 = aten::insert(%mem_list.5, %32, %x.80) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:341:12
                -> ()
              block1():
                -> ()
            %downc1.12 : __torch__.upscale.model.bsvd.model.___torch_mangle_38.DownBlock = prim::GetAttr[name="downc1"](%temp2.5)
            %6088 : bool = aten::__isnot__(%x1.1, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:11
            %x.16 : Tensor? = prim::If(%6088) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:271:8
              block0():
                %x.108 : Tensor = prim::unchecked_cast(%x1.1)
                %input.16 : Tensor = aten::conv2d(%x.108, %self.temp2.downc1.convblock.0.weight, %self.temp2.downc1.convblock.0.bias, %7565, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.13 : Tensor = aten::hardtanh_(%input.16, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.13)
              block1():
                -> (%x1.1)
            %memconv.49 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%downc1.12)
            %c1.49 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.49)
            %6102 : bool = aten::__isnot__(%x.16, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.113 : Tensor? = prim::If(%6102) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.115 : Tensor = prim::unchecked_cast(%x.16)
                %6105 : int[] = aten::size(%input_right.115) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %6106 : int, %6107 : int, %6108 : int, %6109 : int = prim::ListUnpack(%6105)
                 = prim::SetAttr[name="n"](%c1.49, %6106)
                 = prim::SetAttr[name="c"](%c1.49, %6107)
                 = prim::SetAttr[name="h"](%c1.49, %6108)
                 = prim::SetAttr[name="w"](%c1.49, %6109)
                %c.16 : int = prim::GetAttr[name="c"](%c1.49)
                %6111 : int = aten::floordiv(%c.16, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.49, %6111)
                -> (%input_right.115)
              block1():
                -> (%x.16)
            %center.50 : Tensor? = prim::GetAttr[name="center"](%c1.49)
            %6113 : bool = aten::__is__(%center.50, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.86 : Tensor? = prim::If(%6113) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %6115 : bool = aten::__isnot__(%input_right.113, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%6115) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.117 : Tensor = prim::unchecked_cast(%input_right.113)
                    %left_fold_2fold.50 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.49)
                    %6118 : int[] = aten::size(%left_fold_2fold.50) # <string>:13:9
                    %6119 : int = aten::__getitem__(%6118, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %6120 : bool = aten::eq(%6119, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%6120) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.22 : int = prim::GetAttr[name="n"](%c1.49)
                        %fold.27 : int = prim::GetAttr[name="fold"](%c1.49)
                        %h.22 : int = prim::GetAttr[name="h"](%c1.49)
                        %w.22 : int = prim::GetAttr[name="w"](%c1.49)
                        %6125 : int[] = prim::ListConstruct(%n.22, %fold.27, %h.22, %w.22)
                        %6126 : Tensor = aten::zeros(%6125, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.49, %6126)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.49, %input_right.117)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.49, %34)
                    -> ()
                -> (%34)
              block1():
                %6127 : bool = aten::__is__(%input_right.113, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.119 : Tensor?, %output.31 : Tensor = prim::If(%6127) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.52 : Tensor? = prim::GetAttr[name="center"](%c1.49)
                    %6131 : bool = aten::__isnot__(%center.52, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%6131) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.52 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.49)
                    %center.54 : Tensor? = prim::GetAttr[name="center"](%c1.49)
                    %n.24 : int = prim::GetAttr[name="n"](%c1.49)
                    %fold.29 : int = prim::GetAttr[name="fold"](%c1.49)
                    %h.24 : int = prim::GetAttr[name="h"](%c1.49)
                    %w.24 : int = prim::GetAttr[name="w"](%c1.49)
                    %6139 : int[] = prim::ListConstruct(%n.24, %fold.29, %h.24, %w.24)
                    %6140 : Tensor = aten::zeros(%6139, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %6142 : bool = aten::__is__(%center.54, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6143 : bool = aten::__not__(%6142) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.56 : Tensor, %left_fold_2fold.54 : Tensor = prim::If(%6143) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.58 : Tensor = prim::unchecked_cast(%center.54)
                        -> (%center.58, %left_fold_2fold.52)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6147 : int[] = aten::size(%center.56) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.26 : int, %c.18 : int, %h.26 : int, %w.26 : int = prim::ListUnpack(%6147)
                    %fold.31 : int = aten::floordiv(%c.18, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6153 : int[] = aten::size(%left_fold_2fold.54) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6154 : int = aten::__getitem__(%6153, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6155 : bool = aten::eq(%6154, %fold.31) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6155) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6157 : Tensor = aten::slice(%6140, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6158 : Tensor = aten::slice(%6157, %33, %34, %fold.31, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6159 : Tensor = aten::slice(%6158, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6160 : Tensor = aten::slice(%6159, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6161 : Tensor = aten::slice(%center.56, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6162 : int = aten::mul(%fold.31, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6163 : Tensor = aten::slice(%6161, %33, %6162, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6164 : Tensor = aten::slice(%6163, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6165 : Tensor = aten::slice(%6164, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6166 : Tensor[] = prim::ListConstruct(%6160, %left_fold_2fold.54, %6165)
                    %6167 : Tensor = aten::cat(%6166, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.33 : Tensor = aten::conv2d(%6167, %self.temp2.downc1.memconv.c1.op.conv.weight, %self.temp2.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.113, %output.33)
                  block1():
                    %input_right.121 : Tensor = prim::unchecked_cast(%input_right.113)
                    %left_fold_2fold.56 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.49)
                    %center.60 : Tensor? = prim::GetAttr[name="center"](%c1.49)
                    %6179 : bool = aten::__is__(%center.60, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6180 : bool = aten::__not__(%6179) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.62 : Tensor, %left_fold_2fold.58 : Tensor = prim::If(%6180) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.64 : Tensor = prim::unchecked_cast(%center.60)
                        -> (%center.64, %left_fold_2fold.56)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6184 : int[] = aten::size(%center.62) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.28 : int, %c.20 : int, %h.28 : int, %w.28 : int = prim::ListUnpack(%6184)
                    %fold.33 : int = aten::floordiv(%c.20, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6190 : int[] = aten::size(%left_fold_2fold.58) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6191 : int = aten::__getitem__(%6190, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6192 : bool = aten::eq(%6191, %fold.33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6192) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6194 : Tensor = aten::slice(%input_right.121, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6195 : Tensor = aten::slice(%6194, %33, %34, %fold.33, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6196 : Tensor = aten::slice(%6195, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6197 : Tensor = aten::slice(%6196, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6198 : Tensor = aten::slice(%center.62, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6199 : int = aten::mul(%fold.33, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6200 : Tensor = aten::slice(%6198, %33, %6199, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6201 : Tensor = aten::slice(%6200, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6202 : Tensor = aten::slice(%6201, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6203 : Tensor[] = prim::ListConstruct(%6197, %left_fold_2fold.58, %6202)
                    %6204 : Tensor = aten::cat(%6203, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.35 : Tensor = aten::conv2d(%6204, %self.temp2.downc1.memconv.c1.op.conv.weight, %self.temp2.downc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.121, %output.35)
                %center.66 : Tensor? = prim::GetAttr[name="center"](%c1.49)
                %fold.35 : int = prim::GetAttr[name="fold"](%c1.49)
                %6214 : bool = aten::__isnot__(%center.66, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.88 : Tensor = prim::If(%6214) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.90 : Tensor = prim::unchecked_cast(%center.66)
                    -> (%x.90)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %6217 : Tensor = aten::slice(%x.88, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6218 : int = aten::mul(%fold.35, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %6219 : Tensor = aten::slice(%6217, %33, %fold.35, %6218, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6220 : Tensor = aten::slice(%6219, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6221 : Tensor = aten::slice(%6220, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.49, %6221)
                %6222 : bool = aten::__isnot__(%input_right.119, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%6222) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.123 : Tensor = prim::unchecked_cast(%input_right.119)
                     = prim::SetAttr[name="center"](%c1.49, %input_right.123)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.49, %34)
                    -> ()
                -> (%output.31)
            %6224 : bool = aten::__isnot__(%x.86, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.92 : Tensor? = prim::If(%6224) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.94 : Tensor = prim::unchecked_cast(%x.86)
                %x.96 : Tensor = aten::hardtanh_(%x.94, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.96)
              block1():
                -> (%x.86)
            %c2.49 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.49)
            %6229 : bool = aten::__isnot__(%x.92, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.125 : Tensor? = prim::If(%6229) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.127 : Tensor = prim::unchecked_cast(%x.92)
                %6232 : int[] = aten::size(%input_right.127) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %6233 : int, %6234 : int, %6235 : int, %6236 : int = prim::ListUnpack(%6232)
                 = prim::SetAttr[name="n"](%c2.49, %6233)
                 = prim::SetAttr[name="c"](%c2.49, %6234)
                 = prim::SetAttr[name="h"](%c2.49, %6235)
                 = prim::SetAttr[name="w"](%c2.49, %6236)
                %c.22 : int = prim::GetAttr[name="c"](%c2.49)
                %6238 : int = aten::floordiv(%c.22, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.49, %6238)
                -> (%input_right.127)
              block1():
                -> (%x.92)
            %center.68 : Tensor? = prim::GetAttr[name="center"](%c2.49)
            %6240 : bool = aten::__is__(%center.68, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.98 : Tensor? = prim::If(%6240) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %6242 : bool = aten::__isnot__(%input_right.125, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%6242) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.129 : Tensor = prim::unchecked_cast(%input_right.125)
                    %left_fold_2fold.60 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.49)
                    %6245 : int[] = aten::size(%left_fold_2fold.60) # <string>:13:9
                    %6246 : int = aten::__getitem__(%6245, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %6247 : bool = aten::eq(%6246, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%6247) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.30 : int = prim::GetAttr[name="n"](%c2.49)
                        %fold.37 : int = prim::GetAttr[name="fold"](%c2.49)
                        %h.30 : int = prim::GetAttr[name="h"](%c2.49)
                        %w.30 : int = prim::GetAttr[name="w"](%c2.49)
                        %6252 : int[] = prim::ListConstruct(%n.30, %fold.37, %h.30, %w.30)
                        %6253 : Tensor = aten::zeros(%6252, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.49, %6253)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.49, %input_right.129)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.49, %34)
                    -> ()
                -> (%34)
              block1():
                %6254 : bool = aten::__is__(%input_right.125, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.131 : Tensor?, %output.37 : Tensor = prim::If(%6254) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.70 : Tensor? = prim::GetAttr[name="center"](%c2.49)
                    %6258 : bool = aten::__isnot__(%center.70, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%6258) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.62 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.49)
                    %center.72 : Tensor? = prim::GetAttr[name="center"](%c2.49)
                    %n.32 : int = prim::GetAttr[name="n"](%c2.49)
                    %fold.39 : int = prim::GetAttr[name="fold"](%c2.49)
                    %h.32 : int = prim::GetAttr[name="h"](%c2.49)
                    %w.32 : int = prim::GetAttr[name="w"](%c2.49)
                    %6266 : int[] = prim::ListConstruct(%n.32, %fold.39, %h.32, %w.32)
                    %6267 : Tensor = aten::zeros(%6266, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %6269 : bool = aten::__is__(%center.72, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6270 : bool = aten::__not__(%6269) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.74 : Tensor, %left_fold_2fold.64 : Tensor = prim::If(%6270) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.76 : Tensor = prim::unchecked_cast(%center.72)
                        -> (%center.76, %left_fold_2fold.62)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6274 : int[] = aten::size(%center.74) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.34 : int, %c.24 : int, %h.34 : int, %w.34 : int = prim::ListUnpack(%6274)
                    %fold.41 : int = aten::floordiv(%c.24, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6280 : int[] = aten::size(%left_fold_2fold.64) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6281 : int = aten::__getitem__(%6280, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6282 : bool = aten::eq(%6281, %fold.41) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6282) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6284 : Tensor = aten::slice(%6267, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6285 : Tensor = aten::slice(%6284, %33, %34, %fold.41, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6286 : Tensor = aten::slice(%6285, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6287 : Tensor = aten::slice(%6286, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6288 : Tensor = aten::slice(%center.74, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6289 : int = aten::mul(%fold.41, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6290 : Tensor = aten::slice(%6288, %33, %6289, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6291 : Tensor = aten::slice(%6290, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6292 : Tensor = aten::slice(%6291, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6293 : Tensor[] = prim::ListConstruct(%6287, %left_fold_2fold.64, %6292)
                    %6294 : Tensor = aten::cat(%6293, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.39 : Tensor = aten::conv2d(%6294, %self.temp2.downc1.memconv.c2.op.conv.weight, %self.temp2.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.125, %output.39)
                  block1():
                    %input_right.133 : Tensor = prim::unchecked_cast(%input_right.125)
                    %left_fold_2fold.66 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.49)
                    %center.78 : Tensor? = prim::GetAttr[name="center"](%c2.49)
                    %6306 : bool = aten::__is__(%center.78, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6307 : bool = aten::__not__(%6306) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.80 : Tensor, %left_fold_2fold.68 : Tensor = prim::If(%6307) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.82 : Tensor = prim::unchecked_cast(%center.78)
                        -> (%center.82, %left_fold_2fold.66)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6311 : int[] = aten::size(%center.80) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.36 : int, %c.26 : int, %h.36 : int, %w.36 : int = prim::ListUnpack(%6311)
                    %fold.43 : int = aten::floordiv(%c.26, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6317 : int[] = aten::size(%left_fold_2fold.68) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6318 : int = aten::__getitem__(%6317, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6319 : bool = aten::eq(%6318, %fold.43) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6319) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6321 : Tensor = aten::slice(%input_right.133, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6322 : Tensor = aten::slice(%6321, %33, %34, %fold.43, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6323 : Tensor = aten::slice(%6322, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6324 : Tensor = aten::slice(%6323, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6325 : Tensor = aten::slice(%center.80, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6326 : int = aten::mul(%fold.43, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6327 : Tensor = aten::slice(%6325, %33, %6326, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6328 : Tensor = aten::slice(%6327, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6329 : Tensor = aten::slice(%6328, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6330 : Tensor[] = prim::ListConstruct(%6324, %left_fold_2fold.68, %6329)
                    %6331 : Tensor = aten::cat(%6330, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.41 : Tensor = aten::conv2d(%6331, %self.temp2.downc1.memconv.c2.op.conv.weight, %self.temp2.downc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.133, %output.41)
                %center.84 : Tensor? = prim::GetAttr[name="center"](%c2.49)
                %fold.45 : int = prim::GetAttr[name="fold"](%c2.49)
                %6341 : bool = aten::__isnot__(%center.84, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.100 : Tensor = prim::If(%6341) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.102 : Tensor = prim::unchecked_cast(%center.84)
                    -> (%x.102)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %6344 : Tensor = aten::slice(%x.100, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6345 : int = aten::mul(%fold.45, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %6346 : Tensor = aten::slice(%6344, %33, %fold.45, %6345, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6347 : Tensor = aten::slice(%6346, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6348 : Tensor = aten::slice(%6347, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.49, %6348)
                %6349 : bool = aten::__isnot__(%input_right.131, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%6349) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.135 : Tensor = prim::unchecked_cast(%input_right.131)
                     = prim::SetAttr[name="center"](%c2.49, %input_right.135)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.49, %34)
                    -> ()
                -> (%output.37)
            %6351 : bool = aten::__isnot__(%x.98, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x2.1 : Tensor? = prim::If(%6351) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.104 : Tensor = prim::unchecked_cast(%x.98)
                %x.106 : Tensor = aten::hardtanh_(%x.104, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.106)
              block1():
                -> (%x.98)
            %upc2.12 : __torch__.upscale.model.bsvd.model.___torch_mangle_45.UpBlock = prim::GetAttr[name="upc2"](%temp2.5)
            %memconv.51 : __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock = prim::GetAttr[name="memconv"](%upc2.12)
            %c1.51 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.51)
            %6358 : bool = aten::__isnot__(%x2.1, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.137 : Tensor? = prim::If(%6358) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.139 : Tensor = prim::unchecked_cast(%x2.1)
                %6361 : int[] = aten::size(%input_right.139) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %6362 : int, %6363 : int, %6364 : int, %6365 : int = prim::ListUnpack(%6361)
                 = prim::SetAttr[name="n"](%c1.51, %6362)
                 = prim::SetAttr[name="c"](%c1.51, %6363)
                 = prim::SetAttr[name="h"](%c1.51, %6364)
                 = prim::SetAttr[name="w"](%c1.51, %6365)
                %c.28 : int = prim::GetAttr[name="c"](%c1.51)
                %6367 : int = aten::floordiv(%c.28, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.51, %6367)
                -> (%input_right.139)
              block1():
                -> (%x2.1)
            %center.86 : Tensor? = prim::GetAttr[name="center"](%c1.51)
            %6369 : bool = aten::__is__(%center.86, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.110 : Tensor? = prim::If(%6369) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %6371 : bool = aten::__isnot__(%input_right.137, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%6371) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.141 : Tensor = prim::unchecked_cast(%input_right.137)
                    %left_fold_2fold.70 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.51)
                    %6374 : int[] = aten::size(%left_fold_2fold.70) # <string>:13:9
                    %6375 : int = aten::__getitem__(%6374, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %6376 : bool = aten::eq(%6375, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%6376) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.38 : int = prim::GetAttr[name="n"](%c1.51)
                        %fold.47 : int = prim::GetAttr[name="fold"](%c1.51)
                        %h.38 : int = prim::GetAttr[name="h"](%c1.51)
                        %w.38 : int = prim::GetAttr[name="w"](%c1.51)
                        %6381 : int[] = prim::ListConstruct(%n.38, %fold.47, %h.38, %w.38)
                        %6382 : Tensor = aten::zeros(%6381, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.51, %6382)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.51, %input_right.141)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.51, %34)
                    -> ()
                -> (%34)
              block1():
                %6383 : bool = aten::__is__(%input_right.137, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.143 : Tensor?, %output.43 : Tensor = prim::If(%6383) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.88 : Tensor? = prim::GetAttr[name="center"](%c1.51)
                    %6387 : bool = aten::__isnot__(%center.88, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%6387) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.72 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.51)
                    %center.90 : Tensor? = prim::GetAttr[name="center"](%c1.51)
                    %n.40 : int = prim::GetAttr[name="n"](%c1.51)
                    %fold.49 : int = prim::GetAttr[name="fold"](%c1.51)
                    %h.40 : int = prim::GetAttr[name="h"](%c1.51)
                    %w.40 : int = prim::GetAttr[name="w"](%c1.51)
                    %6395 : int[] = prim::ListConstruct(%n.40, %fold.49, %h.40, %w.40)
                    %6396 : Tensor = aten::zeros(%6395, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %6398 : bool = aten::__is__(%center.90, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6399 : bool = aten::__not__(%6398) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.92 : Tensor, %left_fold_2fold.74 : Tensor = prim::If(%6399) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.94 : Tensor = prim::unchecked_cast(%center.90)
                        -> (%center.94, %left_fold_2fold.72)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6403 : int[] = aten::size(%center.92) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.42 : int, %c.30 : int, %h.42 : int, %w.42 : int = prim::ListUnpack(%6403)
                    %fold.51 : int = aten::floordiv(%c.30, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6409 : int[] = aten::size(%left_fold_2fold.74) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6410 : int = aten::__getitem__(%6409, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6411 : bool = aten::eq(%6410, %fold.51) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6411) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6413 : Tensor = aten::slice(%6396, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6414 : Tensor = aten::slice(%6413, %33, %34, %fold.51, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6415 : Tensor = aten::slice(%6414, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6416 : Tensor = aten::slice(%6415, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6417 : Tensor = aten::slice(%center.92, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6418 : int = aten::mul(%fold.51, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6419 : Tensor = aten::slice(%6417, %33, %6418, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6420 : Tensor = aten::slice(%6419, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6421 : Tensor = aten::slice(%6420, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6422 : Tensor[] = prim::ListConstruct(%6416, %left_fold_2fold.74, %6421)
                    %6423 : Tensor = aten::cat(%6422, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.45 : Tensor = aten::conv2d(%6423, %self.temp2.upc2.memconv.c1.op.conv.weight, %self.temp2.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.137, %output.45)
                  block1():
                    %input_right.145 : Tensor = prim::unchecked_cast(%input_right.137)
                    %left_fold_2fold.76 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.51)
                    %center.96 : Tensor? = prim::GetAttr[name="center"](%c1.51)
                    %6435 : bool = aten::__is__(%center.96, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6436 : bool = aten::__not__(%6435) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.98 : Tensor, %left_fold_2fold.78 : Tensor = prim::If(%6436) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.100 : Tensor = prim::unchecked_cast(%center.96)
                        -> (%center.100, %left_fold_2fold.76)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6440 : int[] = aten::size(%center.98) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.44 : int, %c.32 : int, %h.44 : int, %w.44 : int = prim::ListUnpack(%6440)
                    %fold.53 : int = aten::floordiv(%c.32, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6446 : int[] = aten::size(%left_fold_2fold.78) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6447 : int = aten::__getitem__(%6446, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6448 : bool = aten::eq(%6447, %fold.53) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6448) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6450 : Tensor = aten::slice(%input_right.145, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6451 : Tensor = aten::slice(%6450, %33, %34, %fold.53, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6452 : Tensor = aten::slice(%6451, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6453 : Tensor = aten::slice(%6452, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6454 : Tensor = aten::slice(%center.98, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6455 : int = aten::mul(%fold.53, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6456 : Tensor = aten::slice(%6454, %33, %6455, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6457 : Tensor = aten::slice(%6456, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6458 : Tensor = aten::slice(%6457, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6459 : Tensor[] = prim::ListConstruct(%6453, %left_fold_2fold.78, %6458)
                    %6460 : Tensor = aten::cat(%6459, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.47 : Tensor = aten::conv2d(%6460, %self.temp2.upc2.memconv.c1.op.conv.weight, %self.temp2.upc2.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.145, %output.47)
                %center.102 : Tensor? = prim::GetAttr[name="center"](%c1.51)
                %fold.55 : int = prim::GetAttr[name="fold"](%c1.51)
                %6470 : bool = aten::__isnot__(%center.102, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.112 : Tensor = prim::If(%6470) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.114 : Tensor = prim::unchecked_cast(%center.102)
                    -> (%x.114)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %6473 : Tensor = aten::slice(%x.112, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6474 : int = aten::mul(%fold.55, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %6475 : Tensor = aten::slice(%6473, %33, %fold.55, %6474, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6476 : Tensor = aten::slice(%6475, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6477 : Tensor = aten::slice(%6476, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.51, %6477)
                %6478 : bool = aten::__isnot__(%input_right.143, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%6478) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.147 : Tensor = prim::unchecked_cast(%input_right.143)
                     = prim::SetAttr[name="center"](%c1.51, %input_right.147)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.51, %34)
                    -> ()
                -> (%output.43)
            %6480 : bool = aten::__isnot__(%x.110, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.116 : Tensor? = prim::If(%6480) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.118 : Tensor = prim::unchecked_cast(%x.110)
                %x.120 : Tensor = aten::hardtanh_(%x.118, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.120)
              block1():
                -> (%x.110)
            %c2.51 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.51)
            %6485 : bool = aten::__isnot__(%x.116, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.149 : Tensor? = prim::If(%6485) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.151 : Tensor = prim::unchecked_cast(%x.116)
                %6488 : int[] = aten::size(%input_right.151) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %6489 : int, %6490 : int, %6491 : int, %6492 : int = prim::ListUnpack(%6488)
                 = prim::SetAttr[name="n"](%c2.51, %6489)
                 = prim::SetAttr[name="c"](%c2.51, %6490)
                 = prim::SetAttr[name="h"](%c2.51, %6491)
                 = prim::SetAttr[name="w"](%c2.51, %6492)
                %c.34 : int = prim::GetAttr[name="c"](%c2.51)
                %6494 : int = aten::floordiv(%c.34, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.51, %6494)
                -> (%input_right.151)
              block1():
                -> (%x.116)
            %center.104 : Tensor? = prim::GetAttr[name="center"](%c2.51)
            %6496 : bool = aten::__is__(%center.104, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.122 : Tensor? = prim::If(%6496) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %6498 : bool = aten::__isnot__(%input_right.149, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%6498) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.153 : Tensor = prim::unchecked_cast(%input_right.149)
                    %left_fold_2fold.80 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.51)
                    %6501 : int[] = aten::size(%left_fold_2fold.80) # <string>:13:9
                    %6502 : int = aten::__getitem__(%6501, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %6503 : bool = aten::eq(%6502, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%6503) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.46 : int = prim::GetAttr[name="n"](%c2.51)
                        %fold.57 : int = prim::GetAttr[name="fold"](%c2.51)
                        %h.46 : int = prim::GetAttr[name="h"](%c2.51)
                        %w.46 : int = prim::GetAttr[name="w"](%c2.51)
                        %6508 : int[] = prim::ListConstruct(%n.46, %fold.57, %h.46, %w.46)
                        %6509 : Tensor = aten::zeros(%6508, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.51, %6509)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.51, %input_right.153)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.51, %34)
                    -> ()
                -> (%34)
              block1():
                %6510 : bool = aten::__is__(%input_right.149, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.155 : Tensor?, %output.49 : Tensor = prim::If(%6510) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.106 : Tensor? = prim::GetAttr[name="center"](%c2.51)
                    %6514 : bool = aten::__isnot__(%center.106, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%6514) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.82 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.51)
                    %center.108 : Tensor? = prim::GetAttr[name="center"](%c2.51)
                    %n.48 : int = prim::GetAttr[name="n"](%c2.51)
                    %fold.59 : int = prim::GetAttr[name="fold"](%c2.51)
                    %h.48 : int = prim::GetAttr[name="h"](%c2.51)
                    %w.48 : int = prim::GetAttr[name="w"](%c2.51)
                    %6522 : int[] = prim::ListConstruct(%n.48, %fold.59, %h.48, %w.48)
                    %6523 : Tensor = aten::zeros(%6522, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %6525 : bool = aten::__is__(%center.108, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6526 : bool = aten::__not__(%6525) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.110 : Tensor, %left_fold_2fold.84 : Tensor = prim::If(%6526) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.112 : Tensor = prim::unchecked_cast(%center.108)
                        -> (%center.112, %left_fold_2fold.82)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6530 : int[] = aten::size(%center.110) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.50 : int, %c.36 : int, %h.50 : int, %w.50 : int = prim::ListUnpack(%6530)
                    %fold.61 : int = aten::floordiv(%c.36, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6536 : int[] = aten::size(%left_fold_2fold.84) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6537 : int = aten::__getitem__(%6536, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6538 : bool = aten::eq(%6537, %fold.61) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6538) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6540 : Tensor = aten::slice(%6523, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6541 : Tensor = aten::slice(%6540, %33, %34, %fold.61, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6542 : Tensor = aten::slice(%6541, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6543 : Tensor = aten::slice(%6542, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6544 : Tensor = aten::slice(%center.110, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6545 : int = aten::mul(%fold.61, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6546 : Tensor = aten::slice(%6544, %33, %6545, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6547 : Tensor = aten::slice(%6546, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6548 : Tensor = aten::slice(%6547, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6549 : Tensor[] = prim::ListConstruct(%6543, %left_fold_2fold.84, %6548)
                    %6550 : Tensor = aten::cat(%6549, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.51 : Tensor = aten::conv2d(%6550, %self.temp2.upc2.memconv.c2.op.conv.weight, %self.temp2.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.149, %output.51)
                  block1():
                    %input_right.157 : Tensor = prim::unchecked_cast(%input_right.149)
                    %left_fold_2fold.86 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.51)
                    %center.114 : Tensor? = prim::GetAttr[name="center"](%c2.51)
                    %6562 : bool = aten::__is__(%center.114, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6563 : bool = aten::__not__(%6562) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.116 : Tensor, %left_fold_2fold.88 : Tensor = prim::If(%6563) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.118 : Tensor = prim::unchecked_cast(%center.114)
                        -> (%center.118, %left_fold_2fold.86)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6567 : int[] = aten::size(%center.116) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.52 : int, %c.38 : int, %h.52 : int, %w.52 : int = prim::ListUnpack(%6567)
                    %fold.63 : int = aten::floordiv(%c.38, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6573 : int[] = aten::size(%left_fold_2fold.88) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6574 : int = aten::__getitem__(%6573, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6575 : bool = aten::eq(%6574, %fold.63) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6575) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6577 : Tensor = aten::slice(%input_right.157, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6578 : Tensor = aten::slice(%6577, %33, %34, %fold.63, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6579 : Tensor = aten::slice(%6578, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6580 : Tensor = aten::slice(%6579, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6581 : Tensor = aten::slice(%center.116, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6582 : int = aten::mul(%fold.63, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6583 : Tensor = aten::slice(%6581, %33, %6582, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6584 : Tensor = aten::slice(%6583, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6585 : Tensor = aten::slice(%6584, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6586 : Tensor[] = prim::ListConstruct(%6580, %left_fold_2fold.88, %6585)
                    %6587 : Tensor = aten::cat(%6586, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.53 : Tensor = aten::conv2d(%6587, %self.temp2.upc2.memconv.c2.op.conv.weight, %self.temp2.upc2.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.157, %output.53)
                %center.120 : Tensor? = prim::GetAttr[name="center"](%c2.51)
                %fold.65 : int = prim::GetAttr[name="fold"](%c2.51)
                %6597 : bool = aten::__isnot__(%center.120, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.124 : Tensor = prim::If(%6597) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.126 : Tensor = prim::unchecked_cast(%center.120)
                    -> (%x.126)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %6600 : Tensor = aten::slice(%x.124, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6601 : int = aten::mul(%fold.65, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %6602 : Tensor = aten::slice(%6600, %33, %fold.65, %6601, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6603 : Tensor = aten::slice(%6602, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6604 : Tensor = aten::slice(%6603, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.51, %6604)
                %6605 : bool = aten::__isnot__(%input_right.155, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%6605) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.159 : Tensor = prim::unchecked_cast(%input_right.155)
                     = prim::SetAttr[name="center"](%c2.51, %input_right.159)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.51, %34)
                    -> ()
                -> (%output.49)
            %6607 : bool = aten::__isnot__(%x.122, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x.128 : Tensor? = prim::If(%6607) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.130 : Tensor = prim::unchecked_cast(%x.122)
                %x.132 : Tensor = aten::hardtanh_(%x.130, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.132)
              block1():
                -> (%x.122)
            %6611 : bool = aten::__isnot__(%x.128, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
            %x2.5 : Tensor? = prim::If(%6611) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
              block0():
                %x.134 : Tensor = prim::unchecked_cast(%x.128)
                %input.14 : Tensor = aten::conv2d(%x.134, %self.temp2.upc2.convblock.0.weight, %self.temp2.upc2.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.136 : Tensor = aten::pixel_shuffle(%input.14, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
                -> (%x.136)
              block1():
                -> (%x.128)
            %upc1.12 : __torch__.upscale.model.bsvd.model.___torch_mangle_49.UpBlock = prim::GetAttr[name="upc1"](%temp2.5)
            %6625 : bool = aten::__isnot__(%x2.5, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %6626 : Tensor? = prim::If(%6625) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list.7 : Tensor[] = prim::GetAttr[name="mem_list"](%skip3.1)
                %6628 : Tensor = aten::pop(%mem_list.7, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%6628)
              block1():
                -> (%34)
            %6629 : bool = aten::__is__(%x2.5, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
            %6630 : bool, %x1.22 : Tensor? = prim::If(%6629) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
              block0():
                -> (%35, %x2.5)
              block1():
                %x1.24 : Tensor = prim::unchecked_cast(%x2.5)
                %6633 : bool = aten::__is__(%6626, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
                -> (%6633, %x1.24)
            %6634 : Tensor? = prim::If(%6630) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
              block0():
                -> (%34)
              block1():
                %x1.26 : Tensor = prim::unchecked_cast(%x1.22)
                %x2.8 : Tensor = prim::unchecked_cast(%6626)
                %6637 : Tensor = aten::add(%x1.26, %x2.8, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
                -> (%6637)
            %memconv.53 : __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock = prim::GetAttr[name="memconv"](%upc1.12)
            %c1.53 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.53)
            %6640 : bool = aten::__isnot__(%6634, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.84 : Tensor? = prim::If(%6640) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.86 : Tensor = prim::unchecked_cast(%6634)
                %6643 : int[] = aten::size(%input_right.86) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %6644 : int, %6645 : int, %6646 : int, %6647 : int = prim::ListUnpack(%6643)
                 = prim::SetAttr[name="n"](%c1.53, %6644)
                 = prim::SetAttr[name="c"](%c1.53, %6645)
                 = prim::SetAttr[name="h"](%c1.53, %6646)
                 = prim::SetAttr[name="w"](%c1.53, %6647)
                %c.3 : int = prim::GetAttr[name="c"](%c1.53)
                %6649 : int = aten::floordiv(%c.3, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c1.53, %6649)
                -> (%input_right.86)
              block1():
                -> (%6634)
            %center.2 : Tensor? = prim::GetAttr[name="center"](%c1.53)
            %6651 : bool = aten::__is__(%center.2, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.5 : Tensor? = prim::If(%6651) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %6653 : bool = aten::__isnot__(%input_right.84, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%6653) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.88 : Tensor = prim::unchecked_cast(%input_right.84)
                    %left_fold_2fold.4 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.53)
                    %6656 : int[] = aten::size(%left_fold_2fold.4) # <string>:13:9
                    %6657 : int = aten::__getitem__(%6656, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %6658 : bool = aten::eq(%6657, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%6658) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.3 : int = prim::GetAttr[name="n"](%c1.53)
                        %fold.6 : int = prim::GetAttr[name="fold"](%c1.53)
                        %h.3 : int = prim::GetAttr[name="h"](%c1.53)
                        %w.3 : int = prim::GetAttr[name="w"](%c1.53)
                        %6663 : int[] = prim::ListConstruct(%n.3, %fold.6, %h.3, %w.3)
                        %6664 : Tensor = aten::zeros(%6663, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c1.53, %6664)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c1.53, %input_right.88)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.53, %34)
                    -> ()
                -> (%34)
              block1():
                %6665 : bool = aten::__is__(%input_right.84, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.90 : Tensor?, %output.18 : Tensor = prim::If(%6665) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.4 : Tensor? = prim::GetAttr[name="center"](%c1.53)
                    %6669 : bool = aten::__isnot__(%center.4, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%6669) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.6 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.53)
                    %center.6 : Tensor? = prim::GetAttr[name="center"](%c1.53)
                    %n.5 : int = prim::GetAttr[name="n"](%c1.53)
                    %fold.8 : int = prim::GetAttr[name="fold"](%c1.53)
                    %h.5 : int = prim::GetAttr[name="h"](%c1.53)
                    %w.5 : int = prim::GetAttr[name="w"](%c1.53)
                    %6677 : int[] = prim::ListConstruct(%n.5, %fold.8, %h.5, %w.5)
                    %6678 : Tensor = aten::zeros(%6677, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %6680 : bool = aten::__is__(%center.6, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6681 : bool = aten::__not__(%6680) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.11 : Tensor, %left_fold_2fold.33 : Tensor = prim::If(%6681) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.13 : Tensor = prim::unchecked_cast(%center.6)
                        -> (%center.13, %left_fold_2fold.6)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6685 : int[] = aten::size(%center.11) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.7 : int, %c.5 : int, %h.7 : int, %w.7 : int = prim::ListUnpack(%6685)
                    %fold.10 : int = aten::floordiv(%c.5, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6691 : int[] = aten::size(%left_fold_2fold.33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6692 : int = aten::__getitem__(%6691, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6693 : bool = aten::eq(%6692, %fold.10) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6693) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6695 : Tensor = aten::slice(%6678, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6696 : Tensor = aten::slice(%6695, %33, %34, %fold.10, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6697 : Tensor = aten::slice(%6696, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6698 : Tensor = aten::slice(%6697, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6699 : Tensor = aten::slice(%center.11, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6700 : int = aten::mul(%fold.10, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6701 : Tensor = aten::slice(%6699, %33, %6700, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6702 : Tensor = aten::slice(%6701, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6703 : Tensor = aten::slice(%6702, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6704 : Tensor[] = prim::ListConstruct(%6698, %left_fold_2fold.33, %6703)
                    %6705 : Tensor = aten::cat(%6704, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.20 : Tensor = aten::conv2d(%6705, %self.temp2.upc1.memconv.c1.op.conv.weight, %self.temp2.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.84, %output.20)
                  block1():
                    %input_right.92 : Tensor = prim::unchecked_cast(%input_right.84)
                    %left_fold_2fold.35 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c1.53)
                    %center.15 : Tensor? = prim::GetAttr[name="center"](%c1.53)
                    %6717 : bool = aten::__is__(%center.15, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6718 : bool = aten::__not__(%6717) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.17 : Tensor, %left_fold_2fold.37 : Tensor = prim::If(%6718) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.19 : Tensor = prim::unchecked_cast(%center.15)
                        -> (%center.19, %left_fold_2fold.35)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6722 : int[] = aten::size(%center.17) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.9 : int, %c.7 : int, %h.9 : int, %w.9 : int = prim::ListUnpack(%6722)
                    %fold.12 : int = aten::floordiv(%c.7, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6728 : int[] = aten::size(%left_fold_2fold.37) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6729 : int = aten::__getitem__(%6728, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6730 : bool = aten::eq(%6729, %fold.12) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6730) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6732 : Tensor = aten::slice(%input_right.92, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6733 : Tensor = aten::slice(%6732, %33, %34, %fold.12, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6734 : Tensor = aten::slice(%6733, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6735 : Tensor = aten::slice(%6734, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6736 : Tensor = aten::slice(%center.17, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6737 : int = aten::mul(%fold.12, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6738 : Tensor = aten::slice(%6736, %33, %6737, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6739 : Tensor = aten::slice(%6738, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6740 : Tensor = aten::slice(%6739, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6741 : Tensor[] = prim::ListConstruct(%6735, %left_fold_2fold.37, %6740)
                    %6742 : Tensor = aten::cat(%6741, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.22 : Tensor = aten::conv2d(%6742, %self.temp2.upc1.memconv.c1.op.conv.weight, %self.temp2.upc1.memconv.c1.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.92, %output.22)
                %center.21 : Tensor? = prim::GetAttr[name="center"](%c1.53)
                %fold.14 : int = prim::GetAttr[name="fold"](%c1.53)
                %6752 : bool = aten::__isnot__(%center.21, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x.26 : Tensor = prim::If(%6752) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.28 : Tensor = prim::unchecked_cast(%center.21)
                    -> (%x.28)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %6755 : Tensor = aten::slice(%x.26, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6756 : int = aten::mul(%fold.14, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %6757 : Tensor = aten::slice(%6755, %33, %fold.14, %6756, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6758 : Tensor = aten::slice(%6757, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6759 : Tensor = aten::slice(%6758, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c1.53, %6759)
                %6760 : bool = aten::__isnot__(%input_right.90, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%6760) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.94 : Tensor = prim::unchecked_cast(%input_right.90)
                     = prim::SetAttr[name="center"](%c1.53, %input_right.94)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c1.53, %34)
                    -> ()
                -> (%output.18)
            %6762 : bool = aten::__isnot__(%x.5, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:11
            %x.69 : Tensor? = prim::If(%6762) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:159:8
              block0():
                %x.17 : Tensor = prim::unchecked_cast(%x.5)
                %x.23 : Tensor = aten::hardtanh_(%x.17, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.23)
              block1():
                -> (%x.5)
            %c2.53 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.53)
            %6767 : bool = aten::__isnot__(%x.69, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:11
            %input_right.83 : Tensor? = prim::If(%6767) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:96:8
              block0():
                %input_right.7 : Tensor = prim::unchecked_cast(%x.69)
                %6770 : int[] = aten::size(%input_right.7) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:97:45
                %6771 : int, %6772 : int, %6773 : int, %6774 : int = prim::ListUnpack(%6770)
                 = prim::SetAttr[name="n"](%c2.53, %6771)
                 = prim::SetAttr[name="c"](%c2.53, %6772)
                 = prim::SetAttr[name="h"](%c2.53, %6773)
                 = prim::SetAttr[name="w"](%c2.53, %6774)
                %c : int = prim::GetAttr[name="c"](%c2.53)
                %6776 : int = aten::floordiv(%c, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:98:24
                 = prim::SetAttr[name="fold"](%c2.53, %6776)
                -> (%input_right.7)
              block1():
                -> (%x.69)
            %center.1 : Tensor? = prim::GetAttr[name="center"](%c2.53)
            %6778 : bool = aten::__is__(%center.1, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:11
            %x.37 : Tensor? = prim::If(%6778) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:101:8
              block0():
                %6780 : bool = aten::__isnot__(%input_right.83, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:15
                 = prim::If(%6780) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:104:12
                  block0():
                    %input_right.25 : Tensor = prim::unchecked_cast(%input_right.83)
                    %left_fold_2fold.3 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.53)
                    %6783 : int[] = aten::size(%left_fold_2fold.3) # <string>:13:9
                    %6784 : int = aten::__getitem__(%6783, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                    %6785 : bool = aten::eq(%6784, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:51
                     = prim::If(%6785) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:105:16
                      block0():
                        %n.1 : int = prim::GetAttr[name="n"](%c2.53)
                        %fold.2 : int = prim::GetAttr[name="fold"](%c2.53)
                        %h.1 : int = prim::GetAttr[name="h"](%c2.53)
                        %w.1 : int = prim::GetAttr[name="w"](%c2.53)
                        %6790 : int[] = prim::ListConstruct(%n.1, %fold.2, %h.1, %w.1)
                        %6791 : Tensor = aten::zeros(%6790, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:108:43
                         = prim::SetAttr[name="left_fold_2fold"](%c2.53, %6791)
                        -> ()
                      block1():
                        -> ()
                     = prim::SetAttr[name="center"](%c2.53, %input_right.25)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.53, %34)
                    -> ()
                -> (%34)
              block1():
                %6792 : bool = aten::__is__(%input_right.83, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:13
                %input_right.87 : Tensor?, %output.17 : Tensor = prim::If(%6792) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:120:8
                  block0():
                    %center.3 : Tensor? = prim::GetAttr[name="center"](%c2.53)
                    %6796 : bool = aten::__isnot__(%center.3, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:19
                     = prim::If(%6796) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:121:12
                        -> ()
                    %left_fold_2fold.5 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.53)
                    %center.5 : Tensor? = prim::GetAttr[name="center"](%c2.53)
                    %n.2 : int = prim::GetAttr[name="n"](%c2.53)
                    %fold.3 : int = prim::GetAttr[name="fold"](%c2.53)
                    %h.2 : int = prim::GetAttr[name="h"](%c2.53)
                    %w.2 : int = prim::GetAttr[name="w"](%c2.53)
                    %6804 : int[] = prim::ListConstruct(%n.2, %fold.3, %h.2, %w.2)
                    %6805 : Tensor = aten::zeros(%6804, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:123:65
                    %6807 : bool = aten::__is__(%center.5, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6808 : bool = aten::__not__(%6807) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center.10 : Tensor, %left_fold_2fold.32 : Tensor = prim::If(%6808) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.12 : Tensor = prim::unchecked_cast(%center.5)
                        -> (%center.12, %left_fold_2fold.5)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6812 : int[] = aten::size(%center.10) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n.4 : int, %c.2 : int, %h.4 : int, %w.4 : int = prim::ListUnpack(%6812)
                    %fold.4 : int = aten::floordiv(%c.2, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6818 : int[] = aten::size(%left_fold_2fold.32) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6819 : int = aten::__getitem__(%6818, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6820 : bool = aten::eq(%6819, %fold.4) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6820) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6822 : Tensor = aten::slice(%6805, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6823 : Tensor = aten::slice(%6822, %33, %34, %fold.4, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6824 : Tensor = aten::slice(%6823, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6825 : Tensor = aten::slice(%6824, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6826 : Tensor = aten::slice(%center.10, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6827 : int = aten::mul(%fold.4, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6828 : Tensor = aten::slice(%6826, %33, %6827, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6829 : Tensor = aten::slice(%6828, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6830 : Tensor = aten::slice(%6829, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6831 : Tensor[] = prim::ListConstruct(%6825, %left_fold_2fold.32, %6830)
                    %6832 : Tensor = aten::cat(%6831, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.1 : Tensor = aten::conv2d(%6832, %self.temp2.upc1.memconv.c2.op.conv.weight, %self.temp2.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.83, %output.1)
                  block1():
                    %input_right.43 : Tensor = prim::unchecked_cast(%input_right.83)
                    %left_fold_2fold.1 : Tensor = prim::GetAttr[name="left_fold_2fold"](%c2.53)
                    %center.8 : Tensor? = prim::GetAttr[name="center"](%c2.53)
                    %6844 : bool = aten::__is__(%center.8, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:46
                    %6845 : bool = aten::__not__(%6844) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:15
                    %center : Tensor, %left_fold_2fold : Tensor = prim::If(%6845) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                      block0():
                        %center.7 : Tensor = prim::unchecked_cast(%center.8)
                        -> (%center.7, %left_fold_2fold.1)
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:44:8
                        -> (%37, %37)
                    %6849 : int[] = aten::size(%center) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:46:21
                    %n : int, %c.1 : int, %h : int, %w : int = prim::ListUnpack(%6849)
                    %fold.1 : int = aten::floordiv(%c.1, %fold_div.6) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:47:15
                    %6855 : int[] = aten::size(%left_fold_2fold) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6856 : int = aten::__getitem__(%6855, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                    %6857 : bool = aten::eq(%6856, %fold.1) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:15
                     = prim::If(%6857) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                      block0():
                        -> ()
                      block1():
                         = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:49:8
                        -> ()
                    %6859 : Tensor = aten::slice(%input_right.43, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6860 : Tensor = aten::slice(%6859, %33, %34, %fold.1, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6861 : Tensor = aten::slice(%6860, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6862 : Tensor = aten::slice(%6861, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:38
                    %6863 : Tensor = aten::slice(%center, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6864 : int = aten::mul(%fold.1, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:47
                    %6865 : Tensor = aten::slice(%6863, %33, %6864, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6866 : Tensor = aten::slice(%6865, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6867 : Tensor = aten::slice(%6866, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:52:37
                    %6868 : Tensor[] = prim::ListConstruct(%6862, %left_fold_2fold, %6867)
                    %6869 : Tensor = aten::cat(%6868, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:50:26
                    %output.3 : Tensor = aten::conv2d(%6869, %self.temp2.upc1.memconv.c2.op.conv.weight, %self.temp2.upc1.memconv.c2.op.conv.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                    -> (%input_right.43, %output.3)
                %center.9 : Tensor? = prim::GetAttr[name="center"](%c2.53)
                %fold.5 : int = prim::GetAttr[name="fold"](%c2.53)
                %6879 : bool = aten::__isnot__(%center.9, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:11
                %x : Tensor = prim::If(%6879) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                  block0():
                    %x.138 : Tensor = prim::unchecked_cast(%center.9)
                    -> (%x.138)
                  block1():
                     = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:56:4
                    -> (%37)
                %6882 : Tensor = aten::slice(%x, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6883 : int = aten::mul(%fold.5, %3) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:21
                %6884 : Tensor = aten::slice(%6882, %33, %fold.5, %6883, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6885 : Tensor = aten::slice(%6884, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                %6886 : Tensor = aten::slice(%6885, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:57:11
                 = prim::SetAttr[name="left_fold_2fold"](%c2.53, %6886)
                %6887 : bool = aten::__isnot__(%input_right.87, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:11
                 = prim::If(%6887) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:134:8
                  block0():
                    %input_right.93 : Tensor = prim::unchecked_cast(%input_right.87)
                     = prim::SetAttr[name="center"](%c2.53, %input_right.93)
                    -> ()
                  block1():
                     = prim::SetAttr[name="center"](%c2.53, %34)
                    -> ()
                -> (%output.17)
            %6889 : bool = aten::__isnot__(%x.37, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:11
            %x.6 : Tensor? = prim::If(%6889) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:163:8
              block0():
                %x.49 : Tensor = prim::unchecked_cast(%x.37)
                %x.55 : Tensor = aten::hardtanh_(%x.49, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                -> (%x.55)
              block1():
                -> (%x.37)
            %6893 : bool = aten::__isnot__(%x.6, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:11
            %x1.8 : Tensor? = prim::If(%6893) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:300:8
              block0():
                %x.11 : Tensor = prim::unchecked_cast(%x.6)
                %input.5 : Tensor = aten::conv2d(%x.11, %self.temp2.upc1.convblock.0.weight, %self.temp2.upc1.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %x.18 : Tensor = aten::pixel_shuffle(%input.5, %3) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/pixelshuffle.py:53:15
                -> (%x.18)
              block1():
                -> (%x.6)
            %6907 : bool = aten::__isnot__(%x1.8, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %6908 : Tensor? = prim::If(%6907) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list.9 : Tensor[] = prim::GetAttr[name="mem_list"](%skip2.1)
                %6910 : Tensor = aten::pop(%mem_list.9, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%6910)
              block1():
                -> (%34)
            %6911 : bool = aten::__is__(%x1.8, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
            %6912 : bool, %x1.28 : Tensor? = prim::If(%6911) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:11
              block0():
                -> (%35, %x1.8)
              block1():
                %x1.30 : Tensor = prim::unchecked_cast(%x1.8)
                %6915 : bool = aten::__is__(%6908, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:25
                -> (%6915, %x1.30)
            %6916 : Tensor? = prim::If(%6912) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:431:8
              block0():
                -> (%34)
              block1():
                %x1.32 : Tensor = prim::unchecked_cast(%x1.28)
                %x2.10 : Tensor = prim::unchecked_cast(%6908)
                %6919 : Tensor = aten::add(%x1.32, %x2.10, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:434:19
                -> (%6919)
            %6920 : bool = aten::__is__(%6916, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:11
            %x.1 : Tensor? = prim::If(%6920) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:326:8
              block0():
                -> (%34)
              block1():
                %x.7 : Tensor = prim::unchecked_cast(%6916)
                %input.9 : Tensor = aten::conv2d(%x.7, %self.temp2.outc.convblock.0.weight, %self.temp2.outc.convblock.0.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                %input.13 : Tensor = aten::hardtanh_(%input.9, %27, %26) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/functional.py:1506:17
                %input.17 : Tensor = aten::conv2d(%input.13, %self.temp2.outc.convblock.3.weight, %self.temp2.outc.convblock.3.bias, %7564, %7564, %7564, %33) # /home/ainl/anaconda3/envs/torch/lib/python3.8/site-packages/torch/nn/modules/conv.py:453:15
                -> (%input.17)
            %6940 : bool = aten::__isnot__(%x.1, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:11
            %6941 : Tensor? = prim::If(%6940) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:347:8
              block0():
                %mem_list : Tensor[] = prim::GetAttr[name="mem_list"](%skip1.1)
                %6943 : Tensor = aten::pop(%mem_list, %24) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:348:19
                -> (%6943)
              block1():
                -> (%34)
            %6944 : bool = aten::__is__(%6941, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
            %6945 : bool, %x1.21 : Tensor? = prim::If(%6944) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:11
              block0():
                -> (%35, %6941)
              block1():
                %x1.7 : Tensor = prim::unchecked_cast(%6941)
                %6948 : bool = aten::__is__(%x.1, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:25
                -> (%6948, %x1.7)
            %end_out.5 : Tensor? = prim::If(%6945) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:437:8
              block0():
                -> (%34)
              block1():
                %x1.13 : Tensor = prim::unchecked_cast(%x1.21)
                %x2.7 : Tensor = prim::unchecked_cast(%x.1)
                %6952 : Tensor = aten::slice(%x1.13, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %6953 : Tensor = aten::slice(%6952, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %6954 : Tensor = aten::slice(%6953, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %6955 : Tensor = aten::slice(%6954, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %6956 : Tensor = aten::slice(%x2.7, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %6957 : Tensor = aten::slice(%6956, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %6958 : Tensor = aten::slice(%6957, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %6959 : Tensor = aten::slice(%6958, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:51
                %6960 : Tensor = aten::sub(%6955, %6959, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:33
                %6961 : Tensor = aten::slice(%x2.7, %32, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %6962 : Tensor = aten::slice(%6961, %33, %34, %29, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %6963 : Tensor = aten::slice(%6962, %3, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %6964 : Tensor = aten::slice(%6963, %29, %34, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                %6965 : Tensor = aten::copy_(%6964, %6960, %30) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:441:12
                -> (%x2.7)
            %6966 : int = aten::len(%out_seq.1) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:566:19
            %6968 : int = aten::len(%input_seq.13) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:566:51
            %6969 : int = aten::add(%6968, %self.shift_num) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:566:36
            %6970 : bool = aten::eq(%6966, %6969) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:566:19
            %6971 : bool = prim::If(%6970) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:566:16
              block0():
                -> (%30)
              block1():
                %6972 : Tensor?[] = aten::append(%out_seq.1, %end_out.5) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:569:16
                -> (%35)
            -> (%6971)
        %6973 : Tensor[] = prim::ListConstruct()
        %6975 : Tensor?[] = aten::slice(%out_seq.1, %self.shift_num, %34, %33) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:576:24
        %6976 : int = aten::len(%6975) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:576:12
         = prim::Loop(%6976, %35) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:576:12
          block0(%6977 : int):
            %item.1 : Tensor? = aten::__getitem__(%6975, %6977) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:576:12
            %6979 : bool = aten::__isnot__(%item.1, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:577:23
            %item : Tensor = prim::If(%6979) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:577:16
              block0():
                %item.7 : Tensor = prim::unchecked_cast(%item.1)
                -> (%item.7)
              block1():
                 = prim::RaiseException(%36, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:577:16
                -> (%37)
            %6982 : Tensor[] = aten::append(%6973, %item) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:578:16
            -> (%35)
        %c1.2 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.23)
        %6988 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c1.2, %6988)
         = prim::SetAttr[name="center"](%c1.2, %34)
        %c2.2 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.23)
        %6991 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c2.2, %6991)
         = prim::SetAttr[name="center"](%c2.2, %34)
        %c1.4 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.25)
        %6996 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c1.4, %6996)
         = prim::SetAttr[name="center"](%c1.4, %34)
        %c2.4 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.25)
        %6999 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c2.4, %6999)
         = prim::SetAttr[name="center"](%c2.4, %34)
        %c1.6 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.27)
        %7004 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c1.6, %7004)
         = prim::SetAttr[name="center"](%c1.6, %34)
        %c2.6 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.27)
        %7007 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c2.6, %7007)
         = prim::SetAttr[name="center"](%c2.6, %34)
        %c1.8 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.29)
        %7012 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c1.8, %7012)
         = prim::SetAttr[name="center"](%c1.8, %34)
        %c2.8 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.29)
        %7015 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c2.8, %7015)
         = prim::SetAttr[name="center"](%c2.8, %34)
        %c1.1 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.31)
        %7021 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c1.1, %7021)
         = prim::SetAttr[name="center"](%c1.1, %34)
        %c2.1 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.31)
        %7024 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c2.1, %7024)
         = prim::SetAttr[name="center"](%c2.1, %34)
        %c1.3 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.33)
        %7029 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c1.3, %7029)
         = prim::SetAttr[name="center"](%c1.3, %34)
        %c2.3 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.33)
        %7032 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c2.3, %7032)
         = prim::SetAttr[name="center"](%c2.3, %34)
        %c1.5 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c1"](%memconv.35)
        %7037 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c1.5, %7037)
         = prim::SetAttr[name="center"](%c1.5, %34)
        %c2.5 : __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv = prim::GetAttr[name="c2"](%memconv.35)
        %7040 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c2.5, %7040)
         = prim::SetAttr[name="center"](%c2.5, %34)
        %c1 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c1"](%memconv.37)
        %7045 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c1, %7045)
         = prim::SetAttr[name="center"](%c1, %34)
        %c2 : __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv = prim::GetAttr[name="c2"](%memconv.37)
        %7048 : Tensor = aten::zeros(%7657, %34, %34, %23, %34) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:91:31
         = prim::SetAttr[name="left_fold_2fold"](%c2, %7048)
         = prim::SetAttr[name="center"](%c2, %34)
        %base_out.1 : Tensor = aten::cat(%6973, %32) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:580:19
        %7050 : Tensor = prim::Exit(%54)
        %16 : int[] = aten::size(%base_out.1) # <string>:13:9
        %NF : int, %C.5 : int, %H.5 : int, %W.5 : int = prim::ListUnpack(%16)
        %21 : int[] = prim::ListConstruct(%N.1, %F.1, %C.5, %H.5, %W.5)
        %base_out.7 : Tensor = aten::reshape(%base_out.1, %21) # /home/ainl/library/sharkshark-4k/upscale/model/bsvd/model.py:523:19
        return (%base_out.7)
  
    }
  }
  submodules {
    module __torch__.upscale.model.bsvd.model.___torch_mangle_24.DenBlock {
      parameters {
      }
      attributes {
        downc0 = <__torch__.upscale.model.bsvd.model.___torch_mangle_31.DownBlock object at 0x558b317202b0>
        downc1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_38.DownBlock object at 0x558b2bf39630>
        upc2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_45.UpBlock object at 0x558b2bf67d70>
        upc1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_49.UpBlock object at 0x558b2bf73080>
        skip1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip object at 0x558b2bf86d30>
        skip2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip object at 0x558b2bf8c9c0>
        skip3 = <__torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip object at 0x558b2bf8f0d0>
      }
      methods {
      }
      submodules {
        module __torch__.upscale.model.bsvd.model.___torch_mangle_31.DownBlock {
          parameters {
          }
          attributes {
            memconv = <__torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock object at 0x558b2f1c5250>
          }
          methods {
          }
          submodules {
            module __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock {
              parameters {
              }
              attributes {
                c1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv object at 0x558b31719370>
                c2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv object at 0x558ae8fab390>
              }
              methods {
              }
              submodules {
                module __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
                module __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_38.DownBlock {
          parameters {
          }
          attributes {
            memconv = <__torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock object at 0x558b2bf448b0>
          }
          methods {
          }
          submodules {
            module __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock {
              parameters {
              }
              attributes {
                c1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv object at 0x558b2bf46160>
                c2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv object at 0x558b2bf630d0>
              }
              methods {
              }
              submodules {
                module __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
                module __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_45.UpBlock {
          parameters {
          }
          attributes {
            memconv = <__torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock object at 0x558b2bf6d780>
          }
          methods {
          }
          submodules {
            module __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock {
              parameters {
              }
              attributes {
                c1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv object at 0x558b2bf6d890>
                c2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv object at 0x558b2bf6dbd0>
              }
              methods {
              }
              submodules {
                module __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
                module __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_49.UpBlock {
          parameters {
          }
          attributes {
            memconv = <__torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock object at 0x558b2bf734c0>
          }
          methods {
          }
          submodules {
            module __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock {
              parameters {
              }
              attributes {
                c1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv object at 0x558b2bf79cb0>
                c2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv object at 0x558b2bf79ff0>
              }
              methods {
              }
              submodules {
                module __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
                module __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip {
          parameters {
          }
          attributes {
            mem_list = []
          }
          methods {
          }
          submodules {
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip {
          parameters {
          }
          attributes {
            mem_list = []
          }
          methods {
          }
          submodules {
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip {
          parameters {
          }
          attributes {
            mem_list = []
          }
          methods {
          }
          submodules {
          }
        }
      }
    }
    module __torch__.upscale.model.bsvd.model.___torch_mangle_55.DenBlock {
      parameters {
      }
      attributes {
        downc0 = <__torch__.upscale.model.bsvd.model.___torch_mangle_31.DownBlock object at 0x558b2eeed470>
        downc1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_38.DownBlock object at 0x558b2eef1150>
        upc2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_45.UpBlock object at 0x558b2eef1f10>
        upc1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_49.UpBlock object at 0x558b2eef2f30>
        skip1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip object at 0x558b2eef6240>
        skip2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip object at 0x558b2eefd350>
        skip3 = <__torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip object at 0x558b2eefd410>
      }
      methods {
      }
      submodules {
        module __torch__.upscale.model.bsvd.model.___torch_mangle_31.DownBlock {
          parameters {
          }
          attributes {
            memconv = <__torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock object at 0x558b2eef08d0>
          }
          methods {
          }
          submodules {
            module __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock {
              parameters {
              }
              attributes {
                c1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv object at 0x558b2eef09e0>
                c2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv object at 0x558b2eef0d20>
              }
              methods {
              }
              submodules {
                module __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
                module __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_38.DownBlock {
          parameters {
          }
          attributes {
            memconv = <__torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock object at 0x558b2eef1530>
          }
          methods {
          }
          submodules {
            module __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock {
              parameters {
              }
              attributes {
                c1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv object at 0x558b2eef1640>
                c2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv object at 0x558b2eef1a50>
              }
              methods {
              }
              submodules {
                module __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
                module __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_45.UpBlock {
          parameters {
          }
          attributes {
            memconv = <__torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock object at 0x558b2eef1ff0>
          }
          methods {
          }
          submodules {
            module __torch__.upscale.model.bsvd.model.___torch_mangle_41.MemCvBlock {
              parameters {
              }
              attributes {
                c1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv object at 0x558b2eef2100>
                c2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv object at 0x558b2eef24e0>
              }
              methods {
              }
              submodules {
                module __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
                module __torch__.upscale.model.bsvd.model.___torch_mangle_42.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_49.UpBlock {
          parameters {
          }
          attributes {
            memconv = <__torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock object at 0x558b2eef3010>
          }
          methods {
          }
          submodules {
            module __torch__.upscale.model.bsvd.model.___torch_mangle_34.MemCvBlock {
              parameters {
              }
              attributes {
                c1 = <__torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv object at 0x558b2eef3090>
                c2 = <__torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv object at 0x558b2eef3470>
              }
              methods {
              }
              submodules {
                module __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
                module __torch__.upscale.model.bsvd.model.___torch_mangle_35.BiBufferConv {
                  parameters {
                  }
                  attributes {
                    n = 0
                    c = 0
                    h = 0
                    w = 0
                    fold = 0
                    left_fold_2fold = (1,1,.,.) = 
                      0
                    [ CUDAFloatType{1,1,1,1} ]
                    center = None
                  }
                  methods {
                  }
                  submodules {
                  }
                }
              }
            }
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip {
          parameters {
          }
          attributes {
            mem_list = []
          }
          methods {
          }
          submodules {
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip {
          parameters {
          }
          attributes {
            mem_list = []
          }
          methods {
          }
          submodules {
          }
        }
        module __torch__.upscale.model.bsvd.model.___torch_mangle_54.MemSkip {
          parameters {
          }
          attributes {
            mem_list = []
          }
          methods {
          }
          submodules {
          }
        }
      }
    }
  }
}

load from ./upscale/model/bsvd/bsvd-64.pth
torch.Size([1, 1, 4, 540, 960])
warm 0
warm 10
warm 20
warm 30
warm 40
0
10
20
30
40
50
60
70
80
90
4.057061433792114
